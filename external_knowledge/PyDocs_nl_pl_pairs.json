[{"intent": "Closes the current element . `tag` is the element name .", "snippet": "tree_builder.end(tag)"}, {"intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "snippet": "calendar.LocaleTextCalendar()"}, {"intent": "Return some locale-specific information as a string . With arguments `option`.", "snippet": "locale.nl_langinfo(option)"}, {"intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "snippet": "base_http_request_handler.rfile"}, {"intent": "Read until one from a `list` of a regular expressions matches .", "snippet": "Telnet.expect(list)"}, {"intent": "Returns the textual representation of logging `level` level .", "snippet": "logging.getLevelName(level)"}, {"intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "snippet": "message.items()"}, {"intent": "Concrete class for urlsplit ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "snippet": "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)"}, {"intent": "Remove any deletion marks for the mailbox .", "snippet": "POP3.rset()"}, {"intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "snippet": "mh.pack()"}, {"intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "snippet": "operator.truediv(a, b)"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)"}, {"intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "snippet": "enumerate(iterable)"}, {"intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "snippet": "sys.intern(string)"}, {"intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "snippet": "config_parser.items()"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stdout=None)"}, {"intent": "A human readable string of the verification error.", "snippet": "row.verify_message"}, {"intent": "Dictionary mapping filename extensions to encoding types.", "snippet": "mimetypes.encodings_map"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `tearDown` specifies a tear-down function for the test suite . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, tearDown=None)"}, {"intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "snippet": "_thread.start_new_thread(function, args)"}, {"intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "snippet": "text_wrapper.fix_sentence_endings"}, {"intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "snippet": "time.perf_counter()"}, {"intent": "Stop the event loop .", "snippet": "loop.stop()"}, {"intent": "Create a new SSL context . You may pass `protocol` which must be one of the PROTOCOL_* constants defined in this module .", "snippet": "ssl.SSLContext(protocol=PROTOCOL_TLS)"}, {"intent": "Extends this array with data from the given unicode string . With arguments `s`.", "snippet": "array.fromunicode(s)"}, {"intent": "Set the doctest reporting `flags` to use .", "snippet": "doctest.set_unittest_reportflags(flags)"}, {"intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "snippet": "pool.map(func, iterable, chunksize)"}, {"intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "snippet": "importlib.import_module(name)"}, {"intent": "Return True if d has a key key, else False.", "snippet": "key in d"}, {"intent": "An alias for SSLCertVerificationError.", "snippet": "ssl.CertificateError"}, {"intent": "Operation already in progress", "snippet": "errno.EALREADY"}, {"intent": "Called after the `test` case test has been executed , regardless of the outcome .", "snippet": "test_result.stopTest(test)"}, {"intent": "Returns true if the given integrity `check` is supported on this system .", "snippet": "lzma.is_check_supported(check)"}, {"intent": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "snippet": "xmlparser.ordered_attributes"}, {"intent": "For use with BTPROTO_HCI.", "snippet": "socket.HCI_FILTER"}, {"intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "snippet": "asyncio.Lock(loop=None)"}, {"intent": "Prevent client side from requesting a session ticket.", "snippet": "ssl.OP_NO_TICKET"}, {"intent": "Return true if the `object` is a traceback .", "snippet": "inspect.istraceback(object)"}, {"intent": "Return true if the `object` is an asynchronous generator function , for example :", "snippet": "inspect.isasyncgenfunction(object)"}, {"intent": "Print the byte string `char` to the console without buffering .", "snippet": "msvcrt.putch(char)"}, {"intent": "Try again", "snippet": "errno.EAGAIN"}, {"intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "snippet": "oss_audio_device.mode"}, {"intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "snippet": "widget.set(item, column=None)"}, {"intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "snippet": "str.isnumeric()"}, {"intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "snippet": "inspect.trace()"}, {"intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "snippet": "date.isoformat()"}, {"intent": "An object with at least two methods: get_content and set_content.", "snippet": "email_policy.content_manager"}, {"intent": "Return a JSON string representation of a Python data structure , `o` .", "snippet": "json_encoder.encode(o)"}, {"intent": "Remove any common leading whitespace from every line in `text` .", "snippet": "textwrap.dedent(text)"}, {"intent": "Add items to the selection . With arguments `*items`.", "snippet": "widget.selection_add(*items)"}, {"intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "snippet": "widget.detach(*items)"}, {"intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "snippet": "code.InteractiveInterpreter(locals=None)"}, {"intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "snippet": "env_builder.setup_python(context)"}, {"intent": "Process and return data already in the queues ( lazy ) .", "snippet": "Telnet.read_lazy()"}, {"intent": "Return True if the context has a value for var set; return False otherwise.", "snippet": "var in context"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), release='')"}, {"intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "snippet": "calendar.monthcalendar(year, month)"}, {"intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "snippet": "tracemalloc.start(nframe: int=1)"}, {"intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "snippet": "weakref.WeakMethod(method)"}, {"intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "snippet": "urllib.parse.urldefrag(url)"}, {"intent": "Out of memory", "snippet": "errno.ENOMEM"}, {"intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data .", "snippet": "xml.etree.ElementTree.parse(source)"}, {"intent": "Return `x` factorial as an integer .", "snippet": "math.factorial(x)"}, {"intent": "Flush the mailbox , unlock it if necessary , and close any open files .", "snippet": "mailbox.close()"}, {"intent": "This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server.", "snippet": "smtplib.SMTPServerDisconnected"}, {"intent": "Returns the value specified for `option` in `style` .", "snippet": "style.lookup(style, option)"}, {"intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set .", "snippet": "email.charset.add_charset(charset)"}, {"intent": "A device-driver resource list.", "snippet": "winreg.REG_RESOURCE_LIST"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "snippet": "base64.a85encode(b, pad=False)"}, {"intent": "Set the `method` which should be used to start child processes .", "snippet": "multiprocessing.set_start_method(method)"}, {"intent": "The standard input device.", "snippet": "subprocess.STD_INPUT_HANDLE"}, {"intent": "The request is mapped to a local file by interpreting the request as a path relative to the current working directory .", "snippet": "simple_http_request_handler.do_GET()"}, {"intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`.", "snippet": "configparser.RawConfigParser(':'), ';'))"}, {"intent": "Select a `mailbox` .", "snippet": "IMAP4.select()"}, {"intent": "Use this at the end of test_main whenever sub-processes are started .", "snippet": "test.support.reap_children()"}, {"intent": "Locale category for message display.", "snippet": "locale.LC_MESSAGES"}, {"intent": "Set or return the current shearfactor . Shear the turtleshape according to the given shearfactor `shear` , which is the tangent of the shear angle .", "snippet": "turtle.shearfactor(shear=None)"}, {"intent": "Pdb is the debugger class .", "snippet": "pdb.Pdb()"}, {"intent": "Return a new instance of the FTP class . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "snippet": "ftplib.FTP(source_address=None)"}, {"intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "snippet": "sequence_matcher.ratio()"}, {"intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object . With arguments `headersonly`.", "snippet": "parser.parse(fp, headersonly=False)"}, {"intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "snippet": "pdb.Pdb(nosigint=False)"}, {"intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "snippet": "ctypes.create_string_buffer(init_or_size)"}, {"intent": "Close the connection .", "snippet": "joinable_queue.close()"}, {"intent": "Instances of FileCookieJar raise this exception on failure to load cookies from a file.", "snippet": "http.cookiejar.LoadError"}, {"intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "snippet": "email_message.iter_attachments()"}, {"intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "snippet": "UnboundLocalError"}, {"intent": "Create and return a SAX XMLReader object . If `parser_list` is provided , it must be a list of strings which name modules that have a function named create_parser ( ) .", "snippet": "xml.sax.make_parser(parser_list=)"}, {"intent": "Merge in data from another CoverageResults object . With arguments `other`.", "snippet": "coverage_results.update(other)"}, {"intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "snippet": "timeit.Timer(stmt='pass')"}, {"intent": "Subclass of ValueError for statistics-related exceptions.", "snippet": "statistics.StatisticsError"}, {"intent": "Set the size and position of the main window . With arguments `width`.", "snippet": "turtle.setup(width=_CFG\"width\")"}, {"intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "snippet": "fcntl.flock(fd, operation)"}, {"intent": "Add a `callback` to be run when the Task is done . With arguments `context`.", "snippet": "task.add_done_callback(callback, context=None)"}, {"intent": "Read data from the stream until `separator` is found .", "snippet": "stream_reader.readuntil()"}, {"intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "snippet": "xml.dom.XML_NAMESPACE"}, {"intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`.", "snippet": "logging.handlers.BaseRotatingHandler(filename, mode)"}, {"intent": "Helper to print a traceback from the timed code .", "snippet": "timer.print_exc()"}, {"intent": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.", "snippet": "reprlib.Repr"}, {"intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` . If `value` is None , it defaults to name .", "snippet": "radio_button_group.add(name, x, y, width, height, text, value=None)"}, {"intent": "Get the event loop for the current context .", "snippet": "abstract_event_loop_policy.get_event_loop()"}, {"intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "snippet": "random.betavariate(alpha, beta)"}, {"intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "snippet": "audioop.max(fragment, width)"}, {"intent": "Get the current coroutine origin tracking depth , as set by set_coroutine_origin_tracking_depth ( ) .", "snippet": "sys.get_coroutine_origin_tracking_depth()"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "snippet": "header.encode(\\t', splitchars=';, linesep='\\n')"}, {"intent": "Elements which are declared to be EMPTY have this model type.", "snippet": "xml.parsers.expat.model.XML_CTYPE_EMPTY"}, {"intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "snippet": "min(arg1, arg2, *args)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)"}, {"intent": "Prevent join_thread ( ) from blocking .", "snippet": "queue.cancel_join_thread()"}, {"intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "snippet": "enumerate(iterable, start=0)"}, {"intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "snippet": "somenamedtuple._make(iterable)"}, {"intent": "Set the virtual screen cursor to `y` , `x` .", "snippet": "curses.setsyx(y, x)"}, {"intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "snippet": "inspect.getouterframes(frame, context=1)"}, {"intent": "Remove `label` from the list of labels on the message .", "snippet": "babyl_message.remove_label(label)"}, {"intent": "Returns an opened , file-like object for binary reading of the `resource` .", "snippet": "resource_reader.open_resource(resource)"}, {"intent": "System-wide real-time clock.", "snippet": "time.CLOCK_REALTIME"}, {"intent": "The major version number as an integer", "snippet": "mime_version_header.major"}, {"intent": "Get the byte stream for this input source .", "snippet": "InputSource.getByteStream()"}, {"intent": "Send NOOP to server .", "snippet": "IMAP4.noop()"}, {"intent": "The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1.1.8).", "snippet": "xml.dom.XMLNS_NAMESPACE"}, {"intent": "One more than the number of the highest signal number.", "snippet": "signal.NSIG"}, {"intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "snippet": "joinable_queue.send_bytes(buffer, offset, size)"}, {"intent": "Mark the breakpoint as enabled .", "snippet": "breakpoint.enable()"}, {"intent": "Read all lines available on the input stream and return them as a list of lines .", "snippet": "stream_reader.readlines()"}, {"intent": "Set the current process-wide `policy` to policy .", "snippet": "asyncio.set_event_loop_policy(policy)"}, {"intent": "Set up secure data connection .", "snippet": "FTP_TLS.prot_p()"}, {"intent": "Return the current exception handler , or None if no custom exception handler was set .", "snippet": "loop.get_exception_handler()"}, {"intent": "Under Windows, this gives you the native Windows error code.", "snippet": "auto.winerror"}, {"intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "snippet": "shutil.copystat(src, dst, follow_symlinks=True)"}, {"intent": "Change the encoding used to return translated messages . With arguments `charset`.", "snippet": "null_translations.set_output_charset(charset)"}, {"intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "snippet": "str.endswith(suffix, start)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "snippet": "TarFile.extract(member, path=\"\")"}, {"intent": "Round away from zero.", "snippet": "decimal.ROUND_UP"}, {"intent": "The number of capturing groups in the pattern.", "snippet": "Pattern.groups"}, {"intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "snippet": "complex(real, imag)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "snippet": "difflib.context_diff(a, b, n=3)"}, {"intent": "Buffer size in bytes for sending a file-like message body.", "snippet": "HTTPConnection.blocksize"}, {"intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package .", "snippet": "pyclbr.readmodule(module)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "snippet": "faulthandler.dump_traceback_later(timeout, exit=False)"}, {"intent": "No route to host", "snippet": "errno.EHOSTUNREACH"}, {"intent": "Set the frame rate to `n` .", "snippet": "Wave_write.setframerate(n)"}, {"intent": "The protocol version chosen when constructing the context.", "snippet": "SSLContext.protocol"}, {"intent": "Run `code` in subinterpreter .", "snippet": "test.support.run_in_subinterp(code)"}, {"intent": "Adds text to the current element . `data` is a string .", "snippet": "tree_builder.data(data)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, w=2)"}, {"intent": "Flag showing the status of the user site-packages directory.", "snippet": "site.ENABLE_USER_SITE"}, {"intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "snippet": "turtle.clearstamps()"}, {"intent": "Load cookies from a file .", "snippet": "FileCookieJar.load()"}, {"intent": "Machine is not on the network", "snippet": "errno.ENONET"}, {"intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "snippet": "timer.repeat(repeat=5, number=1000000)"}, {"intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "snippet": "str.encode(encoding=\"utf-8\")"}, {"intent": "Returns True if `x` is infinite ; otherwise returns False .", "snippet": "context.is_infinite(x)"}, {"intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "snippet": "gc.freeze()"}, {"intent": "A dictionary or other mapping object used to store an object\u2019s (writable) attributes.", "snippet": "object.__dict__"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)"}, {"intent": "Wait until notified .", "snippet": "condition.wait()"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "snippet": "cmd.Cmd(completekey='tab')"}, {"intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "snippet": "raw_io_base.write(b)"}, {"intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)"}, {"intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "snippet": "cgitb.handler()"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None, offset=None)"}, {"intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "snippet": "curses.use_env(flag)"}, {"intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "snippet": "date.isocalendar()"}, {"intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "snippet": "Path.home()"}, {"intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "snippet": "_c_data.in_dll(library, name)"}, {"intent": "Callable object that constructs a test suite from a list of tests.", "snippet": "test_loader.suiteClass"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "snippet": "datetime.datetime(year, month, day, second=0)"}, {"intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "snippet": "socket.recvfrom_into(buffer)"}, {"intent": "Return the real group id of the current process .", "snippet": "os.getgid()"}, {"intent": "Return true for terminal token values . With arguments `x`.", "snippet": "token.ISTERMINAL(x)"}, {"intent": "An abstract base class representing a finder.", "snippet": "importlib.abc.Finder"}, {"intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "snippet": "base_manager.start(initializer)"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "snippet": "zipfile.PyZipFile(file)"}, {"intent": "The maximum size the value of an extended attribute can be.", "snippet": "os.XATTR_SIZE_MAX"}, {"intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "snippet": "asyncio.wrap_future(future)"}, {"intent": "The default format for creating archives.", "snippet": "tarfile.DEFAULT_FORMAT"}, {"intent": "Return an iterator over elements repeating each as many times as its count .", "snippet": "counter.elements()"}, {"intent": "This exception collects exceptions that are raised during a multi-file operation.", "snippet": "shutil.Error"}, {"intent": "Put `item` into the queue .", "snippet": "simple_queue.put(item)"}, {"intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "snippet": "decimal.Context(prec=None)"}, {"intent": "Decode the path-like `filename` from the filesystem encoding with 'surrogateescape ' error handler , or 'strict ' on Windows ; return str unchanged .", "snippet": "os.fsdecode(filename)"}, {"intent": "Add a `spec` to a mock .", "snippet": "mock.mock_add_spec(spec)"}, {"intent": "(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output.", "snippet": "text_wrapper.max_lines"}, {"intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "snippet": "turtle.dot(*color)"}, {"intent": "A namespace of a class.", "snippet": "symtable.Class"}, {"intent": "Determine if the formatted representation of `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "snippet": "pprint.isreadable(object)"}, {"intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "snippet": "binascii.b2a_base64(data)"}, {"intent": "Return a list of all available group entries , in arbitrary order .", "snippet": "grp.getgrall()"}, {"intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "snippet": "turtle.speed()"}, {"intent": "Byte-compile all the .py files found along sys.path .", "snippet": "compileall.compile_path()"}, {"intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "snippet": "coverage_results.write_results(summary=False)"}, {"intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "snippet": "asyncio.Queue(loop=None)"}, {"intent": "Join a `thread` within `timeout` .", "snippet": "test.support.join_thread(thread)"}, {"intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "snippet": "env_builder.create(env_dir)"}, {"intent": "Return the output speed of the terminal in bits per second .", "snippet": "curses.baudrate()"}, {"intent": "Read one line , where \u201c line \u201d is a sequence of bytes ending with \\n .", "snippet": "stream_reader.readline()"}, {"intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "snippet": "SubprocessTransport.send_signal(signal)"}, {"intent": "Create a Unix connection . With arguments `protocol_factory`.", "snippet": "loop.create_unix_connection(protocol_factory)"}, {"intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "snippet": "hashlib.algorithms_available"}, {"intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "snippet": "asyncio.as_completed(aws, loop=None)"}, {"intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "snippet": "DefaultCookiePolicy.strict_ns_unverifiable"}, {"intent": "Return a new set with elements in the set that are not in the others.", "snippet": "set - other - ..."}, {"intent": "Without arguments , return the list of names in the current local scope .", "snippet": "dir()"}, {"intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "snippet": "time.tzname"}, {"intent": "Return True if the file system for `directory` is case-insensitive .", "snippet": "test.support.fs_is_case_insensitive(directory)"}, {"intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "snippet": "ordered_dict.move_to_end(key, last=True)"}, {"intent": "Log in as the given `user` .", "snippet": "FTP.login()"}, {"intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "snippet": "aifc.setframerate(rate)"}, {"intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.LZMAFile(format=None)"}, {"intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . `fallback` set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call ( e.g .", "snippet": "loop.sendfile(transport, file, offset=0, fallback=True)"}, {"intent": "Do not wait for data which is not immediately available.", "snippet": "os.RWF_NOWAIT"}, {"intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "snippet": "test_case.run()"}, {"intent": "Return True if the transport is receiving new data .", "snippet": "ReadTransport.is_reading()"}, {"intent": "Count the number of deque elements equal to `x` .", "snippet": "deque.count(x)"}, {"intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "snippet": "audioop.avg(fragment, width)"}, {"intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "snippet": "cgi.print_environ_usage()"}, {"intent": "Read all data until EOF as bytes ; block until connection closed .", "snippet": "Telnet.read_all()"}, {"intent": "Return True if the argument is a ( positive or negative ) zero and False otherwise .", "snippet": "decimal.is_zero()"}, {"intent": "Returns a Python integer with `k` random bits .", "snippet": "random.getrandbits(k)"}, {"intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "snippet": "element_tree.parse(source)"}, {"intent": "Removes the specified `filter` filter from this logger .", "snippet": "queue_listener.removeFilter(filter)"}, {"intent": "No such file or directory", "snippet": "errno.ENOENT"}, {"intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "snippet": "curses.curs_set(visibility)"}, {"intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data .", "snippet": "zlib.compress(data)"}, {"intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "snippet": "Path.write_text(data)"}, {"intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "snippet": "http_handler.emit(record)"}, {"intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . With arguments `func`.", "snippet": "pool.map(func, iterable)"}, {"intent": "Remove `sequence` from the list of sequences that include this message .", "snippet": "mh_message.remove_sequence(sequence)"}, {"intent": "Start a TLS session on the active connection as specified in RFC 2595 .", "snippet": "POP3.stls()"}, {"intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "snippet": "test.support.script_helper.kill_python(p)"}, {"intent": "Name not unique on network", "snippet": "errno.ENOTUNIQ"}, {"intent": "Load MIME type information from an open file `fp` .", "snippet": "mime_types.readfp(fp)"}, {"intent": "Too many open files", "snippet": "errno.EMFILE"}, {"intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "snippet": "Record.GetFieldCount()"}, {"intent": "Install the control-c handler .", "snippet": "unittest.installHandler()"}, {"intent": "RFC 5322 specifies a very specific format for dates within email headers.", "snippet": "email.headerregistry.DateHeader"}, {"intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "snippet": "babyl_message.set_visible(visible)"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object . The `dict_type` is the type used for dictionaries that are read from the plist file .", "snippet": "plistlib.load(fp, dict_type=dict)"}, {"intent": "Address space of a memory block (int or None).", "snippet": "filter.domain"}, {"intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "snippet": "signature.replace(parameters, return_annotation)"}, {"intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "snippet": "time.CLOCK_MONOTONIC"}, {"intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "snippet": "shutil.register_unpack_format(name, extensions, function)"}, {"intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "snippet": "dict.update(other)"}, {"intent": "The index after the last invalid data in object.", "snippet": "auto.end"}, {"intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "snippet": "widget.parent(item)"}, {"intent": "Wake up all tasks waiting on this condition .", "snippet": "condition.notify_all()"}, {"intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "snippet": "str.lower()"}, {"intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "snippet": "ArgumentParser.get_default(dest)"}, {"intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "snippet": "itertools.groupby(iterable, key=None)"}, {"intent": "Assign a ctypes type to specify the result type of the foreign function.", "snippet": "_func_ptr.restype"}, {"intent": "Returns a date string as per RFC 2822 , e.g .", "snippet": "email.utils.formatdate()"}, {"intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "snippet": "null_translations.install()"}, {"intent": "A Popen creationflags parameter to specify that a new process will not create a window.", "snippet": "subprocess.CREATE_NO_WINDOW"}, {"intent": "Return a duplicate of the context .", "snippet": "context.copy()"}, {"intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "snippet": "filecmp.dircmp(a, b, hide=None)"}, {"intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "snippet": "context_var.reset(token)"}, {"intent": "Do not interrupt sounds currently playing.", "snippet": "winsound.SND_NOSTOP"}, {"intent": "A `message` with Maildir-specific behaviors .", "snippet": "mailbox.MaildirMessage()"}, {"intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "snippet": "bdb.checkfuncname(b, frame)"}, {"intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "snippet": "del d[key]"}, {"intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "snippet": "filecmp.dircmp(a, b)"}, {"intent": "A dictionary mapping suffixes into MIME types.", "snippet": "simple_http_request_handler.extensions_map"}, {"intent": "Return the \u201c login name \u201d of the user .", "snippet": "getpass.getuser()"}, {"intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "snippet": "@test.support.refcount_test(test)"}, {"intent": "Delete the line under the cursor .", "snippet": "window.deleteln()"}, {"intent": "Exception raised when an unexpected reply is received from the server.", "snippet": "ftplib.error_reply"}, {"intent": "Attempting to link in too many shared libraries", "snippet": "errno.ELIBMAX"}, {"intent": "The version string of the zlib library that was used for building the module.", "snippet": "zlib.ZLIB_VERSION"}, {"intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block . When invoked with a `timeout` other than None , it will block for at most timeout seconds .", "snippet": "semaphore.acquire(blocking=True, timeout=None)"}, {"intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "snippet": "ast.dump(node, annotate_fields=True)"}, {"intent": "A base class that enables a context manager to also be used as a decorator.", "snippet": "contextlib.ContextDecorator"}, {"intent": "A sequence defining the structure fields.", "snippet": "structure._fields_"}, {"intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "snippet": "null_translations.info()"}, {"intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "snippet": "AU_read.getnchannels()"}, {"intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "snippet": "os.WIFEXITED(status)"}, {"intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "snippet": "formatter.end_paragraph(blanklines)"}, {"intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "snippet": "string.punctuation"}, {"intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "snippet": "date.ctime()"}, {"intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "snippet": "html.escape(s, quote=True)"}, {"intent": "Time of last access.", "snippet": "stat.ST_ATIME"}, {"intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "snippet": "dict.pop(key, default)"}, {"intent": "Replace an existing node with a new node . It must be the case that `oldChild` is a child of this node ; if not , ValueError is raised . With arguments `newChild`.", "snippet": "Node.replaceChild(newChild, oldChild)"}, {"intent": "Difference of total size of memory blocks in bytes between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot.", "snippet": "statistic_diff.size_diff"}, {"intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "snippet": "bytes(source, encoding)"}, {"intent": "Returns None as extension modules lack a code object . With arguments `fullname`.", "snippet": "extension_file_loader.get_code(fullname)"}, {"intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument indicates whether two \u2019 s complement is used to represent the integer .", "snippet": "int.from_bytes(bytes, byteorder, signed=False)"}, {"intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "snippet": "turtle.Vec2D(x, y)"}, {"intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "snippet": "email.utils.collapse_rfc2231_value(value)"}, {"intent": "Is raised when a tar archive is opened, that either cannot be handled by the tarfile module or is somehow invalid.", "snippet": "tarfile.ReadError"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "snippet": "message.get_param(param, unquote=True)"}, {"intent": "File generation number.", "snippet": "stat_result.st_gen"}, {"intent": "Delete all breakpoints in `filename` .", "snippet": "bdb.clear_all_file_breaks(filename)"}, {"intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "snippet": "os.nice(increment)"}, {"intent": "Called when there is out of band ( OOB ) data for a socket connection .", "snippet": "dispatcher.handle_expt()"}, {"intent": "Return a bytes array convertible to a human-readable description of the type of compression used in the audio file .", "snippet": "aifc.getcompname()"}, {"intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "snippet": "IMAP4.login_cram_md5(user, password)"}, {"intent": "Allow simple extension commands notified by server in CAPABILITY response .", "snippet": "IMAP4.xatom()"}, {"intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "snippet": "Pattern.match(string)"}, {"intent": "Prevents any more tasks from being submitted to the pool .", "snippet": "pool.close()"}, {"intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "snippet": "text_calendar.prmonth(theyear, themonth, l=0)"}, {"intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "snippet": "socket.ntohl(x)"}, {"intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "snippet": "UUID.bytes"}, {"intent": "Return true if the `object` is a built-in function or a bound built-in method .", "snippet": "inspect.isbuiltin(object)"}, {"intent": "Create a new module based on `spec` and spec.loader.create_module .", "snippet": "importlib.util.module_from_spec(spec)"}, {"intent": "The URI or URL that triggered the error.", "snippet": "protocol_error.url"}, {"intent": "Return a controller object for the browser type `using` .", "snippet": "webbrowser.get()"}, {"intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "snippet": "os.makedirs(name, mode=0o777, exist_ok=False)"}, {"intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "snippet": "json.JSONDecoder(parse_float=None)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.SMTP_SSL(timeout)"}, {"intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"}, {"intent": "Files and subdirectories in a, filtered by hide and ignore.", "snippet": "dircmp.left_list"}, {"intent": "It is a simplified Queue type, very close to a locked Pipe.", "snippet": "multiprocessing.SimpleQueue"}, {"intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "snippet": "os.chown(path, uid, gid)"}, {"intent": "A combination of a date and a time.", "snippet": "datetime.datetime"}, {"intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "snippet": "urllib.error.ContentTooShortError(msg, content)"}, {"intent": "Indicates that rounding occurred and the result is not exact.", "snippet": "decimal.Inexact"}, {"intent": "Return the number of variables set in the context object . With arguments `proxy`.", "snippet": "len(proxy)"}, {"intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "snippet": "prototype(callable)"}, {"intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "snippet": "mime_types.guess_extension(type)"}, {"intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "snippet": "unicodedata.combining(chr)"}, {"intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "snippet": "ast.increment_lineno(node)"}, {"intent": "Round to nearest with ties going to nearest even integer.", "snippet": "decimal.ROUND_HALF_EVEN"}, {"intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)"}, {"intent": "Write a byte string to the socket , doubling any IAC characters . With arguments `buffer`.", "snippet": "Telnet.write(buffer)"}, {"intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "snippet": "csvwriter.writerow(row)"}, {"intent": "Return the current write position in the output file .", "snippet": "aifc.tell()"}, {"intent": "Required to create, delete, or set a registry value.", "snippet": "winreg.KEY_SET_VALUE"}, {"intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "snippet": "itertools.compress(data, selectors)"}, {"intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "snippet": "_func_ptr.argtypes"}, {"intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "snippet": "SubprocessProtocol.pipe_data_received(fd, data)"}, {"intent": "Return the digest of the data passed to the update ( ) method so far .", "snippet": "hash.digest()"}, {"intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)"}, {"intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "snippet": "@test.support.run_with_tz(tz)"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "snippet": "__import__(name, level=0)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "snippet": "datetime.replace(day=self.day)"}, {"intent": "An HTTP status code as defined in RFC 2616.", "snippet": "non_callable_magic_mock.code"}, {"intent": "If False, follow RFC 5322, supporting non-ASCII characters in headers by encoding them as \u201cencoded words\u201d.", "snippet": "email_policy.utf8"}, {"intent": "An abstract base class representing a meta path finder.", "snippet": "importlib.abc.MetaPathFinder"}, {"intent": "A hardware setting.", "snippet": "winreg.REG_FULL_RESOURCE_DESCRIPTOR"}, {"intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "snippet": "mock.assert_called_with(*args, **kwargs)"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "snippet": "shelve.Shelf(dict, protocol=None)"}, {"intent": "Toplevel widget of Tix which represents mostly the main window of an application .", "snippet": "tkinter.tix.Tk()"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . With arguments `is_safe`.", "snippet": "uuid.UUID(is_safe=SafeUUID.unknown)"}, {"intent": "The false value of the bool type.", "snippet": "False"}, {"intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "snippet": "property(fdel=None)"}, {"intent": "Returns the smallest representable number larger than `x` .", "snippet": "context.next_plus(x)"}, {"intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "snippet": "asyncio.Semaphore(value=1, loop=None)"}, {"intent": "Return a string with information about a stack entry , identified by a ( frame , lineno ) tuple : With arguments `frame_lineno`.", "snippet": "bdb.format_stack_entry(frame_lineno)"}, {"intent": "Process an input `source` , producing SAX events .", "snippet": "XMLReader.parse(source)"}, {"intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "snippet": "xml.sax.parse(filename_or_stream, handler)"}, {"intent": "The same as the ellipsis literal \u201c...\u201d.", "snippet": "Ellipsis"}, {"intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If not specified , and `filename` is specified , add the header with the value attachment . With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, filename=None)"}, {"intent": "Set or return the desired number of lines to save in the history file .", "snippet": "readline.get_history_length()"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "snippet": "compileall.compile_dir(dir, workers=1)"}, {"intent": "Set the current directory on the server . With arguments `pathname`.", "snippet": "FTP.cwd(pathname)"}, {"intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "snippet": "readline.redisplay()"}, {"intent": "Time of most recent access expressed in seconds.", "snippet": "stat_result.st_atime"}, {"intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "snippet": "control.condition(action, condition)"}, {"intent": "Remove the archive format `name` from the list of supported formats .", "snippet": "shutil.unregister_archive_format(name)"}, {"intent": "Return atan ( `y` / `x` ) , in radians .", "snippet": "math.atan2(y, x)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "snippet": "window.insstr(y, x, str)"}, {"intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "snippet": "time.clock_settime(clk_id, time: float)"}, {"intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "snippet": "unittest.TestCase(methodName='runTest')"}, {"intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "snippet": "inspect_loader.source_to_code(data, path='<string>')"}, {"intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "snippet": "Option.help"}, {"intent": "Return the number of CPUs in the system .", "snippet": "multiprocessing.cpu_count()"}, {"intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "snippet": "re.M"}, {"intent": "Return the bitwise and of `a` and `b` .", "snippet": "operator.and_(a, b)"}, {"intent": "Raised when the result of an arithmetic operation is too large to be represented.", "snippet": "OverflowError"}, {"intent": "Parse a `string` representing a time according to a `format` .", "snippet": "time.strptime(string, format)"}, {"intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "snippet": "widget.bbox(item, column=None)"}, {"intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "snippet": "xmlparser.ElementDeclHandler(name, model)"}, {"intent": "Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages.", "snippet": "mailbox.NotEmptyError"}, {"intent": "Set the list of `labels` on the message to labels .", "snippet": "babyl_message.set_labels(labels)"}, {"intent": "The pattern string from which the pattern object was compiled.", "snippet": "Pattern.pattern"}, {"intent": "The value of pos which was passed to the search() or match() method of a regex object.", "snippet": "Match.pos"}, {"intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "snippet": "sndhdr.whathdr(filename)"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "snippet": "warnings.warn(message, stacklevel=1)"}, {"intent": "This routine loads a SQLite extension from a shared library . With arguments `path`.", "snippet": "connection.load_extension(path)"}, {"intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "snippet": "xml.dom.pulldom.parseString(string, parser=None)"}, {"intent": "A list of strings representing the recognized file suffixes for source modules.", "snippet": "importlib.machinery.SOURCE_SUFFIXES"}, {"intent": "Return a tuple containing the names of methods declared in the class .", "snippet": "class.get_methods()"}, {"intent": "Interface used by the parser to present error and warning messages to the application.", "snippet": "xml.sax.handler.ErrorHandler"}, {"intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "snippet": "memoryview.shape"}, {"intent": "Special value which should be returned by the binary special methods (e.g.", "snippet": "NotImplemented"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "snippet": "zipfile.PyZipFile(file, optimize=-1)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, module_relative=True)"}, {"intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "snippet": "html_calendar.formatyear(theyear, width=3)"}, {"intent": "Called if the XML document hasn \u2019 t been declared as being a standalone document .", "snippet": "xmlparser.NotStandaloneHandler()"}, {"intent": "Returns a list of windows managed by the notebook .", "snippet": "widget.tabs()"}, {"intent": "Starts the listener .", "snippet": "queue_listener.start()"}, {"intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')"}, {"intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that the special file os.devnull will be used.", "snippet": "subprocess.DEVNULL"}, {"intent": "Match `test` to patterns set in set_match_tests ( ) .", "snippet": "test.support.match_test(test)"}, {"intent": "Math result not representable", "snippet": "errno.ERANGE"}, {"intent": "Whether the server will allow the reuse of an address.", "snippet": "base_server.allow_reuse_address"}, {"intent": "Convert the array to an ordinary list with the same items .", "snippet": "array.tolist()"}, {"intent": "You can override this to implement custom flushing behavior .", "snippet": "buffering_handler.flush()"}, {"intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "snippet": "email.utils.parsedate_to_datetime(date)"}, {"intent": "Return the value of `field` as an integer where possible .", "snippet": "Record.GetInteger(field)"}, {"intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "snippet": "parser.parsestr(text)"}, {"intent": "Duplicate the socket .", "snippet": "socket.dup()"}, {"intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "snippet": "str.isalnum()"}, {"intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "snippet": "xmlparser.DefaultHandlerExpand(data)"}, {"intent": "Return the value for `key` if key is in the dictionary , else `default` .", "snippet": "dict.get(key, default)"}, {"intent": "Expat was not able to allocate memory internally.", "snippet": "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, width=3)"}, {"intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "snippet": "nt_event_log_handler.close()"}, {"intent": "Compress `data` , a bytes-like object .", "snippet": "bz2.compress(data)"}, {"intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "snippet": "dict(mapping, **kwarg)"}, {"intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "snippet": "tkinter.tix.DirSelectDialog"}, {"intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "snippet": "FTP.storbinary(cmd, fp)"}, {"intent": "When setting cookies, the \u2018host prefix\u2019 must not contain a dot (eg.", "snippet": "DefaultCookiePolicy.DomainStrictNoDots"}, {"intent": "Constants for Linux host/guest communication.", "snippet": "socket.AF_VSOCK"}, {"intent": "A writer which only provides the interface definition; no actions are taken on any methods.", "snippet": "formatter.NullWriter"}, {"intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "snippet": "re.subn(pattern, repl, string)"}, {"intent": "nbytes == product(shape) * itemsize == len(m.tobytes()).", "snippet": "memoryview.nbytes"}, {"intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "snippet": "os.terminal_size"}, {"intent": "Tests that two sets are equal . Fails if either of `first` or `second` does not have a set.difference ( ) method .", "snippet": "test_case.assertSetEqual(first, second)"}, {"intent": "Depending upon the host platform , it may not be possible to remove the underlying message while the returned file remains open . With arguments `key`.", "snippet": "mh.get_file(key)"}, {"intent": "Enable TLS 1.3 post-handshake client authentication.", "snippet": "SSLContext.post_handshake_auth"}, {"intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "snippet": "range(stop)"}, {"intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "snippet": "locale.format_string(format, val)"}, {"intent": "Path to the extension module.", "snippet": "extension_file_loader.path"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "snippet": "warnings.simplefilter(action)"}, {"intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "snippet": "FTP.ntransfercmd(cmd)"}, {"intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "snippet": "contextlib.ExitStack"}, {"intent": "A Condition object .", "snippet": "asyncio.Condition()"}, {"intent": "Exception raised when a curses library function returns an error.", "snippet": "curses.error"}, {"intent": "Return the default timeout in seconds ( float ) for new socket objects .", "snippet": "socket.getdefaulttimeout()"}, {"intent": "Feed the parser some more `data` .", "snippet": "bytes_feed_parser.feed(data)"}, {"intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "snippet": "urllib.request.url2pathname(path)"}, {"intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "snippet": "codecs.open(filename)"}, {"intent": "Insert a horizontal rule in the output . With arguments `*args`, `**kw`.", "snippet": "formatter.add_hor_rule(*args, **kw)"}, {"intent": "Append items from `iterable` to the end of the array .", "snippet": "array.extend(iterable)"}, {"intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "snippet": "os.link(src, dst, follow_symlinks=True)"}, {"intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)"}, {"intent": "Run doctest.testmod ( ) on the given `module` .", "snippet": "test.support.run_doctest(module)"}, {"intent": "Return a frame object from the call stack .", "snippet": "sys._getframe()"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "snippet": "text_calendar.formatyear(theyear, m=3)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)"}, {"intent": "Return a ctypes object allocated from shared memory which is a copy of the ctypes object `obj` .", "snippet": "multiprocessing.sharedctypes.copy(obj)"}, {"intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "snippet": "window.resize(nlines, ncols)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "snippet": "subprocess.Popen(args, executable=None)"}, {"intent": "Transforms a `string` to one that can be used in locale-aware comparisons .", "snippet": "locale.strxfrm(string)"}, {"intent": "Returns an iterator to dump the database in an SQL text format .", "snippet": "connection.iterdump()"}, {"intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "snippet": "InteractiveConsole.interact(banner=None)"}, {"intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "snippet": "element.iter(tag=None)"}, {"intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "snippet": "message.get_payload(i=None)"}, {"intent": "This class builds on the TCPServer class by storing the server address as instance variables named server_name and server_port . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "http.server.HTTPServer(server_address, RequestHandlerClass)"}, {"intent": "Calling this during a test method or setUp ( ) skips the current test . With arguments `reason`.", "snippet": "test_case.skipTest(reason)"}, {"intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "snippet": "counter.update()"}, {"intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "snippet": "os.forkpty()"}, {"intent": "Update the hmac object with `msg` .", "snippet": "HMAC.update(msg)"}, {"intent": "format_field ( ) simply calls the global format ( ) built-in . With arguments `value`, `format_spec`.", "snippet": "formatter.format_field(value, format_spec)"}, {"intent": "Create script containing `source` in path `script_dir` and `script_basename` .", "snippet": "test.support.script_helper.make_script(script_dir, script_basename, source)"}, {"intent": "A string representation of the network, with the mask in prefix notation.", "snippet": "i_pv4_network.exploded"}, {"intent": "Convert to a string , using engineering notation if an exponent is needed .", "snippet": "decimal.to_eng_string()"}, {"intent": "Register a `function` that can respond to XML-RPC requests .", "snippet": "SimpleXMLRPCServer.register_function()"}, {"intent": "The traditional method with a 2 character salt and 13 characters of hash.", "snippet": "crypt.METHOD_CRYPT"}, {"intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "snippet": "property(fset=None)"}, {"intent": "Do nothing by default . If persistent_id ( ) returns None , `obj` is pickled as usual .", "snippet": "pickler.persistent_id(obj)"}, {"intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "snippet": "email.message_from_string(s)"}, {"intent": "The process\u2019s authentication key (a byte string).", "snippet": "process.authkey"}, {"intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "snippet": "HTTPErrorProcessor.http_response(request, response)"}, {"intent": "Return `obj` negated ( -obj ) .", "snippet": "operator.neg(obj)"}, {"intent": "Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .", "snippet": "formatter.get_value(key, args, kwargs)"}, {"intent": "Send a LIST NEWSGROUPS command , where `grouppattern` is a wildmat string as specified in RFC 3977 ( it \u2019 s essentially the same as DOS or UNIX shell wildcard strings ) .", "snippet": "NNTP.descriptions(grouppattern)"}, {"intent": "Converts a `string` to a floating point number , following the LC_NUMERIC settings .", "snippet": "locale.atof(string)"}, {"intent": "Fused multiply-add . With arguments `other`, `third`.", "snippet": "decimal.fma(other, third)"}, {"intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "snippet": "xmlrpc.client.dumps(params, allow_none=False)"}, {"intent": "Create a BytesParser instance . The `_class` and `policy` arguments have the same meaning and semantics as the _factory and policy arguments of BytesFeedParser .", "snippet": "email.parser.BytesParser(_class=None)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "snippet": "turtle.shapetransform(t11=None)"}, {"intent": "Compares two values numerically and returns the maximum . With arguments `x`, `y`.", "snippet": "context.max(x, y)"}, {"intent": "Restores registry reflection for the specified disabled `key` .", "snippet": "winreg.EnableReflectionKey(key)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "snippet": "trace.Trace(count=1)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "snippet": "pickletools.dis(pickle, indentlevel=4)"}, {"intent": "Set the available `ciphers` for sockets created with this context .", "snippet": "SSLContext.set_ciphers(ciphers)"}, {"intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "snippet": "re.compile(pattern, flags=0)"}, {"intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "snippet": "context.remainder_near(x, y)"}, {"intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "snippet": "str.maketrans(x, y)"}, {"intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "snippet": "turtle.reset()"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used .", "snippet": "modulefinder.ModuleFinder(path=None)"}, {"intent": "Maximum number of characters in the representation for an integer.", "snippet": "Repr.maxlong"}, {"intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ"}, {"intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)"}, {"intent": "The maximum number of headers of this type that can have the same name.", "snippet": "base_header.max_count"}, {"intent": "A subclass of the built-in property(), indicating an abstract property.", "snippet": "@abc.abstractproperty"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, context=None)"}, {"intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "snippet": "decimal.min_mag(other)"}, {"intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "snippet": "secrets.SystemRandom"}, {"intent": "A compiled regular expression used to parse section headers.", "snippet": "ConfigParser.SECTCRE"}, {"intent": "Return a list of archive members by name .", "snippet": "ZipFile.namelist()"}, {"intent": "The \u201csendfile\u201d syscall is not available for the given socket or file type.", "snippet": "asyncio.SendfileNotAvailableError"}, {"intent": "The Bdb class acts as a generic Python debugger base class .", "snippet": "bdb.Bdb()"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module .", "snippet": "fileinput.FileInput()"}, {"intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "snippet": "raw_io_base.readall()"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "snippet": "connection.backup(target, pages=0, sleep=0.250)"}, {"intent": "Add a list of files to the current component as specified in the glob `pattern` .", "snippet": "directory.glob(pattern)"}, {"intent": "A parameter entity contained incomplete markup.", "snippet": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"}, {"intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "snippet": "timeit.Timer(setup='pass')"}, {"intent": "Raised when a Unicode-related error occurs during translating.", "snippet": "UnicodeTranslateError"}, {"intent": "Suitable for serializing messages in conformance with the email RFCs.", "snippet": "email.policy.SMTP"}, {"intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "snippet": "str.count(sub, start, end)"}, {"intent": "An integer giving the maximum value a variable of type Py_ssize_t can take.", "snippet": "sys.maxsize"}, {"intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "snippet": "nntplib.decode_header(header_str)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `check_circular` is false ( default : True ) , then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError ( or worse ) . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, check_circular=True)"}, {"intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) .", "snippet": "email.message_from_bytes(s)"}, {"intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "snippet": "pkgutil.ImpImporter(dirname=None)"}, {"intent": "Interface representing a bidirectional transport , such as a TCP connection . With arguments `WriteTransport`, `ReadTransport`.", "snippet": "asyncio.Transport(WriteTransport, ReadTransport)"}, {"intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "snippet": "Telnet.set_debuglevel(debuglevel)"}, {"intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "snippet": "widget.column(column, **kw, option=None)"}, {"intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extractall(pwd=None)"}, {"intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "snippet": "ast.increment_lineno(node, n=1)"}, {"intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "snippet": "stringprep.in_table_c3(code)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "snippet": "unittest.TextTestRunner(warnings=None)"}, {"intent": "Compute the stack effect of `opcode` with argument `oparg` .", "snippet": "dis.stack_effect(opcode, oparg)"}, {"intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "snippet": "source_file_loader.load_module()"}, {"intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "snippet": "csv.register_dialect(name, dialect, **fmtparams)"}, {"intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "snippet": "SMTP.docmd(cmd, args='')"}, {"intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "snippet": "queue_listener.filter(record)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "snippet": "difflib.ndiff(a, b, linejunk=None)"}, {"intent": "Return a copy of the object centered in a sequence of length `width` .", "snippet": "bytes.center(width)"}, {"intent": "Get an `option` value for the named `section` .", "snippet": "config_parser.get(section, option)"}, {"intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "snippet": "str.format(*args, **kwargs)"}, {"intent": "Captured stdout from the child process.", "snippet": "completed_process.stdout"}, {"intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "snippet": "zipapp.create_archive(source, main=None)"}, {"intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback .", "snippet": "faulthandler.enable()"}, {"intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "snippet": "ur_lopener.open_unknown(fullurl, data=None)"}, {"intent": "Return a new view of the dictionary \u2019 s values .", "snippet": "dict.values()"}, {"intent": "Returns one of : With arguments `x`, `y`.", "snippet": "widget.identify_region(x, y)"}, {"intent": "Pass to getrusage() to request resources consumed by both the current process and child processes.", "snippet": "resource.RUSAGE_BOTH"}, {"intent": "Return the type of the symbol table .", "snippet": "symbol_table.get_type()"}, {"intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "snippet": "tracemalloc.Traceback"}, {"intent": "The input stream from which this shlex instance is reading characters.", "snippet": "shlex.instream"}, {"intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "snippet": "random.seed(a=None)"}, {"intent": "Call the system call getsid ( ) . With arguments `pid`.", "snippet": "os.getsid(pid)"}, {"intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "snippet": "policy.header_source_parse(sourcelines)"}, {"intent": "Set the list of `sequences` that include this message .", "snippet": "mh_message.set_sequences(sequences)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "snippet": "platform.libc_ver()"}, {"intent": "Method called on an input `line` when the command prefix is not recognized .", "snippet": "Cmd.default(line)"}, {"intent": "Format a `form` in HTML .", "snippet": "cgi.print_form(form)"}, {"intent": "start index of operation within bytecode sequence", "snippet": "offset"}, {"intent": "The user-provided request handler class; an instance of this class is created for each request.", "snippet": "base_server.RequestHandlerClass"}, {"intent": "Guess the type of a file based on its filename or URL , given by `url` .", "snippet": "mimetypes.guess_type(url)"}, {"intent": "The reset_mock method resets all the call attributes on a mock object : In case you want to reset `return_value` or side_effect , then pass the corresponding parameter as True .", "snippet": "mock.reset_mock(return_value=False)"}, {"intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "snippet": "tzinfo.tzname(dt)"}, {"intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "snippet": "os.WCOREDUMP(status)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')"}, {"intent": "Return the value __file__ would be set to if the specified module was imported . With arguments `fullname`.", "snippet": "zipimporter.get_filename(fullname)"}, {"intent": "Query or modify the options of the specific `tab_id` . With arguments `**kw`.", "snippet": "widget.tab(tab_id, **kw)"}, {"intent": "Returns the number of bytes in a system page .", "snippet": "resource.getpagesize()"}, {"intent": "Set or get the word delimiters for completion .", "snippet": "readline.get_completer_delims()"}, {"intent": "Load the type map given in the file `filename` , if it exists .", "snippet": "mimetypes.read_mime_types(filename)"}, {"intent": "Reverse the elements of the deque in-place and then return None .", "snippet": "deque.reverse()"}, {"intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "snippet": "os.setgroups(groups)"}, {"intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "snippet": "urllib.parse.urlunsplit(parts)"}, {"intent": "Return the current signal handler for the signal `signalnum` .", "snippet": "signal.getsignal(signalnum)"}, {"intent": "Return a new sorted list from the items in `iterable` .", "snippet": "sorted(iterable)"}, {"intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "snippet": "filecmp.cmpfiles(dir1, dir2, common)"}, {"intent": "Like max ( self , `other` ) except that the `context` rounding rule is applied before returning and that NaN values are either signaled or ignored ( depending on the context and whether they are signaling or quiet ) .", "snippet": "decimal.max(other)"}, {"intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)"}, {"intent": "True if the address is unspecified.", "snippet": "i_pv4_address.is_unspecified"}, {"intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "snippet": "window.getbegyx()"}, {"intent": "Class used to record warnings for unit tests.", "snippet": "test.support.WarningsRecorder"}, {"intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "snippet": "Packer.pack_opaque(data)"}, {"intent": "Exception raised for errors that are related to the database.", "snippet": "sqlite3.DatabaseError"}, {"intent": "Clear some cookies .", "snippet": "CookieJar.clear()"}, {"intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "snippet": "FTP.dir()"}, {"intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "snippet": "bool(x)"}, {"intent": "Create an invalid file descriptor by opening and closing a temporary file , and returning its descriptor .", "snippet": "test.support.make_bad_fd()"}, {"intent": "Contains the output stream for writing a response back to the client.", "snippet": "base_http_request_handler.wfile"}, {"intent": "Returns the current pack buffer as a string .", "snippet": "Packer.get_buffer()"}, {"intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "snippet": "sqlite3.register_adapter(type, callable)"}, {"intent": "Process HTTPS error responses . With arguments `request`, `response`.", "snippet": "HTTPErrorProcessor.https_response(request, response)"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "snippet": "binascii.b2a_qp(data)"}, {"intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "snippet": "decimal.Context(rounding=None)"}, {"intent": "Determine whether `code` is in tableA.1 ( Unassigned code points in Unicode 3.2 ) .", "snippet": "stringprep.in_table_a1(code)"}, {"intent": "A NamedNodeMap of attribute objects.", "snippet": "Node.attributes"}, {"intent": "Whether the OpenSSL library has built-in support for the Elliptic Curve-based Diffie-Hellman key exchange.", "snippet": "ssl.HAS_ECDH"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client .", "snippet": "smtplib.LMTP()"}, {"intent": "The type of methods of some built-in data types and base classes such as object.__init__() or object.__lt__().", "snippet": "types.WrapperDescriptorType"}, {"intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})"}, {"intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "snippet": "functools.cmp_to_key(func)"}, {"intent": "Return the current setting for property `propertyname` .", "snippet": "XMLReader.getProperty(propertyname)"}, {"intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "snippet": "ssl.match_hostname(cert, hostname)"}, {"intent": "Close the AIFF file .", "snippet": "aifc.close()"}, {"intent": "Raised by process_tokens() if detecting an ambiguous indent.", "snippet": "tabnanny.NannyNag"}, {"intent": "Mask for group permissions.", "snippet": "stat.S_IRWXG"}, {"intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`.", "snippet": "multiprocessing.Barrier(parties)"}, {"intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "snippet": "property(fget=None)"}, {"intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "snippet": "shutil.get_terminal_size(lines), fallback=(columns)"}, {"intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "snippet": "numbers.Complex"}, {"intent": "Like gettext ( ) , but look the `message` up in the specified `domain` .", "snippet": "gettext.dgettext(domain, message)"}, {"intent": "This takes a binary `file` for reading a pickle data stream .", "snippet": "pickle.Unpickler(file)"}, {"intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "snippet": "os.getrandom(size, flags=0)"}, {"intent": "Add a `spec` to a mock . If `spec_set` is true then only attributes on the spec can be set .", "snippet": "mock.mock_add_spec(spec, spec_set=False)"}, {"intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "snippet": "UUID.is_safe"}, {"intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "snippet": "maildir_message.add_flag(flag)"}, {"intent": "This context is used by the Context constructor as a prototype for new contexts.", "snippet": "decimal.DefaultContext"}, {"intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "snippet": "structure._pack_"}, {"intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "snippet": "patch.dict(in_dict, **kwargs, values=())"}, {"intent": "Generate a random UUID .", "snippet": "uuid.uuid4()"}, {"intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "snippet": "os.stat(path)"}, {"intent": "Set default values for several option destinations at once .", "snippet": "OptionParser.set_defaults()"}, {"intent": "Return `r` length subsequences of elements from the input `iterable` .", "snippet": "itertools.combinations(iterable, r)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "snippet": "@dataclasses.dataclass(order=False)"}, {"intent": "This is a dictionary that maps module names to modules which have already been loaded.", "snippet": "sys.modules"}, {"intent": "Get the status of the file descriptor `fd` .", "snippet": "os.fstat(fd)"}, {"intent": "Enable a server to accept connections .", "snippet": "socket.listen()"}, {"intent": "Kill the child .", "snippet": "process.kill()"}, {"intent": "Prepare a `record` for handling .", "snippet": "queue_listener.prepare(record)"}, {"intent": "Return True if the terminal can display colors ; otherwise , return False .", "snippet": "curses.has_colors()"}, {"intent": "The type object for proxies of objects which are not callable.", "snippet": "weakref.ProxyType"}, {"intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "snippet": "inspect.getmembers(object)"}, {"intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "snippet": "NNTP.xpath(id)"}, {"intent": "Convert `params` into an XML-RPC request .", "snippet": "xmlrpc.client.dumps(params)"}, {"intent": "Return True if the symbol is declared global with a global statement .", "snippet": "symbol.is_declared_global()"}, {"intent": "This method is called after close has been called to reset the parser so that it is ready to parse new documents .", "snippet": "IncrementalParser.reset()"}, {"intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "snippet": "tkinter.tix.LabelEntry"}, {"intent": "Union type; Union[X, Y] means either X or Y.", "snippet": "typing.Union"}, {"intent": "The type of methods of some built-in data types such as str.join().", "snippet": "types.MethodDescriptorType"}, {"intent": "Leave cbreak mode .", "snippet": "curses.nocbreak()"}, {"intent": "Create a string buffer from a TarInfo object .", "snippet": "TarInfo.tobuf()"}, {"intent": "Delete temporary files from the mailbox that have not been accessed in the last 36 hours .", "snippet": "maildir.clean()"}, {"intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "snippet": "traceback_exception.from_list(a_list)"}, {"intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "snippet": "stat_result.st_blksize"}, {"intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "snippet": "tixCommand.tix_getbitmap(name)"}, {"intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "snippet": "_c_data._b_base_"}, {"intent": "Set the `flags` of `path` to the numeric flags , like chflags ( ) , but do not follow symbolic links .", "snippet": "os.lchflags(path, flags)"}, {"intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "snippet": "sys.base_exec_prefix"}, {"intent": "The UUID as a URN as specified in RFC 4122.", "snippet": "UUID.urn"}, {"intent": "Tidy up any resources used by the handler .", "snippet": "queue_listener.close()"}, {"intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "snippet": "test_case.assertLogs()"}, {"intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "snippet": "itertools.count(step=1)"}, {"intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages .", "snippet": "ArgumentParser.add_argument_group()"}, {"intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "element_tree.write(file, method=\"xml\")"}, {"intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] .", "snippet": "time.isoformat()"}, {"intent": "Set the \u201c background \u201d set of attributes to `attr` .", "snippet": "window.attrset(attr)"}, {"intent": "Return the representation of `x` in polar coordinates .", "snippet": "cmath.polar(x)"}, {"intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` .", "snippet": "email.generator.Generator(outfp)"}, {"intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "snippet": "tkinter.tix.ExFileSelectBox"}, {"intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "snippet": "base_selector.register(fileobj, events)"}, {"intent": "Mapping class that references keys weakly . With arguments `dict`.", "snippet": "weakref.WeakKeyDictionary(dict)"}, {"intent": "A valid OpenerDirector, which can be used to open using a different protocol, or handle errors.", "snippet": "BaseHandler.parent"}, {"intent": "Prompt the user for a password without echoing .", "snippet": "getpass.getpass()"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, fromfile='')"}, {"intent": "Return `x` to the power of `y` , reduced `modulo` modulo if given .", "snippet": "context.power(x, y)"}, {"intent": "Creates a Calendar object . `firstweekday` is an integer specifying the first day of the week .", "snippet": "calendar.Calendar(firstweekday=0)"}, {"intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "snippet": "context.min(x, y)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string .", "snippet": "subprocess.Popen(args)"}, {"intent": "Raised when an assert statement fails.", "snippet": "AssertionError"}, {"intent": "A possible value for the how parameter to pthread_sigmask() indicating that the signal mask is to be replaced.", "snippet": "signal.SIG_SETMASK"}, {"intent": "Return centered in a string of length `width` .", "snippet": "str.center(width)"}, {"intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "snippet": "SMTP.login(user, password, initial_response_ok=True)"}, {"intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "snippet": "statistics.variance(data)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "snippet": "datetime.replace(hour=self.hour)"}, {"intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "snippet": "asyncio.SafeChildWatcher"}, {"intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "snippet": "cgi.escape(s)"}, {"intent": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.", "snippet": "xml.dom.IndexSizeErr"}, {"intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs)"}, {"intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "snippet": "time.ctime()"}, {"intent": "Raised when a Unicode-related error occurs during decoding.", "snippet": "UnicodeDecodeError"}, {"intent": "Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear before the value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if the symbol should replace the radix character.", "snippet": "locale.CRNCYSTR"}, {"intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "snippet": "socket.recv(bufsize)"}, {"intent": "Return whether this path points to the same file as `other_path` , which can be either a Path object , or a string .", "snippet": "Path.samefile(other_path)"}, {"intent": "File descriptor in bad state", "snippet": "errno.EBADFD"}, {"intent": "This has a different meaning for each node type; see the DOM specification for details.", "snippet": "Node.nodeName"}, {"intent": "If this attribute is set to a callable, the rotate() method delegates to this callable.", "snippet": "base_rotating_handler.rotator"}, {"intent": "Expansion field data.", "snippet": "ZipInfo.extra"}, {"intent": "An integer representing the node type.", "snippet": "Node.nodeType"}, {"intent": "A concrete implementation of importlib.abc.PathEntryFinder which caches results from the file system . The `path` argument is the directory for which the finder is in charge of searching . With arguments `*loader_details`.", "snippet": "importlib.machinery.FileFinder(path, *loader_details)"}, {"intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "snippet": "xml.sax.saxutils.escape(data, entities={})"}, {"intent": "Base class for creating enumerated constants.", "snippet": "enum.Enum"}, {"intent": "These are the possible values for idtype in waitid().", "snippet": "os.P_PID"}, {"intent": "Return a list of markers in the audio file .", "snippet": "aifc.getmarkers()"}, {"intent": "Set the priority mask to `maskpri` and return the previous mask value .", "snippet": "syslog.setlogmask(maskpri)"}, {"intent": "The stateless encoding and decoding functions.", "snippet": "codec_info.encode"}, {"intent": "Set the event `loop` for the current context to loop .", "snippet": "abstract_event_loop_policy.set_event_loop(loop)"}, {"intent": "Append a new item with value `x` to the end of the array .", "snippet": "array.append(x)"}, {"intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "snippet": "asyncio.open_unix_connection(ssl=None)"}, {"intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "snippet": "sys.set_coroutine_origin_tracking_depth(depth)"}, {"intent": "Force as many objects as possible to be collected .", "snippet": "test.support.gc_collect()"}, {"intent": "The scroll bar widget.", "snippet": "ScrolledText.vbar"}, {"intent": "The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "snippet": "resource.RLIMIT_NICE"}, {"intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "snippet": "sys.abiflags"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "snippet": "pprint.pprint(object)"}, {"intent": "Block until all items in the queue have been received and processed .", "snippet": "queue.join()"}, {"intent": "Toggle the selection state of each item in items . With arguments `*items`.", "snippet": "widget.selection_toggle(*items)"}, {"intent": "Adds the specified `filter` filter to this logger .", "snippet": "queue_listener.addFilter(filter)"}, {"intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "snippet": "encodings.idna.ToUnicode(label)"}, {"intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "snippet": "Pattern.groupindex"}, {"intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "snippet": "base_selector.unregister(fileobj)"}, {"intent": "Save cookies to a file . `ignore_expires` : save even cookies that have expired", "snippet": "FileCookieJar.save(ignore_expires=False)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . With arguments `checker`.", "snippet": "doctest.DocTestSuite(checker=None)"}, {"intent": "Return a string containing a printable representation of an `object` .", "snippet": "repr(object)"}, {"intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "snippet": "i_pv6_address.ipv4_mapped"}, {"intent": "This is an alias for the builtin open ( ) function . With arguments `file`.", "snippet": "io.open(file)"}, {"intent": "Round to nearest with ties going away from zero.", "snippet": "decimal.ROUND_HALF_UP"}, {"intent": "The maximum number of processes the current process may create.", "snippet": "resource.RLIMIT_NPROC"}, {"intent": "Set the size and position of the main window .", "snippet": "turtle.setup()"}, {"intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, spec=None)"}, {"intent": "The default selector class, using the most efficient implementation available on the current platform.", "snippet": "selectors.DefaultSelector"}, {"intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "snippet": "str.startswith(prefix, start, end)"}, {"intent": "An indicator of the native byte order.", "snippet": "sys.byteorder"}, {"intent": "Replaces `item` \u2019 s child with newchildren . With arguments `*newchildren`.", "snippet": "widget.set_children(item, *newchildren)"}, {"intent": "Header-encode a `string` by converting it first to bytes . This is similar to header_encode ( ) except that the string is fit into maximum line lengths as given by the argument `maxlengths` , which must be an iterator : each element returned from this iterator will provide the next maximum line length .", "snippet": "charset.header_encode_lines(string, maxlengths)"}, {"intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "snippet": "xmlrpc.client.loads(data, use_datetime=False)"}, {"intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "snippet": "ord(c)"}, {"intent": "Checks for an ASCII uppercase letter . With arguments `c`.", "snippet": "curses.ascii.isupper(c)"}, {"intent": "URL linking to a comment from the server explaining the function of this cookie, or None.", "snippet": "Cookie.comment_url"}, {"intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "snippet": "os.pathsep"}, {"intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "snippet": "datetime.isoformat()"}, {"intent": "Change the mode of file descriptor `fd` to cbreak .", "snippet": "tty.setcbreak(fd)"}, {"intent": "Return the current local date and time .", "snippet": "datetime.now()"}, {"intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "snippet": "os.plock(op)"}, {"intent": "Stops the worker processes immediately without completing outstanding work .", "snippet": "pool.terminate()"}, {"intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "snippet": "scheduler.enter(delay, priority, action)"}, {"intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "snippet": "smtp_channel.received_lines"}, {"intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "snippet": "logging.Formatter(fmt=None, style='%')"}, {"intent": "Write a list of `lines` to the stream .", "snippet": "io_base.writelines(lines)"}, {"intent": "Return time object with same hour , minute , second , microsecond and fold .", "snippet": "datetime.time()"}, {"intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "snippet": "os.startfile(path, operation)"}, {"intent": "Tests grouped by a TestSuite are always accessed by iteration .", "snippet": "test_suite.__iter__()"}, {"intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "snippet": "str.ljust(width, fillchar)"}, {"intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "snippet": "socket.sendmsg(buffers)"}, {"intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "snippet": "array.tobytes()"}, {"intent": "Get the maximum priority value for `policy` .", "snippet": "os.sched_get_priority_max(policy)"}, {"intent": "Return the string left justified in a string of length `width` .", "snippet": "str.ljust(width)"}, {"intent": "Sequence containing all the type objects for proxies.", "snippet": "weakref.ProxyTypes"}, {"intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "snippet": "sniffer.has_header(sample)"}, {"intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "snippet": "os.tcsetpgrp(fd, pg)"}, {"intent": "Command that was used to spawn the child process.", "snippet": "completed_process.cmd"}, {"intent": "Stop monitoring the `fd` file descriptor for read availability .", "snippet": "loop.remove_reader(fd)"}, {"intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "snippet": "test_case.assertListEqual(first, second)"}, {"intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "snippet": "loop.call_soon(callback, *args)"}, {"intent": "Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.", "snippet": "ctypes.c_wchar_p"}, {"intent": "This specifies the HTTP protocol version used in responses.", "snippet": "base_http_request_handler.protocol_version"}, {"intent": "Perform the SSL setup handshake .", "snippet": "SSLSocket.do_handshake()"}, {"intent": "Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.", "snippet": "tarfile.ExtractError"}, {"intent": "Square root of a non-negative number to context precision . With arguments `x`.", "snippet": "context.sqrt(x)"}, {"intent": "Return whether there is any data available to be read .", "snippet": "joinable_queue.poll()"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs)"}, {"intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "snippet": "dataclasses.field(repr=True)"}, {"intent": "Returns the system/OS name , e.g .", "snippet": "platform.system()"}, {"intent": "Depth limit on the creation of recursive representations.", "snippet": "Repr.maxlevel"}, {"intent": "Mask for file owner permissions.", "snippet": "stat.S_IRWXU"}, {"intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "snippet": "Cookie.port_specified"}, {"intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)"}, {"intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "snippet": "hashlib.scrypt(password, salt, n, r, p)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "snippet": "gzip.open(filename)"}, {"intent": "The Sniffer class is used to deduce the format of a CSV file.", "snippet": "csv.Sniffer"}, {"intent": "Return the current shape polygon as tuple of coordinate pairs .", "snippet": "turtle.get_shapepoly()"}, {"intent": "If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard input handle for the process.", "snippet": "startupinfo.hStdInput"}, {"intent": "This method for the Stats class prints a list of all functions that called each function in the profiled database . With arguments `*restrictions`.", "snippet": "stats.print_callers(*restrictions)"}, {"intent": "Add a directory to sys.path and process its .pth files . With arguments `sitedir`.", "snippet": "site.addsitedir(sitedir)"}, {"intent": "(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "snippet": "text_wrapper.break_long_words"}, {"intent": "Called by the server \u2019 s constructor to activate the server .", "snippet": "base_server.server_activate()"}, {"intent": "The list of command line arguments passed to a Python script.", "snippet": "sys.argv"}, {"intent": "Return the subset of the list of `names` that match `pattern` .", "snippet": "fnmatch.filter(names, pattern)"}, {"intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)"}, {"intent": "Make an iterator that returns elements from the first iterable until it is exhausted , then proceeds to the next iterable , until all of the iterables are exhausted . With arguments `*iterables`.", "snippet": "itertools.chain(*iterables)"}, {"intent": "Unset ( delete ) the environment variable named `key` .", "snippet": "os.unsetenv(key)"}, {"intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "snippet": "extension_file_loader.is_package(fullname)"}, {"intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "snippet": "fileinput.isfirstline()"}, {"intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "snippet": "Packer.pack_fopaque(n, data)"}, {"intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "snippet": "sum(iterable, start)"}, {"intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "snippet": "json_decoder.decode(s)"}, {"intent": "A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "snippet": "thread.daemon"}, {"intent": "Basic interface for resolving entities.", "snippet": "xml.sax.handler.EntityResolver"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation :", "snippet": "venv.EnvBuilder()"}, {"intent": "Returns a string identifying the Python implementation SCM branch .", "snippet": "platform.python_branch()"}, {"intent": "Add a `callback` to be run when the Future is done . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in .", "snippet": "future.add_done_callback(callback, context=None)"}, {"intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "snippet": "doctest.script_from_examples(s)"}, {"intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' . The `buffering` argument has the same meaning as the corresponding argument to the built-in open ( ) function .", "snippet": "os.popen(cmd, mode='r', buffering=-1)"}, {"intent": "Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment .", "snippet": "ensurepip.version()"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)"}, {"intent": "Return the cosine of `x` .", "snippet": "cmath.cos(x)"}, {"intent": "Return integer-valued system configuration values . If the configuration value specified by `name` isn \u2019 t defined , -1 is returned .", "snippet": "os.sysconf(name)"}, {"intent": "Unpacks and returns a variable length byte stream , similarly to unpack_string ( ) .", "snippet": "Unpacker.unpack_bytes()"}, {"intent": "Return a Maildir instance representing the `folder` whose name is folder .", "snippet": "maildir.get_folder(folder)"}, {"intent": "Return the next item from the container .", "snippet": "iterator.__next__()"}, {"intent": "Split `string` by the occurrences of `pattern` .", "snippet": "re.split(pattern, string)"}, {"intent": "An integer giving the value of the largest Unicode code point, i.e.", "snippet": "sys.maxunicode"}, {"intent": "Classes can further influence how their instances are pickled ; if the class defines the method __getstate__ ( ) , it is called and the returned object is pickled as the contents for the instance , instead of the contents of the instance \u2019 s dictionary .", "snippet": "object.__getstate__()"}, {"intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "snippet": "i_pv4_address.version"}, {"intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "snippet": "zipapp.create_archive(source, compressed=False)"}, {"intent": "Create and return a text node containing the `data` passed as a parameter .", "snippet": "Document.createTextNode(data)"}, {"intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "snippet": "NNTP.newnews(group, date, file=None)"}, {"intent": "A string with all available type codes.", "snippet": "array.typecodes"}, {"intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "snippet": "text_wrapper.break_on_hyphens"}, {"intent": "Transform list `x` into a heap , in-place , in linear time .", "snippet": "heapq.heapify(x)"}, {"intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "snippet": "multiprocessing.freeze_support()"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)"}, {"intent": "Alias of BadZipFile, for compatibility with older Python versions.", "snippet": "zipfile.BadZipfile"}, {"intent": "Should be called after a request is sent to get the response from the server .", "snippet": "HTTPConnection.getresponse()"}, {"intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "snippet": "chunk.read()"}, {"intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "snippet": "queue_listener.debug(msg, *args, **kwargs)"}, {"intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "snippet": "secrets.token_hex(nbytes=None)"}, {"intent": "The entity body for the request, or None if not specified.", "snippet": "Request.data"}, {"intent": "Write `data` to the stream .", "snippet": "stream_writer.write(data)"}, {"intent": "Mark the socket closed .", "snippet": "socket.close()"}, {"intent": "Checks to see if the file has changed .", "snippet": "watched_file_handler.reopenIfNeeded()"}, {"intent": "Return the name of the key numbered `k` as a bytes object .", "snippet": "curses.keyname(k)"}, {"intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "snippet": "float.fromhex(s)"}, {"intent": "Too many users", "snippet": "errno.EUSERS"}, {"intent": "Return the group database entry for the given group `name` .", "snippet": "grp.getgrnam(name)"}, {"intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "snippet": "xml.etree.ElementTree.fromstring(text)"}, {"intent": "A decorator for running tests that require support for xattr.", "snippet": "@test.support.skip_unless_xattr"}, {"intent": "Returns the size in bytes of a ctypes type or instance memory buffer . With arguments `obj_or_type`.", "snippet": "ctypes.sizeof(obj_or_type)"}, {"intent": "Windows only : this function is probably the worst-named thing in ctypes .", "snippet": "ctypes.WinError()"}, {"intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "snippet": "ArgumentParser.print_usage()"}, {"intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "snippet": "cgi.parse_header(string)"}, {"intent": "Required to query the values of a registry key.", "snippet": "winreg.KEY_QUERY_VALUE"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "snippet": "gzip.open(filename, compresslevel=9)"}, {"intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "snippet": "os.path.commonprefix(list)"}, {"intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "snippet": "window.cursyncup()"}, {"intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "snippet": "test.support.detect_api_mismatch(ref_api, other_api)"}, {"intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "snippet": "collections.ChainMap(*maps)"}, {"intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)"}, {"intent": "Represents the C long double datatype.", "snippet": "ctypes.c_longdouble"}, {"intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "snippet": "random.weibullvariate(alpha, beta)"}, {"intent": "Base class for opening and reading URLs . The optional `proxies` parameter should be a dictionary mapping scheme names to proxy URLs , where an empty dictionary turns proxies off completely . With arguments `**x509`.", "snippet": "urllib.request.URLopener(**x509, proxies=None)"}, {"intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "snippet": "os.sched_setaffinity(pid, mask)"}, {"intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "snippet": "POP3.capa()"}, {"intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "snippet": "audioop.alaw2lin(fragment, width)"}, {"intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "snippet": "secrets.compare_digest(a, b)"}, {"intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "snippet": "ast._fields"}, {"intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "snippet": "sys.settrace(tracefunc)"}, {"intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)"}, {"intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "snippet": "EnvironmentVarGuard.set(envvar, value)"}, {"intent": "Checks for an ASCII hexadecimal digit . This is equivalent to `c` in string.hexdigits .", "snippet": "curses.ascii.isxdigit(c)"}, {"intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) .", "snippet": "code.InteractiveInterpreter()"}, {"intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "snippet": "urllib.parse.urljoin(base, url)"}, {"intent": "Transport endpoint is already connected", "snippet": "errno.EISCONN"}, {"intent": "A Condition object . With arguments `loop`.", "snippet": "asyncio.Condition(loop=None)"}, {"intent": "A named tuple that holds information about Python\u2019s internal representation of integers.", "snippet": "sys.int_info"}, {"intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "snippet": "socket.recvmsg(bufsize)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "snippet": "SSLContext.wrap_socket(sock, server_side=False, server_hostname=None)"}, {"intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "snippet": "test_loader.discover(start_dir)"}, {"intent": "A read-only description of the dialect in use by the parser.", "snippet": "csvreader.dialect"}, {"intent": "Returns three values : the formatted version of `object` as a string , a flag indicating whether the result is readable , and a flag indicating whether recursion was detected . The second is a dictionary which contains the id ( ) of objects that are part of the current presentation `context` ( direct and indirect containers for object that are affecting the presentation ) as the keys ; if an object needs to be presented which is already represented in context , the third return value should be True . The third argument , `maxlevels` , gives the requested limit to recursion ; this will be 0 if there is no requested limit . The fourth argument , `level` , gives the current level ; recursive calls should be passed a value less than that of the current call .", "snippet": "PrettyPrinter.format(object, context, maxlevels, level)"}, {"intent": "The total number of addresses in the network.", "snippet": "i_pv4_network.num_addresses"}, {"intent": "Return the match for `key` in map `mapname` , or raise an error ( nis.error ) if there is none .", "snippet": "nis.match(key, mapname)"}, {"intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "snippet": "hmac.new(key)"}, {"intent": "The HTTP request method to use.", "snippet": "Request.method"}, {"intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "snippet": "dir(object)"}, {"intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)"}, {"intent": "Unpacks and returns a variable length string .", "snippet": "Unpacker.unpack_string()"}, {"intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "snippet": "turtle.onrelease(fun, add=None)"}, {"intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) .", "snippet": "asyncore.loop(timeout, use_poll)"}, {"intent": "The model must occur one or more times (like A+).", "snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS"}, {"intent": "Common base class for the other pickling exceptions.", "snippet": "pickle.PickleError"}, {"intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "snippet": "bytes.decode(errors=\"strict\")"}, {"intent": "Private, abstract base class for pointers.", "snippet": "ctypes._Pointer"}, {"intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment .", "snippet": "urllib.parse.urlparse(urlstring, scheme='')"}, {"intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "snippet": "collections.deque(iterable)"}, {"intent": "Returns a tuple ( soft , hard ) with the current soft and hard limits of `resource` .", "snippet": "resource.getrlimit(resource)"}, {"intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "snippet": "Option.callback_args"}, {"intent": "Tries to determine the name of the Linux OS distribution name . `supported_dists` may be given to define the set of Linux distributions to look for . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), supported_dists=('SuSE')"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `countfuncs` enables listing of the functions called during the run .", "snippet": "trace.Trace(countfuncs=0)"}, {"intent": "The scheduler class defines a generic interface to scheduling events . The `delayfunc` function should be callable with one argument , compatible with the output of timefunc , and should delay that many time units .", "snippet": "sched.scheduler(delayfunc=time.sleep)"}, {"intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "snippet": "mime_types.types_map_inv"}, {"intent": "Get the name of the n-th day of the week.", "snippet": "DAY_1 ... DAY_7"}, {"intent": "Return the value for `var` if var has the value in the context object .", "snippet": "context.get(var)"}, {"intent": "Start accepting connections .", "snippet": "server.start_serving()"}, {"intent": "Return the normal `form` form for the Unicode string `unistr` .", "snippet": "unicodedata.normalize(form, unistr)"}, {"intent": "Broken pipe", "snippet": "errno.EPIPE"}, {"intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "snippet": "loop.create_server(protocol_factory)"}, {"intent": "A string indicating how the repr() function behaves for floats.", "snippet": "sys.float_repr_style"}, {"intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "snippet": "Pattern.findall(string, pos, endpos)"}, {"intent": "I/O error", "snippet": "errno.EIO"}, {"intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in .", "snippet": "SSLContext.load_cert_chain(certfile, keyfile=None)"}, {"intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "snippet": "test_loader.loadTestsFromName(name)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . With arguments `force_zip64`.", "snippet": "ZipFile.open(name, force_zip64=False)"}, {"intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "snippet": "cgi.escape(s, quote=False)"}, {"intent": "Run the specified WSGI application , `app` .", "snippet": "base_handler.run(app)"}, {"intent": "Number of hard links.", "snippet": "stat_result.st_nlink"}, {"intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file .", "snippet": "pickle.dumps(obj)"}, {"intent": "Wide char variant of getch ( ) , returning a Unicode value .", "snippet": "msvcrt.getwch()"}, {"intent": "A string describing the specific codec error.", "snippet": "auto.reason"}, {"intent": "Do nothing .", "snippet": "POP3.noop()"}, {"intent": "A dictionary that maps Unicode code points to HTML entity names.", "snippet": "html.entities.codepoint2name"}, {"intent": "An event loop based on the selectors module.", "snippet": "asyncio.SelectorEventLoop"}, {"intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "snippet": "statistics.harmonic_mean(data)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "snippet": "nntplib.NNTP(host, timeout)"}, {"intent": "Escape special characters in `pattern` .", "snippet": "re.escape(pattern)"}, {"intent": "Finds the first subelement matching `match` .", "snippet": "element.find(match)"}, {"intent": "This method is a WSGI application to generate an error page for the user . This method can access the current error information using sys.exc_info ( ) , and should pass that information to `start_response` when calling it ( as described in the \u201c Error Handling \u201d section of PEP 3333 ) . With arguments `environ`.", "snippet": "base_handler.error_output(environ, start_response)"}, {"intent": "Make the path absolute , resolving any symlinks .", "snippet": "Path.resolve()"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "snippet": "unittest.main(testRunner=None)"}, {"intent": "Return the reference count of the `object` .", "snippet": "sys.getrefcount(object)"}, {"intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "snippet": "AttributeError"}, {"intent": "Get a child process watcher object .", "snippet": "abstract_event_loop_policy.get_child_watcher()"}, {"intent": "Return successive `r` length permutations of elements in the `iterable` .", "snippet": "itertools.permutations(iterable)"}, {"intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "snippet": "Packer.pack_string(s)"}, {"intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "snippet": "signal.SIG_BLOCK"}, {"intent": "Session object used by session.", "snippet": "ssl.SSLSession"}, {"intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "snippet": "calendar.month(theyear, themonth, w=0, l=0)"}, {"intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "snippet": "dataclasses.field(default=MISSING)"}, {"intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well . Similarly , `threshold2` controls the number of collections of generation 1 before collecting generation 2 .", "snippet": "gc.set_threshold(threshold0, threshold1, threshold2)"}, {"intent": "Retrieves the contents of `url` and places it in `filename` .", "snippet": "ur_lopener.retrieve(url)"}, {"intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "snippet": "base_http_request_handler.date_time_string()"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "snippet": "json.load(fp, **kw, parse_float=None)"}, {"intent": "The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules . With arguments `path_string`.", "snippet": "imp.NullImporter(path_string)"}, {"intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "snippet": "typing.TYPE_CHECKING"}, {"intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "snippet": "ctypes.resize(obj, size)"}, {"intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "snippet": "configparser.ExtendedInterpolation"}, {"intent": "The module was found as dynamically loadable shared library.", "snippet": "imp.C_EXTENSION"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "snippet": "json.loads(s, **kw)"}, {"intent": "Get the radix character (decimal dot, decimal comma, etc.", "snippet": "locale.RADIXCHAR"}, {"intent": "Returns socket instance used to connect to server .", "snippet": "IMAP4.socket()"}, {"intent": "Given `field_name` as returned by parse ( ) ( see above ) , convert it to an object to be formatted . `args` and `kwargs` are as passed in to vformat ( ) .", "snippet": "formatter.get_field(field_name, args, kwargs)"}, {"intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "snippet": "ctypes.Union(*args, **kw)"}, {"intent": "Calls handle_one_request ( ) once ( or , if persistent connections are enabled , multiple times ) to handle incoming HTTP requests .", "snippet": "base_http_request_handler.handle()"}, {"intent": "Field objects describe each defined field.", "snippet": "dataclasses.Field"}, {"intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "snippet": "window.attroff(attr)"}, {"intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "snippet": "xmlparser.SetBase(base)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "snippet": "doctest.Example(source, want, options=None)"}, {"intent": "Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH.", "snippet": "configparser.InterpolationDepthError"}, {"intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)"}, {"intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "snippet": "null_handler.createLock()"}, {"intent": "Look up character by `name` .", "snippet": "unicodedata.lookup(name)"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "snippet": "os.sendfile(out, in, offset, count, headers, trailers)"}, {"intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "snippet": "ast.literal_eval(node_or_string)"}, {"intent": "Draw a border around the edges of the window .", "snippet": "window.border()"}, {"intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "snippet": "random.sample(population, k)"}, {"intent": "Returns the greatest int < = self .", "snippet": "fraction.__floor__()"}, {"intent": "The FileEntry widget can be used to input a filename.", "snippet": "tkinter.tix.FileEntry"}, {"intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . If the optional `initializer` is present , it is placed before the items of the sequence in the calculation , and serves as a default when the sequence is empty . With arguments `iterable`.", "snippet": "functools.reduce(function, iterable, initializer)"}, {"intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "snippet": "email.utils.parsedate(date)"}, {"intent": "Get the hardware address as a 48-bit positive integer .", "snippet": "uuid.getnode()"}, {"intent": "Return a new set with elements common to the set and all others.", "snippet": "set & other & ..."}, {"intent": "Refer to the corresponding attribute documentation in IPv4Network . With arguments `other`.", "snippet": "i_pv6_network.compare_networks(other)"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "snippet": "cmd.Cmd()"}, {"intent": "Return a pretty-printed version of the document .", "snippet": "Node.toprettyxml()"}, {"intent": "Name of the kernel filter.", "snippet": "kevent.filter"}, {"intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "snippet": "xml.sax.saxutils.unescape(data, entities={})"}, {"intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "snippet": "FileCookieJar.save(ignore_discard=False)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw)"}, {"intent": "This method is called to process arbitrary `data` ( e.g .", "snippet": "HTMLParser.handle_data(data)"}, {"intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "snippet": "i_pv4_address.packed"}, {"intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "snippet": "base64.b64decode(s, altchars=None)"}, {"intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "snippet": "math.ceil(x)"}, {"intent": "Close the connection to the server .", "snippet": "HTTPConnection.close()"}, {"intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "snippet": "AU_write.writeframes(data)"}, {"intent": "Return the value of the named header field . `name` should not include the colon field separator .", "snippet": "message.__getitem__(name)"}, {"intent": "Initializes the handler with a buffer of the specified `capacity` .", "snippet": "logging.handlers.BufferingHandler(capacity)"}, {"intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "snippet": "decimal.from_float(f)"}, {"intent": "Return a suitable DOM implementation .", "snippet": "xml.dom.getDOMImplementation()"}, {"intent": "Return a string containing linesep characters as required to correctly fold the header according to `policy` .", "snippet": "base_header.fold(policy)"}, {"intent": "Buffer the bytes `data` for transmission to the client .", "snippet": "base_handler._write(data)"}, {"intent": "Wait for completion of a child process , and return a tuple containing its pid and exit status indication : a 16-bit number , whose low byte is the signal number that killed the process , and whose high byte is the exit status ( if the signal number is zero ) ; the high bit of the low byte is set if a core file was produced .", "snippet": "os.wait()"}, {"intent": "Send a pickled byte-string to a socket . With arguments `s`.", "snippet": "datagram_handler.send(s)"}, {"intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "snippet": "os.path.normpath(path)"}, {"intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "snippet": "window.getkey(y)"}, {"intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None)"}, {"intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "snippet": "chain.from_iterable(iterable)"}, {"intent": "A string representation of the network, with the mask in net mask notation.", "snippet": "i_pv4_network.with_netmask"}, {"intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)"}, {"intent": "Called when the active opener \u2019 s socket actually makes a connection .", "snippet": "dispatcher.handle_connect()"}, {"intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "snippet": "inspect.trace(context=1)"}, {"intent": "Whether the OpenSSL library has built-in support for the Application-Layer Protocol Negotiation TLS extension as described in RFC 7301.", "snippet": "ssl.HAS_ALPN"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "snippet": "datetime.replace(second=self.second)"}, {"intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "snippet": "test_loader.loadTestsFromNames(names)"}, {"intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "snippet": "random.seed(version=2)"}, {"intent": "Delete all messages from the mailbox .", "snippet": "mailbox.clear()"}, {"intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "snippet": "curses.newpad(nlines, ncols)"}, {"intent": "Return the error handler previously registered under the `name` name .", "snippet": "codecs.lookup_error(name)"}, {"intent": "Same as header_encoding, but describes the encoding for the mail message\u2019s body, which indeed may be different than the header encoding.", "snippet": "charset.body_encoding"}, {"intent": "A transport for datagram ( UDP ) connections . With arguments `BaseTransport`.", "snippet": "asyncio.DatagramTransport(BaseTransport)"}, {"intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "snippet": "sorted(iterable, key=None, reverse=False)"}, {"intent": "The main configuration parser . When `delimiters` is given , it is used as the set of substrings that divide keys from values . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), delimiters=('=')"}, {"intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "snippet": "partial.args"}, {"intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "snippet": "csv.excel_tab"}, {"intent": "Delete any character at ( `y` , `x` ) .", "snippet": "window.delch(y, x)"}, {"intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "snippet": "NNTP.list(group_pattern=None, file=None)"}, {"intent": "This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)"}, {"intent": "Decorator for skipping tests if zlib doesn\u2019t exist.", "snippet": "@test.support.requires_zlib"}, {"intent": "A list of nodes contained within this node.", "snippet": "Node.childNodes"}, {"intent": "Sets the `value` of the combobox to value .", "snippet": "widget.set(value)"}, {"intent": "Skip to the end of the chunk .", "snippet": "chunk.skip()"}, {"intent": "Set to a name that is safe to use as the name of a temporary file.", "snippet": "test.support.TESTFN"}, {"intent": "Return the value of the var ContextVar variable.", "snippet": "context[var]"}, {"intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "snippet": "DefaultCookiePolicy.DomainStrictNonDomain"}, {"intent": "Exception raised when an option referenced from a value does not exist.", "snippet": "configparser.InterpolationMissingOptionError"}, {"intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "snippet": "NNTP.xhdr(hdr, str, file=None)"}, {"intent": "Open a new pseudo-terminal pair .", "snippet": "os.openpty()"}, {"intent": "Snapshot of traces of memory blocks allocated by Python.", "snippet": "tracemalloc.Snapshot"}, {"intent": "Copies the file `src` to the file or directory `dst` . If `follow_symlinks` is false , and src is a symbolic link , dst will be created as a symbolic link .", "snippet": "shutil.copy(src, dst, follow_symlinks=True)"}, {"intent": "A dictionary mapping parameter names to parameter values.", "snippet": "parameterized_mime_header.params"}, {"intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "snippet": "webbrowser.open(url, autoraise=True)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "snippet": "json.load(fp, **kw)"}, {"intent": "Return the path of the user-specific site-packages directory , USER_SITE .", "snippet": "site.getusersitepackages()"}, {"intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "snippet": "style.configure(style, **kw)"}, {"intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)"}, {"intent": "Return the current context for the active thread .", "snippet": "decimal.getcontext()"}, {"intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "snippet": "list(iterable)"}, {"intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "snippet": "json_decoder.raw_decode(s)"}, {"intent": "The CheckList widget displays a list of items to be selected by the user.", "snippet": "tkinter.tix.CheckList"}, {"intent": "Some unspecified syntax error was encountered.", "snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX"}, {"intent": "Finds the caller \u2019 s source filename and line number .", "snippet": "queue_listener.findCaller()"}, {"intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "snippet": "mailbox.itervalues()"}, {"intent": "Raise an error . With arguments `id`.", "snippet": "AU_read.getmark(id)"}, {"intent": "Volume number of file header.", "snippet": "ZipInfo.volume"}, {"intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "snippet": "range(stop)"}, {"intent": "Identify yourself to the SMTP server using HELO .", "snippet": "SMTP.helo()"}, {"intent": "Determine whether `code` is in tableC.1 ( Space characters , union of C.1.1 and C.1.2 ) .", "snippet": "stringprep.in_table_c11_c12(code)"}, {"intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "snippet": "shlex.infile"}, {"intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed . `facts` is a list of strings representing the type of information desired ( e.g .", "snippet": "FTP.mlsd(path=\"\", facts=)"}, {"intent": "Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way.", "snippet": "locale.T_FMT"}, {"intent": "Read at most `n` bytes from file descriptor `fd` .", "snippet": "os.read(fd, n)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered .", "snippet": "doctest.DebugRunner()"}, {"intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "snippet": "locale.delocalize(string)"}, {"intent": "Floating-point positive infinity.", "snippet": "cmath.inf"}, {"intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "snippet": "webbrowser.open_new(url)"}, {"intent": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments . u-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "snippet": "audioop.ulaw2lin(fragment, width)"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `memlimit` argument specifies a limit ( in bytes ) on the amount of memory that the decompressor can use .", "snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None)"}, {"intent": "Return a readable and writable view over the contents of the buffer without copying them .", "snippet": "bytes_io.getbuffer()"}, {"intent": "Format the traceback as a list of lines with newlines .", "snippet": "traceback.format()"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)"}, {"intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "snippet": "test.support.calcobjsize(fmt)"}, {"intent": "Specify the size in bytes of audio samples . With arguments `width`.", "snippet": "aifc.setsampwidth(width)"}, {"intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "snippet": "TarFile.add(name, recursive=True)"}, {"intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "snippet": "bdb.get_stack(f, t)"}, {"intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "snippet": "concurrent.futures.thread.BrokenThreadPool"}, {"intent": "The class CAB represents a CAB file . `name` is the name of the CAB file in the MSI file .", "snippet": "msilib.CAB(name)"}, {"intent": "Packer is the class for packing data into XDR representation.", "snippet": "xdrlib.Packer"}, {"intent": "Object that is equal to anything.", "snippet": "test.support.ALWAYS_EQ"}, {"intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "snippet": "tokenize.detect_encoding(readline)"}, {"intent": "Closes the file .", "snippet": "file_handler.close()"}, {"intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file .", "snippet": "traceback.format_exc()"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "snippet": "window.insnstr(str, n)"}, {"intent": "Stop on the next line in or below the given `frame` .", "snippet": "bdb.set_next(frame)"}, {"intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "snippet": "HTTPHandler.http_open(req)"}, {"intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "snippet": "style.lookup(style, option, state=None)"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "snippet": "urllib.parse.quote(string, encoding=None)"}, {"intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.Unpickler(file, fix_imports=True)"}, {"intent": "The code object has a variable keyword parameter (**kwargs-like).", "snippet": "inspect.CO_VARKEYWORDS"}, {"intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "snippet": "tracemalloc.stop()"}, {"intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "snippet": "io_base.truncate()"}, {"intent": "When True, raise exception Error on bad CSV input.", "snippet": "Dialect.strict"}, {"intent": "Append `line` to the history buffer , as if it was the last line typed .", "snippet": "readline.add_history(line)"}, {"intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "snippet": "signal.alarm(time)"}, {"intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "snippet": "decimal.compare_total_mag(other)"}, {"intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "snippet": "base_selector.modify(fileobj, events)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "snippet": "SSLContext.wrap_socket(sock, server_side=False)"}, {"intent": "Synchronize the on-disk directory and data files .", "snippet": "dumbdbm.sync()"}, {"intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "snippet": "open(file, errors=None)"}, {"intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "snippet": "pow(x, y, z)"}, {"intent": "Test x for membership in s.", "snippet": "x in s"}, {"intent": "Connect to a `host` .", "snippet": "Telnet.open(host)"}, {"intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "snippet": "typing.Callable"}, {"intent": "Return the text of the most recently opened start tag .", "snippet": "HTMLParser.get_starttag_text()"}, {"intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, indent=None)"}, {"intent": "Log the `exc_info` tuple in the server log .", "snippet": "base_handler.log_exception(exc_info)"}, {"intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "snippet": "POP3.apop(user, secret)"}, {"intent": "A class method called before tests in an individual class are run .", "snippet": "test_case.setUpClass()"}, {"intent": "Remove items from the selection . With arguments `*items`.", "snippet": "widget.selection_remove(*items)"}, {"intent": "Connection reset by peer", "snippet": "errno.ECONNRESET"}, {"intent": "Get information about a `frame` or traceback object .", "snippet": "inspect.getframeinfo(frame)"}, {"intent": "Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.", "snippet": "turtle.Turtle"}, {"intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "snippet": "eval(expression, globals, locals)"}, {"intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "snippet": "Cmd.completedefault(text, line, begidx, endidx)"}, {"intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "snippet": "doc_test_runner.report_success(out, test, example, got)"}, {"intent": "Open a new pseudo-terminal pair , using os.openpty ( ) if possible , or emulation code for generic Unix systems .", "snippet": "pty.openpty()"}, {"intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`.", "snippet": "calendar.prmonth(theyear, themonth)"}, {"intent": "Remove the value of `a` at index `b` .", "snippet": "operator.delitem(a, b)"}, {"intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "snippet": "executor.map(func, *iterables, chunksize=1)"}, {"intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "snippet": "file_loader.load_module(fullname)"}, {"intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) . The `callback` function is called for each line with a string argument containing the line with the trailing CRLF stripped .", "snippet": "FTP.retrlines(cmd, callback=None)"}, {"intent": "Set up a secure control connection by using TLS or SSL , depending on what is specified in the ssl_version attribute .", "snippet": "FTP_TLS.auth()"}, {"intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "snippet": "save_signals.matches(self, d, **kwargs)"}, {"intent": "Unsubscribe from old `mailbox` .", "snippet": "IMAP4.unsubscribe(mailbox)"}, {"intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "snippet": "DTDHandler.notationDecl(name, publicId, systemId)"}, {"intent": "The object passed as the tzinfo argument to the datetime constructor, or None if none was passed.", "snippet": "datetime.tzinfo"}, {"intent": "Returns a description of the test , or None if no description has been provided .", "snippet": "test_case.shortDescription()"}, {"intent": "Software caused connection abort", "snippet": "errno.ECONNABORTED"}, {"intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "snippet": "binascii.crc_hqx(data, value)"}, {"intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "snippet": "Unpacker.unpack_farray(n, unpack_item)"}, {"intent": "ABC for awaitable objects, which can be used in await expressions.", "snippet": "collections.abc.Awaitable"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument .", "snippet": "venv.create(env_dir)"}, {"intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "snippet": "datetime.timedelta(minutes=0)"}, {"intent": "The sole value of the type NoneType.", "snippet": "None"}, {"intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "snippet": "loop.call_exception_handler(context)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method .", "snippet": "gzip.GzipFile()"}, {"intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "snippet": "datetime.__format__(format)"}, {"intent": "Turn turtle animation on/off and set `delay` for update drawings .", "snippet": "turtle.tracer()"}, {"intent": "Insert `nlines` lines into the specified window above the current line .", "snippet": "window.insdelln(nlines)"}, {"intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "snippet": "typing.Tuple"}, {"intent": "Return a property attribute . `fget` is a function for getting an attribute value . And `doc` creates a docstring for the attribute .", "snippet": "property(fget=None, doc=None)"}, {"intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "snippet": "loop.call_soon_threadsafe(callback, *args)"}, {"intent": "The version number of this module, as a tuple of integers.", "snippet": "sqlite3.version_info"}, {"intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "snippet": "Cmd.cmdloop()"}, {"intent": "A class that represents thread-local data.", "snippet": "threading.local"}, {"intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "snippet": "window.getkey(y, x)"}, {"intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "snippet": "mailbox.iteritems()"}, {"intent": "The model must occur zero or more times, as for A*.", "snippet": "xml.parsers.expat.model.XML_CQUANT_REP"}, {"intent": "The network address for the network.", "snippet": "i_pv4_network.network_address"}, {"intent": "Filter specific flags.", "snippet": "kevent.fflags"}, {"intent": "The number of nodes in the sequence.", "snippet": "NodeList.length"}, {"intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`.", "snippet": "window.getstr(y, x)"}, {"intent": "Base class for raw binary I/O.", "snippet": "io.RawIOBase"}, {"intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "snippet": "csvreader.__next__()"}, {"intent": "Allow an application to set the `locale` for errors and warnings .", "snippet": "XMLReader.setLocale(locale)"}, {"intent": "Make an iterator that returns elements from the `iterable` as long as the `predicate` is true .", "snippet": "itertools.takewhile(predicate, iterable)"}, {"intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "snippet": "task.print_stack(file=None)"}, {"intent": "For options of type \"choice\", the list of strings the user may choose from.", "snippet": "Option.choices"}, {"intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "snippet": "test.support.temp_cwd(name='tempcwd')"}, {"intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "snippet": "statistics.median_grouped(data, interval=1)"}, {"intent": "Read and return up to `size` bytes with only one call on the raw stream .", "snippet": "buffered_reader.read1(size)"}, {"intent": "A helper function to create a `mock` to replace the use of open ( ) .", "snippet": "unittest.mock.mock_open()"}, {"intent": "Operation now in progress", "snippet": "errno.EINPROGRESS"}, {"intent": "The class used to represent an email address .", "snippet": "email.headerregistry.Address()"}, {"intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "snippet": "Path.write_bytes(data)"}, {"intent": "This class is parallel to BytesParser , but handles string input .", "snippet": "email.parser.Parser()"}, {"intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix .", "snippet": "tempfile.mkstemp(suffix=None)"}, {"intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "snippet": "curses.isendwin()"}, {"intent": "Pdb is the debugger class . The `readrc` argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem .", "snippet": "pdb.Pdb(readrc=True)"}, {"intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "snippet": "help(object)"}, {"intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "snippet": "cursor.fetchall()"}, {"intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "snippet": "binascii.b2a_uu(data)"}, {"intent": "Checks if an object appears to be a valid `element` object .", "snippet": "xml.etree.ElementTree.iselement(element)"}, {"intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "snippet": "locale.ERA_T_FMT"}, {"intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "snippet": "array.index(x)"}, {"intent": "Remote I/O error", "snippet": "errno.EREMOTEIO"}, {"intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "snippet": "imghdr.what(filename, h=None)"}, {"intent": "Add a codec that map characters in the given character set to and from Unicode . `charset` is the canonical name of a character set . `codecname` is the name of a Python codec , as appropriate for the second argument to the str \u2019 s encode ( ) method .", "snippet": "email.charset.add_codec(charset, codecname)"}, {"intent": "Base class for warnings generated by user code.", "snippet": "UserWarning"}, {"intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "snippet": "inspect_loader.exec_module(module)"}, {"intent": "Total size of memory blocks in bytes (int).", "snippet": "statistic.size"}, {"intent": "Determine whether `code` is in tableD.1 ( Characters with bidirectional property \u201c R \u201d or \u201c AL \u201d ) .", "snippet": "stringprep.in_table_d1(code)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "snippet": "random.choices(population, weights=None, cum_weights=None)"}, {"intent": "Return a list of all registered formats for unpacking .", "snippet": "shutil.get_unpack_formats()"}, {"intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "snippet": "doctest.DONT_ACCEPT_BLANKLINE"}, {"intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)"}, {"intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "snippet": "bound_arguments.arguments"}, {"intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "snippet": "base_http_request_handler.end_headers()"}, {"intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "snippet": "termios.tcflow(fd, action)"}, {"intent": "Erase from cursor to the end of the line .", "snippet": "window.clrtoeol()"}, {"intent": "Sequence of bytecodes that access an attribute by name.", "snippet": "dis.hasname"}, {"intent": "Process objects represent activity that is run in a separate process . `name` is the process name ( see name for more details ) .", "snippet": "multiprocessing.Process(name=None)"}, {"intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "snippet": "xml.etree.ElementTree.dump(elem)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) .", "snippet": "calendar.prcal(year)"}, {"intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "snippet": "tuple(iterable)"}, {"intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "snippet": "SSLContext.verify_mode"}, {"intent": "Return the string representation of a new unique identifier .", "snippet": "msilib.UuidCreate()"}, {"intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "snippet": "Path.glob(pattern)"}, {"intent": "Creates the pyvenv.cfg configuration file in the environment . With arguments `context`.", "snippet": "env_builder.create_configuration(context)"}, {"intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "snippet": "devpoll.poll()"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`.", "snippet": "ctypes.WinDLL(name)"}, {"intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "snippet": "profile.runctx(cmd, globals, locals)"}, {"intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "snippet": "importlib.find_loader(name)"}, {"intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))"}, {"intent": "Write an EOF marker to the memory BIO .", "snippet": "memory_bio.write_eof()"}, {"intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "snippet": "ctypes.util.find_msvcrt()"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "snippet": "platform.architecture(bits='')"}, {"intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "snippet": "selector_key.data"}, {"intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "snippet": "turtle.bgcolor(*args)"}, {"intent": "Return whether the process is alive .", "snippet": "process.is_alive()"}, {"intent": "Object that is greater than anything (except itself).", "snippet": "test.support.LARGEST"}, {"intent": "Packs a `list` of homogeneous items . `pack_item` is the function that is called to pack the individual item .", "snippet": "Packer.pack_list(list, pack_item)"}, {"intent": "Return list of 5-tuples describing how to turn a into b .", "snippet": "sequence_matcher.get_opcodes()"}, {"intent": "This is an implementation detail of the warnings framework; do not modify this value.", "snippet": "sys.warnoptions"}, {"intent": "Return a list containing the tty attributes for file descriptor `fd` , as follows : [ iflag , oflag , cflag , lflag , ispeed , ospeed , cc ] where cc is a list of the tty special characters ( each a string of length 1 , except the items with indices VMIN and VTIME , which are integers when these fields are defined ) .", "snippet": "termios.tcgetattr(fd)"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "snippet": "shlex.shlex(punctuation_chars=False)"}, {"intent": "The abstract base class for all I/O classes, acting on streams of bytes.", "snippet": "io.IOBase"}, {"intent": "The string to be used to terminate lines in serialized output.", "snippet": "policy.linesep"}, {"intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "snippet": "ast.NodeVisitor"}, {"intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "snippet": "struct.pack(format, v1, v2)"}, {"intent": "Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information . The return value is a ( `msg` , kwargs ) tuple which has the ( possibly modified ) versions of the arguments passed in . This implementation takes the object passed as extra to the constructor and adds it to `kwargs` using key \u2018 extra \u2019 .", "snippet": "logger_adapter.process(msg, kwargs)"}, {"intent": "When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in interactive mode.", "snippet": "sys.__interactivehook__"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(preset=None)"}, {"intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "snippet": "ast.get_docstring(node, clean=True)"}, {"intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "snippet": "dis.Bytecode(x)"}, {"intent": "The entry\u2019s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument.", "snippet": "dir_entry.path"}, {"intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "snippet": "tkinter.tix.Form"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "snippet": "HTTPConnection.request(method, url, body=None)"}, {"intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "snippet": "Unpacker.unpack_double()"}, {"intent": "Test that `first` and `second` are equal .", "snippet": "test_case.assertEqual(first, second)"}, {"intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "snippet": "loop.connect_write_pipe(protocol_factory, pipe)"}, {"intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing .", "snippet": "executor.shutdown()"}, {"intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)"}, {"intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "snippet": "@functools.lru_cache()"}, {"intent": "Perform a statvfs ( ) system call on the given `path` .", "snippet": "os.statvfs(path)"}, {"intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "snippet": "ssl.MemoryBIO"}, {"intent": "Writes the element tree to a `file` , as XML . `xml_declaration` controls if an XML declaration should be added to the file .", "snippet": "element_tree.write(file, xml_declaration=None)"}, {"intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "snippet": "email.headerregistry.ParameterizedMIMEHeader"}, {"intent": "A list of the path\u2019s file extensions:", "snippet": "PurePath.suffixes"}, {"intent": "Using the file after calling flush ( ) or close ( ) on the mbox instance may yield unpredictable results or raise an exception . With arguments `key`.", "snippet": "mbox.get_file(key)"}, {"intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "snippet": "fnmatch.translate(pattern)"}, {"intent": "The string representation in dotted decimal notation.", "snippet": "i_pv4_address.exploded"}, {"intent": "Return output ( stdout and stderr ) of executing `cmd` in a shell .", "snippet": "subprocess.getoutput(cmd)"}, {"intent": "Real size of the file.", "snippet": "stat_result.st_rsize"}, {"intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "snippet": "string.capwords(s)"}, {"intent": "No child processes", "snippet": "errno.ECHILD"}, {"intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "snippet": "loader.module_repr(module)"}, {"intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "snippet": "snapshot.filter_traces(filters)"}, {"intent": "Creates a user-defined aggregate function . The aggregate class must implement a step method , which accepts the number of parameters `num_params` ( if num_params is -1 , the function may take any number of arguments ) , and a finalize method which will return the final result of the aggregate . With arguments `name`, `aggregate_class`.", "snippet": "connection.create_aggregate(name, num_params, aggregate_class)"}, {"intent": "If `flag` is True , cursor is left where it is on update , instead of being at \u201c cursor position. \u201d This reduces cursor movement where possible .", "snippet": "window.leaveok(flag)"}, {"intent": "logical_invert ( ) is a logical operation . With arguments `context`.", "snippet": "decimal.logical_invert(context=None)"}, {"intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "snippet": "time.asctime()"}, {"intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "snippet": "locale.D_FMT"}, {"intent": "The above constants are extensions and not present if they are not defined by the C library.", "snippet": "os.O_ASYNC"}, {"intent": "Send a STARTTLS command .", "snippet": "IMAP4.starttls()"}, {"intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "snippet": "turtle.pen(**pendict)"}, {"intent": "(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size.", "snippet": "text_wrapper.tabsize"}, {"intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "snippet": "curses.ascii.unctrl(c)"}, {"intent": "Get the \u201c inheritable \u201d flag of the specified file descriptor ( a boolean ) . With arguments `fd`.", "snippet": "os.get_inheritable(fd)"}, {"intent": "Return True if the Python interpreter is shutting down , False otherwise .", "snippet": "sys.is_finalizing()"}, {"intent": "Modify a registered file descriptor . With arguments `fd`, `eventmask`.", "snippet": "epoll.modify(fd, eventmask)"}, {"intent": "Set class that keeps weak references to its `elements` .", "snippet": "weakref.WeakSet(elements)"}, {"intent": "If `item` is specified , sets the focus item to item .", "snippet": "widget.focus()"}, {"intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "snippet": "joinable_queue.poll(timeout)"}, {"intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)"}, {"intent": "Examine the set of signals that are pending for delivery to the calling thread ( i.e. , the signals which have been raised while blocked ) .", "snippet": "signal.sigpending()"}, {"intent": "A dictionary mapping string descriptions to their error codes.", "snippet": "xml.parsers.expat.errors.messages"}, {"intent": "Return a list of all variables \u2019 values in the context object .", "snippet": "context.values()"}, {"intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "snippet": "winsound.Beep(frequency, duration)"}, {"intent": "A positive integer specifying the number of elements in the array.", "snippet": "array._length_"}, {"intent": "Set title of turtle window to `titlestring` .", "snippet": "turtle.title(titlestring)"}, {"intent": "Set angle measurement units , i.e . With arguments `fullcircle`.", "snippet": "turtle.degrees(fullcircle=360.0)"}, {"intent": "A subclass of the email.message module \u2019 s Message . If `message` is omitted , the new instance is created in a default , empty state .", "snippet": "mailbox.Message(message=None)"}, {"intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "snippet": "connection.executemany(sql, parameters)"}, {"intent": "Remove `callback` from the callbacks list .", "snippet": "future.remove_done_callback(callback)"}, {"intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "snippet": "doctest.DocTestParser"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "snippet": "turtle.shapetransform(t11=None, t22=None)"}, {"intent": "This is the base class for all registered handlers \u2014 and handles only the simple mechanics of registration.", "snippet": "urllib.request.BaseHandler"}, {"intent": "Return a list of ( header , value ) tuples .", "snippet": "HTTPResponse.getheaders()"}, {"intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "snippet": "doctest.ELLIPSIS"}, {"intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "Queue.get(block=True)"}, {"intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "snippet": "cursor.fetchmany(size=cursor.arraysize)"}, {"intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "snippet": "aifc.getparams()"}, {"intent": "Set the environ attribute to a fully-populated WSGI environment .", "snippet": "base_handler.setup_environ()"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "snippet": "compileall.compile_dir(dir)"}, {"intent": "Write coverage results . `coverdir` specifies the directory into which the coverage result files will be output .", "snippet": "coverage_results.write_results(coverdir=None)"}, {"intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "snippet": "socket.inet_pton(address_family, ip_string)"}, {"intent": "Stop the child process .", "snippet": "process.terminate()"}, {"intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "snippet": "email.iterators.body_line_iterator(msg, decode=False)"}, {"intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "snippet": "test_case.assertRegex(text, regex, msg=None)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document .", "snippet": "xml.sax.saxutils.XMLGenerator()"}, {"intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str .", "snippet": "urllib.parse.unquote_plus(string)"}, {"intent": "Wait for events . `timeout` in seconds ( float )", "snippet": "epoll.poll(timeout=-1)"}, {"intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "snippet": "os.getloadavg()"}, {"intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "snippet": "platform.platform(aliased=0, terse=0)"}, {"intent": "The scheduler class defines a generic interface to scheduling events . It needs two functions to actually deal with the \u201c outside world \u201d \u2014 `timefunc` should be callable without arguments , and return a number ( the \u201c time \u201d , in any units whatsoever ) .", "snippet": "sched.scheduler(timefunc=time.monotonic)"}, {"intent": "Test that an `exception` is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises ( ) .", "snippet": "test_case.assertRaises(exception)"}, {"intent": "By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.", "snippet": "doctest.DONT_ACCEPT_TRUE_FOR_1"}, {"intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "snippet": "pdb.runcall(function, *args, **kwds)"}, {"intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "snippet": "ur_lopener.retrieve(url, reporthook=None)"}, {"intent": "ElementTree wrapper class .", "snippet": "xml.etree.ElementTree.ElementTree()"}, {"intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "snippet": "turtle.circle(radius, steps=None)"}, {"intent": "A bounded semaphore object .", "snippet": "asyncio.BoundedSemaphore()"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "snippet": "platform.libc_ver(lib='')"}, {"intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "snippet": "devpoll.register(fd)"}, {"intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "snippet": "incremental_encoder.encode(object)"}, {"intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "snippet": "math.remainder(x, y)"}, {"intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "snippet": "calendar.yeardatescalendar(year, width=3)"}, {"intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "snippet": "oss_audio_device.post()"}, {"intent": "An abstraction of a pipeline.", "snippet": "pipes.Template"}, {"intent": "Return `x` * ( 2**i ) . With arguments `i`.", "snippet": "math.ldexp(x, i)"}, {"intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "snippet": "bisect.insort_right(a, x)"}, {"intent": "Dump the tracebacks of all threads into `file` .", "snippet": "faulthandler.dump_traceback()"}, {"intent": "Return a new , equivalent , pipeline template .", "snippet": "Template.clone()"}, {"intent": "These classes are pre-defined using the mix-in classes.", "snippet": "socketserver.ForkingTCPServer"}, {"intent": "Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator.", "snippet": "csv.QUOTE_MINIMAL"}, {"intent": "Save the history list to a readline history file , overwriting any existing file .", "snippet": "readline.write_history_file()"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `unsafe`.", "snippet": "unittest.mock.Mock(**kwargs, unsafe=False)"}, {"intent": "The name of the Python codec used to convert the input_charset to Unicode.", "snippet": "charset.input_codec"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "snippet": "test_case.assertAlmostEqual(first, second)"}, {"intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "snippet": "base_server.shutdown()"}, {"intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds`", "snippet": "types.prepare_class(name, kwds=None)"}, {"intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "snippet": "NodeList.item(i)"}, {"intent": "Update the set, removing elements found in others.", "snippet": "set -= other | ..."}, {"intent": "Exception raised on compression and decompression errors.", "snippet": "zlib.error"}, {"intent": "Return the Canvas of this TurtleScreen .", "snippet": "turtle.getcanvas()"}, {"intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "snippet": "zlib.crc32(data)"}, {"intent": "Base class for all other configparser exceptions.", "snippet": "configparser.Error"}, {"intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "snippet": "os.preadv(fd, buffers, offset)"}, {"intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)"}, {"intent": "Return the total number of headers , including duplicates .", "snippet": "message.__len__()"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `errors` is passed straight through to the append ( ) method .", "snippet": "email.header.Header(errors='strict')"}, {"intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "snippet": "difflib.get_close_matches(word, possibilities, n=3)"}, {"intent": "Sequence of operation names, indexable using the bytecode.", "snippet": "dis.opname"}, {"intent": "The type of user-defined functions and functions created by lambda  expressions.", "snippet": "types.FunctionType"}, {"intent": "Generic element structure builder . `element_factory` , when given , must be a callable accepting two positional arguments : a tag and a dict of attributes .", "snippet": "xml.etree.ElementTree.TreeBuilder(element_factory=None)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "snippet": "random.choices(population, weights=None)"}, {"intent": "Actions that always take a type (i.e.", "snippet": "Option.ALWAYS_TYPED_ACTIONS"}, {"intent": "Initialize the random number generator .", "snippet": "random.seed()"}, {"intent": "Something other than whitespace occurred after the document element.", "snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"}, {"intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "snippet": "email.contentmanager.get_content(msg)"}, {"intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "snippet": "writer.send_hor_rule(*args, **kw)"}, {"intent": "If True, any defects encountered will be raised as errors.", "snippet": "policy.raise_on_defect"}, {"intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "snippet": "writer.new_margin(margin, level)"}, {"intent": "Update the set, keeping only elements found in either set, but not in both.", "snippet": "set ^= other"}, {"intent": "Ensure all logging output has been flushed .", "snippet": "queue_listener.flush()"}, {"intent": "Make this path a symbolic link to `target` .", "snippet": "Path.symlink_to(target)"}, {"intent": "Decorator for only running the test if HAVE_DOCSTRINGS.", "snippet": "@test.support.requires_docstrings"}, {"intent": "Address already in use", "snippet": "errno.EADDRINUSE"}, {"intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "snippet": "set < other"}, {"intent": "The model is optional: it can appear once or not at all, as for A?.", "snippet": "xml.parsers.expat.model.XML_CQUANT_OPT"}, {"intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "snippet": "bisect.bisect_left(a, x)"}, {"intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "snippet": "loop.sock_sendfile(sock, file)"}, {"intent": "User defined flags for file.", "snippet": "stat_result.st_flags"}, {"intent": "Return a new empty module object called `name` .", "snippet": "imp.new_module(name)"}, {"intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "snippet": "mock.attach_mock(mock, attribute)"}, {"intent": "Cartesian product of input iterables . With arguments `*iterables`.", "snippet": "itertools.product(*iterables)"}, {"intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "snippet": "ipaddress.get_mixed_type_key(obj)"}, {"intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) .", "snippet": "lock.acquire()"}, {"intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "snippet": "loop.time()"}, {"intent": "Server objects are asynchronous context managers.", "snippet": "asyncio.Server"}, {"intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "snippet": "Document.getElementsByTagName(tagName)"}, {"intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "snippet": "os.mknod(path)"}, {"intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "snippet": "str.center(width, fillchar)"}, {"intent": "Return the base-2 logarithm of `x` .", "snippet": "math.log2(x)"}, {"intent": "Record that the package named `pkg_name` can be found in the specified `path` .", "snippet": "modulefinder.AddPackagePath(pkg_name, path)"}, {"intent": "The path the finder will search in.", "snippet": "file_finder.path"}, {"intent": "Set the current process \u2019 group id . With arguments `gid`.", "snippet": "os.setgid(gid)"}, {"intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "snippet": "Morsel.setdefault(key)"}, {"intent": "An integer telling you how many times the mock object has been called:", "snippet": "mock.call_count"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')"}, {"intent": "Checkpoint mailbox on server .", "snippet": "IMAP4.check()"}, {"intent": "Represent an `address` as 4 packed bytes in network ( big-endian ) order .", "snippet": "ipaddress.v4_int_to_packed(address)"}, {"intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) .", "snippet": "prototype(func_spec)"}, {"intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "snippet": "getopt.getopt(args)"}, {"intent": "A mapping of ContextVars to their values.", "snippet": "contextvars.Context"}, {"intent": "Override to implement platform-specific file transmission .", "snippet": "base_handler.sendfile()"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script .", "snippet": "modulefinder.ModuleFinder()"}, {"intent": "Close the cursor now ( rather than whenever __del__ is called ) .", "snippet": "cursor.close()"}, {"intent": "A Signature object represents the call signature of a function and its return annotation . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "snippet": "inspect.Signature(return_annotation=Signature.empty)"}, {"intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "snippet": "locale.format(format, val)"}, {"intent": "The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.", "snippet": "tkinter.tix.StdButtonBox"}, {"intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "snippet": "ipaddress.summarize_address_range(first, last)"}, {"intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` . With arguments `errors`.", "snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')"}, {"intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "snippet": "test.support.temp_dir(quiet=False)"}, {"intent": "A string containing the format (in struct module style) for each element in the view.", "snippet": "memoryview.format"}, {"intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "snippet": "@test.support.bigmemtest(size, memuse)"}, {"intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "snippet": "text_calendar.formatmonth(theyear, themonth)"}, {"intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "snippet": "snapshot.statistics(key_type: str)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)"}, {"intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "snippet": "asyncio.BufferedProtocol(BaseProtocol)"}, {"intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "snippet": "output_checker.check_output(want, got, optionflags)"}, {"intent": "Registers a type-specific method called by assertEqual ( ) to check if two objects of exactly the same `typeobj` ( not subclasses ) compare equal . `function` must take two positional arguments and a third msg=None keyword argument just as assertEqual ( ) does .", "snippet": "test_case.addTypeEqualityFunc(typeobj, function)"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "snippet": "cmath.isclose(a, b)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, allow_nan=True)"}, {"intent": "Overwrite the window on top of `destwin` . `sminrow` and `smincol` are the upper-left coordinates of the source window , the other variables mark a rectangle in the destination window . With arguments `dminrow`, `dmincol`, `dmaxrow`.", "snippet": "window.overwrite(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow)"}, {"intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "snippet": "Repr.repr_TYPE(obj, level)"}, {"intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "snippet": "asyncio.gather(*aws, return_exceptions=False)"}, {"intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "snippet": "IMAP4.partial(message_num, message_part, start, length)"}, {"intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "snippet": "window.immedok(flag)"}, {"intent": "Set the `state` of the encoder to state .", "snippet": "incremental_encoder.setstate(state)"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `newline` controls how line endings are handled .", "snippet": "io.TextIOWrapper(buffer, newline=None)"}, {"intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "snippet": "turtle.mainloop()"}, {"intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "snippet": "Pattern.fullmatch(string)"}, {"intent": "Add `sequence` to the list of sequences that include this message .", "snippet": "mh_message.add_sequence(sequence)"}, {"intent": "A enumeration of possible methods the interpreter can use to determine whether a bytecode file is up to date with a source file.", "snippet": "py_compile.PycInvalidationMode"}, {"intent": "Return the size of the struct ( and hence of the bytes object produced by pack ( `format` , ... ) ) corresponding to the format string format .", "snippet": "struct.calcsize(format)"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value . Subject ) pass in the name of the field in `header_name` .", "snippet": "email.header.Header(s=None, header_name=None)"}, {"intent": "The size of the resulting HMAC digest in bytes.", "snippet": "HMAC.digest_size"}, {"intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "snippet": "FileCookieJar.save(filename=None)"}, {"intent": "Return the value of a single variable `name` .", "snippet": "sysconfig.get_config_var(name)"}, {"intent": "A tuple of line, column numbers, specifying where the error occurred.", "snippet": "parse_error.position"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "snippet": "bytes.rsplit()"}, {"intent": "Create a new element in the current theme , of the given `etype` which is expected to be either \u201c image \u201d , \u201c from \u201d or \u201c vsapi \u201d . With arguments `elementname`, `*args`, `**kw`.", "snippet": "style.element_create(elementname, etype, *args, **kw)"}, {"intent": "An exception inheriting OSError and ValueError that is raised when an unsupported operation is called on a stream.", "snippet": "io.UnsupportedOperation"}, {"intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "snippet": "Pattern.sub(repl, string)"}, {"intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "snippet": "window.echochar(ch, attr)"}, {"intent": "Encode path-like `filename` to the filesystem encoding with 'surrogateescape ' error handler , or 'strict ' on Windows ; return bytes unchanged .", "snippet": "os.fsencode(filename)"}, {"intent": "The maximum address space which may be locked in memory.", "snippet": "resource.RLIMIT_MEMLOCK"}, {"intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "snippet": "test.support.optim_args_from_interpreter_flags()"}, {"intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes .", "snippet": "concurrent.futures.ProcessPoolExecutor()"}, {"intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "snippet": "ctypes.set_last_error(value)"}, {"intent": "Return the running event loop in the current OS thread .", "snippet": "asyncio.get_running_loop()"}, {"intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "snippet": "str.replace(old, new, count)"}, {"intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "snippet": "socket.getnameinfo(sockaddr, flags)"}, {"intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "snippet": "NNTP.newnews(group, date)"}, {"intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "snippet": "os.path.splitdrive(path)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "snippet": "tarfile.TarFile(mode='r')"}, {"intent": "Raised when a payload is added to a Message object using add_payload(), but the payload is already a scalar and the message\u2019s Content-Type main type is not either multipart or missing.", "snippet": "email.errors.MultipartConversionError"}, {"intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "snippet": "ArgumentParser.parse_args()"}, {"intent": "Parse XML data reading from the object `file` .", "snippet": "xmlparser.ParseFile(file)"}, {"intent": "The subnets that join to make the current network definition , depending on the argument values . `new_prefix` is the desired new prefix of the subnets ; it must be larger than our prefix .", "snippet": "i_pv4_network.subnets(new_prefix=None)"}, {"intent": "There was an error parsing a text declaration in an external entity.", "snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs)"}, {"intent": "An abstract base class for implementing source (and optionally bytecode) file loading.", "snippet": "importlib.abc.SourceLoader"}, {"intent": "Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string .", "snippet": "message.as_string(unixfrom=False)"}, {"intent": "Logs a message with `level` level on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "logging.log(level, msg, *args, **kwargs)"}, {"intent": "Read from a file descriptor `fd` into a number of mutable bytes-like objects `buffers` .", "snippet": "os.readv(fd, buffers)"}, {"intent": "Mask for permissions for others (not in group).", "snippet": "stat.S_IRWXO"}, {"intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "snippet": "random.gauss(mu, sigma)"}, {"intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "snippet": "random.randrange(stop)"}, {"intent": "Get information about arguments passed into a particular `frame` .", "snippet": "inspect.getargvalues(frame)"}, {"intent": "Applies the logical operation and between each operand \u2019 s digits . With arguments `x`, `y`.", "snippet": "context.logical_and(x, y)"}, {"intent": "Flush any buffered output or device control events .", "snippet": "writer.flush()"}, {"intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "snippet": "sys_log_handler.mapPriority(levelname)"}, {"intent": "Set additional `styles` .", "snippet": "writer.new_styles(styles)"}, {"intent": "The maximum size (in bytes) of socket buffer usage for this user.", "snippet": "resource.RLIMIT_SBSIZE"}, {"intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "snippet": "difflib.Differ()"}, {"intent": "Interaction function , emulates a very dumb Telnet client .", "snippet": "Telnet.interact()"}, {"intent": "Return the user \u2019 s current line kill character as a one-byte bytes object .", "snippet": "curses.killchar()"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "snippet": "trace.Trace(infile=None)"}, {"intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "snippet": "urllib.request.ProxyHandler(proxies=None)"}, {"intent": "File too large", "snippet": "errno.EFBIG"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "snippet": "loop.create_connection(protocol_factory, family=0)"}, {"intent": "Reads `path` as a binary file and returns the bytes from it .", "snippet": "file_loader.get_data(path)"}, {"intent": "Create an instance of the FileInput class .", "snippet": "fileinput.input()"}, {"intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "snippet": "context.scaleb(x, y)"}, {"intent": "Execute a readline initialization file .", "snippet": "readline.read_init_file()"}, {"intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)"}, {"intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "snippet": "ZipFile.extractall(path=None)"}, {"intent": "Set this to configure the value returned by calling the mock:", "snippet": "mock.return_value"}, {"intent": "Set the first sequence to be compared . With arguments `a`.", "snippet": "sequence_matcher.set_seq1(a)"}, {"intent": "Returns true if the node has any attributes .", "snippet": "Node.hasAttributes()"}, {"intent": "Returns a string identifying the Python implementation SCM revision .", "snippet": "platform.python_revision()"}, {"intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "snippet": "itertools.starmap(function, iterable)"}, {"intent": "Decorator to give another decorator the no_type_check() effect.", "snippet": "@typing.no_type_check_decorator"}, {"intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "snippet": "str.splitlines(keepends)"}, {"intent": "Return message digest ( unique id ) list .", "snippet": "POP3.uidl()"}, {"intent": "Load a readline history file , and append it to the history list .", "snippet": "readline.read_history_file()"}, {"intent": "Return an upper bound on ratio ( ) very quickly .", "snippet": "sequence_matcher.real_quick_ratio()"}, {"intent": "An undeclared prefix was found when namespace processing was enabled.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"}, {"intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "snippet": "types.resolve_bases(bases)"}, {"intent": "Returns the remainder from integer division . With arguments `x`, `y`.", "snippet": "context.remainder(x, y)"}, {"intent": "Return the number of occurrences of `b` in `a` .", "snippet": "operator.countOf(a, b)"}, {"intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "snippet": "config_parser.read_dict(dictionary)"}, {"intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "snippet": "time.thread_time()"}, {"intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')"}, {"intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "snippet": "unittest.mock.mock_open(read_data=None)"}, {"intent": "Return a random text string , in hexadecimal .", "snippet": "secrets.token_hex()"}, {"intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "snippet": "asyncio.PriorityQueue"}, {"intent": "Current column number in the parser input.", "snippet": "xmlparser.CurrentColumnNumber"}, {"intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "snippet": "io.StringIO(initial_value='')"}, {"intent": "The TList widget can be used to display data in a tabular format.", "snippet": "tkinter.tix.TList"}, {"intent": "Add all `records` to the `table` named table in `database` .", "snippet": "msilib.add_data(database, table, records)"}, {"intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' .", "snippet": "socket.makefile(mode='r')"}, {"intent": "Bytes version of environ: a mapping object representing the environment as byte strings.", "snippet": "os.environb"}, {"intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "snippet": "ctypes.WinError(descr=None)"}, {"intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "snippet": "bdb.canonic(filename)"}, {"intent": "This class can be used to generate HTML calendars .", "snippet": "calendar.HTMLCalendar()"}, {"intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "snippet": "os.get_handle_inheritable(handle)"}, {"intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "snippet": "str.index(sub, start, end)"}, {"intent": "Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes).", "snippet": "xml.dom.NoModificationAllowedErr"}, {"intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "snippet": "logging.handlers.QueueHandler(queue)"}, {"intent": "If `flag` is False , curses no longer considers using the hardware insert/delete character feature of the terminal ; if flag is True , use of character insertion and deletion is enabled .", "snippet": "window.idcok(flag)"}, {"intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "snippet": "text_io_base.seek(offset, whence=SEEK_SET)"}, {"intent": "Define match test with regular expression `patterns` .", "snippet": "test.support.set_match_tests(patterns)"}, {"intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "snippet": "traceback.extract_tb(tb)"}, {"intent": "Message too long", "snippet": "errno.EMSGSIZE"}, {"intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "snippet": "Path.is_dir()"}, {"intent": "Update `environ` with trivial defaults for testing purposes .", "snippet": "wsgiref.util.setup_testing_defaults(environ)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)"}, {"intent": "All changes to Maildir mailboxes are immediately applied , so this method does nothing .", "snippet": "maildir.flush()"}, {"intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "snippet": "policy.mangle_from_"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "snippet": "bz2.BZ2File(filename)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "snippet": "platform.libc_ver(chunksize=16384)"}, {"intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "snippet": "list.sort(reverse=False)"}, {"intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "snippet": "heapq.merge(*iterables)"}, {"intent": "Overlay the window on top of `destwin` . `sminrow` and `smincol` are the upper-left coordinates of the source window , and the other variables mark a rectangle in the destination window . With arguments `dminrow`, `dmincol`, `dmaxrow`.", "snippet": "window.overlay(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow)"}, {"intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "snippet": "element.insert(index, subelement)"}, {"intent": "Called for any characters in the XML document for which no applicable handler has been specified . With arguments `data`.", "snippet": "xmlparser.DefaultHandler(data)"}, {"intent": "Set the \u201c From \u201d line to `from_` , which should be specified without a leading \u201c From \u201d or trailing newline .", "snippet": "mbox_message.set_from(from_)"}, {"intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "snippet": "html_calendar.formatyear(theyear)"}, {"intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "snippet": "dataclasses.field(compare=True)"}, {"intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "snippet": "@test.support.requires_mac_version(*min_version)"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . The maximum line length can be specified explicitly via `maxlinelen` .", "snippet": "email.header.Header(maxlinelen=None)"}, {"intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "snippet": "contextvars.ContextVar(name, default)"}, {"intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "snippet": "str.capitalize()"}, {"intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "snippet": "cursor.rowcount"}, {"intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "snippet": "sqlite3.register_converter(typename, callable)"}, {"intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "snippet": "dis.findlabels(code)"}, {"intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "snippet": "test_case.assertCountEqual(first, second)"}, {"intent": "Create a new theme . It is an error if `themename` already exists .", "snippet": "style.theme_create(themename)"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `international` is true ( which is not the default ) , the international currency symbol is used .", "snippet": "locale.currency(val, symbol=True, international=False)"}, {"intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "snippet": "itertools.count()"}, {"intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "snippet": "stringprep.in_table_c8(code)"}, {"intent": "This class is parallel to BytesParser , but handles string input . With arguments `_class`.", "snippet": "email.parser.Parser(_class=None)"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `data`.", "snippet": "select.kevent(ident, filter=KQ_FILTER_READ, data=0)"}, {"intent": "Run command with arguments and return its output . With arguments `args`.", "snippet": "subprocess.check_output(args)"}, {"intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "snippet": "Cookie.rfc2109"}, {"intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "snippet": "inspect.getargspec(func)"}, {"intent": "Same as terminate ( ) but using the SIGKILL signal on Unix .", "snippet": "process.kill()"}, {"intent": "A namedtuple that holds a brief summary of a module \u2019 s info . With arguments `module_finder`, `name`, `ispkg`.", "snippet": "pkgutil.ModuleInfo(module_finder, name, ispkg)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)"}, {"intent": "The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.", "snippet": "example.exc_msg"}, {"intent": "Accessing a corrupted shared library", "snippet": "errno.ELIBBAD"}, {"intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "snippet": "wsgiref.headers.Headers(headers)"}, {"intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "snippet": "gdbm.firstkey()"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "snippet": "os.sendfile(out, in, offset, count)"}, {"intent": "Complete the parsing of all previously fed data and return the root message object .", "snippet": "bytes_feed_parser.close()"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "snippet": "lzma.LZMACompressor(check=-1)"}, {"intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "snippet": "gc.DEBUG_UNCOLLECTABLE"}, {"intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "snippet": "gettext.ngettext(singular, plural, n)"}, {"intent": "Registers the XML-RPC introspection functions system.listMethods , system.methodHelp and system.methodSignature .", "snippet": "SimpleXMLRPCServer.register_introspection_functions()"}, {"intent": "The length of the attribute list.", "snippet": "NamedNodeMap.length"}, {"intent": "The class to which a class instance belongs.", "snippet": "instance.__class__"}, {"intent": "A real dictionary used to store the contents of the UserDict class.", "snippet": "user_dict.data"}, {"intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "snippet": "stringprep.in_table_c6(code)"}, {"intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "snippet": "str.partition(sep)"}, {"intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "snippet": "email.message.EmailMessage()"}, {"intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "snippet": "curses.wrapper(func)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "snippet": "json.load(fp, **kw, cls=None, object_hook=None)"}, {"intent": "Return whether the call completed without raising an exception .", "snippet": "async_result.successful()"}, {"intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "snippet": "random.shuffle(x, random)"}, {"intent": "Bad address", "snippet": "errno.EFAULT"}, {"intent": "A context manager that replaces sys.stderr with sys.__stderr__ .", "snippet": "test.support.disable_faulthandler()"}, {"intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "snippet": "Packer.pack_farray(n, array, pack_item)"}, {"intent": "Number of memory blocks in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot.", "snippet": "statistic_diff.count"}, {"intent": "Writes a sentinel to the queue to tell the listener to quit .", "snippet": "queue_listener.enqueue_sentinel()"}, {"intent": "Base class which can be inherited by SAX parsers.", "snippet": "xml.sax.xmlreader.XMLReader"}, {"intent": "Convenience function to run a read-eval-print loop .", "snippet": "code.interact()"}, {"intent": "The CSS class for a weekday occurring in the previous or coming month.", "snippet": "html_calendar.cssclass_noday"}, {"intent": "Return a list of all the values for the field named `name` .", "snippet": "message.get_all(name)"}, {"intent": "A TLSVersion enum member representing the highest supported TLS version.", "snippet": "SSLContext.maximum_version"}, {"intent": "Try to switch to UTF-8 mode .", "snippet": "POP3.utf8()"}, {"intent": "Decorator for the minimum version when running test on FreeBSD . With arguments `*min_version`.", "snippet": "@test.support.requires_freebsd_version(*min_version)"}, {"intent": "Delete the breakpoint from the list associated to a file/line .", "snippet": "breakpoint.deleteMe()"}, {"intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "snippet": "queue_listener.__init__()"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, key='view')"}, {"intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "snippet": "date.__str__()"}, {"intent": "Clear the current history .", "snippet": "readline.clear_history()"}, {"intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "snippet": "oss_mixer_device.set(control, (left, right))"}, {"intent": "Return the inverse hyperbolic cosine of `x` .", "snippet": "cmath.acosh(x)"}, {"intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "snippet": "csv.excel"}, {"intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "snippet": "colorsys.rgb_to_yiq(r, g, b)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "snippet": "test.support.import_fresh_module(name)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "snippet": "ArgumentParser.add_argument(name or flags...)"}, {"intent": "Level 3 halted", "snippet": "errno.EL3HLT"}, {"intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "snippet": "mock.call_args_list"}, {"intent": "Subclass of SubprocessError, raised when a timeout expires while waiting for a child process.", "snippet": "subprocess.TimeoutExpired"}, {"intent": "Return true if the `object` is a bound method written in Python .", "snippet": "inspect.ismethod(object)"}, {"intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "snippet": "io.BufferedWriter(raw)"}, {"intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "snippet": "gnu_translations.gettext(message)"}, {"intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "snippet": "header_registry.map_to_type(self, name, cls)"}, {"intent": "Returns the current unpack position in the data buffer .", "snippet": "Unpacker.get_position()"}, {"intent": "A dictionary containing key-value pairs of an associated pax extended header.", "snippet": "TarInfo.pax_headers"}, {"intent": "Return the number of the first line in the block this table represents .", "snippet": "symbol_table.get_lineno()"}, {"intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "snippet": "sysconfig.get_paths(scheme)"}, {"intent": "Convert angle `x` from radians to degrees .", "snippet": "math.degrees(x)"}, {"intent": "A context manager to force import to return a new module reference . With arguments `*module_names`.", "snippet": "test.support.CleanImport(*module_names)"}, {"intent": "Create an object to `trace` execution of a single statement or expression .", "snippet": "trace.Trace()"}, {"intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)"}, {"intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "snippet": "math.hypot(x, y)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "snippet": "bytes.rsplit(maxsplit=-1)"}, {"intent": "Return True or False , depending on whether the programmer can change the colors displayed by the terminal .", "snippet": "curses.can_change_color()"}, {"intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "snippet": "test.support.PIPE_MAX_SIZE"}, {"intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "snippet": "asyncio.wait_for(aw, timeout, loop=None)"}, {"intent": "Add a hard line break if one does not already exist .", "snippet": "formatter.add_line_break()"}, {"intent": "Put the device into non-blocking mode .", "snippet": "oss_audio_device.nonblock()"}, {"intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "snippet": "license"}, {"intent": "Called on listening channels ( passive openers ) when a connection can be established with a new remote endpoint that has issued a connect ( ) call for the local endpoint .", "snippet": "dispatcher.handle_accept()"}, {"intent": "Load the module specified by `fullname` .", "snippet": "zipimporter.load_module(fullname)"}, {"intent": "This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped.", "snippet": "os.WUNTRACED"}, {"intent": "Move an existing `key` to either end of an ordered dictionary .", "snippet": "ordered_dict.move_to_end(key)"}, {"intent": "The unformatted error message.", "snippet": "json_encoder.msg"}, {"intent": "Round towards Infinity.", "snippet": "decimal.ROUND_CEILING"}, {"intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "snippet": "curses.color_content(color_number)"}, {"intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "snippet": "bytes_parser.parse(fp)"}, {"intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "snippet": "wsgiref.util.request_uri(environ)"}, {"intent": "A subclass of SSLError raised when trying to read or write and the SSL connection has been closed cleanly.", "snippet": "ssl.SSLZeroReturnError"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc .", "snippet": "difflib.diff_bytes(dfunc, a, b)"}, {"intent": "The string of characters that are recognized as comment beginners.", "snippet": "shlex.commenters"}, {"intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "snippet": "winreg.EnumKey(key, index)"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "snippet": "os.walk(top)"}, {"intent": "Assign a Python function or another callable to this attribute.", "snippet": "_func_ptr.errcheck"}, {"intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "snippet": "sorted(iterable, key=None)"}, {"intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "snippet": "cmath.nan"}, {"intent": "Request the Task to be cancelled .", "snippet": "task.cancel()"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "snippet": "urllib.request.Request(url, data=None, method=None)"}, {"intent": "A stream implementation using an in-memory bytes buffer .", "snippet": "io.BytesIO()"}, {"intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "snippet": "collections.namedtuple(typename, field_names)"}, {"intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "snippet": "loop.call_later(delay, callback, *args)"}, {"intent": "Reason phrase returned by server.", "snippet": "HTTPResponse.reason"}, {"intent": "A list of functions performing the individual tests.", "snippet": "imghdr.tests"}, {"intent": "Send a QUIT command and close the connection .", "snippet": "NNTP.quit()"}, {"intent": "Instances are replaced with an appropriate value for Enum members.", "snippet": "enum.auto"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "snippet": "io.FileIO(name, closefd=True)"}, {"intent": "Get line `lineno` from file named `filename` . If a file named filename is not found , the function will look for it in the module search path , sys.path , after first checking for a PEP 302 __loader__ in `module_globals` , in case the module was imported from a zipfile or other non-filesystem import source .", "snippet": "linecache.getline(filename, lineno, module_globals=None)"}, {"intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "snippet": "asyncio.run(coro, debug=False)"}, {"intent": "Send an object to the other end of the connection which should be read using recv ( ) . With arguments `obj`.", "snippet": "joinable_queue.send(obj)"}, {"intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "snippet": "sys.builtin_module_names"}, {"intent": "Called for all entity declarations . `is_parameter_entity` will be true if the entity is a parameter entity or false for general entities ( most applications only need to be concerned with general entities ) . For parameter and internal entities , `value` will be a string giving the declared contents of the entity ; this will be None for external entities . The `notationName` parameter will be None for parsed entities , and the name of the notation for unparsed entities . With arguments `entityName`, `base`, `systemId`, `publicId`.", "snippet": "xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)"}, {"intent": "Add `x` to the left side of the deque .", "snippet": "deque.appendleft(x)"}, {"intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "snippet": "socket.ntohs(x)"}, {"intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "snippet": "sys.dont_write_bytecode"}, {"intent": "A list of CSS classes used for weekday names in the header row.", "snippet": "html_calendar.cssclasses_weekday_head"}, {"intent": "Pareto distribution . `alpha` is the shape parameter .", "snippet": "random.paretovariate(alpha)"}, {"intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "snippet": "SummaryInformation.SetProperty(field, value)"}, {"intent": "Return a dictionary representing the current global symbol table .", "snippet": "globals()"}, {"intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "snippet": "struct.iter_unpack(buffer)"}, {"intent": "Subtypes Real and adds numerator and denominator properties, which should be in lowest terms.", "snippet": "numbers.Rational"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr)"}, {"intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "snippet": "date.weekday()"}, {"intent": "Return a list of all the message \u2019 s field values .", "snippet": "message.values()"}, {"intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive . If `file` is omitted or None , the output goes to sys.stderr ; otherwise it should be an open file or file-like object to receive the output .", "snippet": "traceback.print_tb(tb, file=None)"}, {"intent": "The name of the class, function, method, descriptor, or generator instance.", "snippet": "definition.__name__"}, {"intent": "Finish the compression process , returning a bytes object containing any data stored in the compressor \u2019 s internal buffers .", "snippet": "lzma_compressor.flush()"}, {"intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "snippet": "i_pv4_address.reverse_pointer"}, {"intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "snippet": "codeop.compile_command(source)"}, {"intent": "Is raised for the limitations that are typical for stream-like TarFile objects.", "snippet": "tarfile.StreamError"}, {"intent": "The column corresponding to pos.", "snippet": "json_encoder.colno"}, {"intent": "Assume authentication as `user` .", "snippet": "IMAP4.proxyauth(user)"}, {"intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "snippet": "cgitb.text(info, context=5)"}, {"intent": "Module : email.mime.base `_maintype` is the Content-Type major type ( e.g . text or image ) , and `_subtype` is the Content-Type minor type ( e.g . With arguments `**_params`.", "snippet": "email.mime.base.MIMEBase(_maintype, _subtype, **_params)"}, {"intent": "Characters in quotes that will interpret escape characters defined in escape.", "snippet": "shlex.escapedquotes"}, {"intent": "Like gmtime ( ) but converts to local time .", "snippet": "time.localtime()"}, {"intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "snippet": "HTMLParser.handle_starttag(tag, attrs)"}, {"intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "snippet": "test.support.check_no_resource_warning(testcase)"}, {"intent": "Creates a temporary file in the most secure manner possible .", "snippet": "tempfile.mkstemp()"}, {"intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "snippet": "pyc_invalidation_mode.CHECKED_HASH"}, {"intent": "The line number within the string containing this example where the example begins.", "snippet": "example.lineno"}, {"intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "snippet": "mock.__dir__()"}, {"intent": "Remove and return an arbitrary element from the set .", "snippet": "set.pop()"}, {"intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript .", "snippet": "Morsel.OutputString()"}, {"intent": "Complex number with zero real part and positive infinity imaginary part.", "snippet": "cmath.infj"}, {"intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "snippet": "msilib.CreateRecord(count)"}, {"intent": "Open data URLs.", "snippet": "urllib.request.DataHandler"}, {"intent": "Creates a new context . The `traps` and flags fields list any signals to be set .", "snippet": "decimal.Context(traps=None)"}, {"intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)"}, {"intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "snippet": "formatter.DumbWriter(maxcol=72)"}, {"intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "snippet": "test.support.script_helper.spawn_python(*args, **kw)"}, {"intent": "Returns the file system path to the `resource` .", "snippet": "resource_reader.resource_path(resource)"}, {"intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "snippet": "gzip_file.mtime"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getboolean(section, option, fallback)"}, {"intent": "Force write of file with filedescriptor `fd` to disk .", "snippet": "os.fdatasync(fd)"}, {"intent": "The size in bytes of each element of the memoryview:", "snippet": "memoryview.itemsize"}, {"intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "snippet": "re.findall(pattern, string)"}, {"intent": "Get the list of quota roots for the named `mailbox` .", "snippet": "IMAP4.getquotaroot(mailbox)"}, {"intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "snippet": "linecache.checkcache(filename=None)"}, {"intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` . With arguments `msg`.", "snippet": "test_case.assertWarnsRegex(warning, regex, msg=None)"}, {"intent": "Set up clear text data connection .", "snippet": "FTP_TLS.prot_c()"}, {"intent": "A 32-bit number in little-endian format.", "snippet": "winreg.REG_DWORD_LITTLE_ENDIAN"}, {"intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "snippet": "connection.text_factory"}, {"intent": "The most negative timedelta object, timedelta(-999999999).", "snippet": "timedelta.min"}, {"intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "snippet": "parser.parse(fp)"}, {"intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "snippet": "heapq.nlargest(n, iterable, key=None)"}, {"intent": "This function returns the wide character string starting at memory `address` address as a string .", "snippet": "ctypes.wstring_at(address)"}, {"intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "snippet": "Database.GetSummaryInformation(count)"}, {"intent": "Raised when a local or global name is not found.", "snippet": "NameError"}, {"intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "snippet": "context.minus(x)"}, {"intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "snippet": "os.path.join(path, *paths)"}, {"intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "snippet": "mock.configure_mock(**kwargs)"}, {"intent": "Return the frame object for the caller \u2019 s stack frame .", "snippet": "inspect.currentframe()"}, {"intent": "Stop collecting profiling data and record the results internally as the current profile .", "snippet": "profile.create_stats()"}, {"intent": "This class represents an aggregation of individual test cases and test suites .", "snippet": "unittest.TestSuite()"}, {"intent": "Return the compression algorithm being used as a string , or None if the connection isn \u2019 t compressed .", "snippet": "SSLSocket.compression()"}, {"intent": "Math argument out of domain of func", "snippet": "errno.EDOM"}, {"intent": "Mapping class that references keys weakly .", "snippet": "weakref.WeakKeyDictionary()"}, {"intent": "Start the thread \u2019 s activity .", "snippet": "thread.start()"}, {"intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "snippet": "doctest.debug_src(src)"}, {"intent": "Decorator for the minimum version when running test on Linux . With arguments `*min_version`.", "snippet": "@test.support.requires_linux_version(*min_version)"}, {"intent": "Stop after one line of code .", "snippet": "bdb.set_step()"}, {"intent": "inline and attachment are the only valid values in common use.", "snippet": "content_disposition_header.content-disposition"}, {"intent": "In range(24).", "snippet": "datetime.hour"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "snippet": "urllib.request.urlretrieve(url, reporthook=None)"}, {"intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "snippet": "message.walk()"}, {"intent": "Prompt server for an update .", "snippet": "IMAP4.recent()"}, {"intent": "Set the environment variable named `key` to the string `value` .", "snippet": "os.putenv(key, value)"}, {"intent": "Return the current state of the encoder which must be an integer .", "snippet": "incremental_encoder.getstate()"}, {"intent": "Modify or inquire widget state .", "snippet": "widget.state()"}, {"intent": "Return an accurate floating point sum of values in the `iterable` .", "snippet": "math.fsum(iterable)"}, {"intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "snippet": "dispatcher.connect(address)"}, {"intent": "Returns a string identifying the Python implementation .", "snippet": "platform.python_implementation()"}, {"intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "snippet": "concurrent.futures.as_completed(fs)"}, {"intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "snippet": "module_finder.report()"}, {"intent": "Return an iterator for the week day numbers that will be used for one week .", "snippet": "calendar.iterweekdays()"}, {"intent": "True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system).", "snippet": "os.path.supports_unicode_filenames"}, {"intent": "Get channel binding data for current connection , as a bytes object .", "snippet": "SSLSocket.get_channel_binding()"}, {"intent": "Returns IMAP namespaces as defined in RFC 2342 .", "snippet": "IMAP4.namespace()"}, {"intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "snippet": "readline.set_auto_history(enabled)"}, {"intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "snippet": "turtle.TurtleScreen(cv)"}, {"intent": "Writes the element tree to a `file` , as XML . `default_namespace` sets the default XML namespace ( for \u201c xmlns \u201d ) .", "snippet": "element_tree.write(file, default_namespace=None)"}, {"intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "snippet": "window.clearok(flag)"}, {"intent": "The content of the text node as a string.", "snippet": "Text.data"}, {"intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "snippet": "dict(iterable, **kwarg)"}, {"intent": "Draw a circle with given `radius` .", "snippet": "turtle.circle(radius)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "snippet": "mmap.mmap(fileno, length)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`.", "snippet": "window.border(ls)"}, {"intent": "Unpacker is the complementary class which unpacks XDR `data` values from a string buffer .", "snippet": "xdrlib.Unpacker(data)"}, {"intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "snippet": "input(prompt)"}, {"intent": "Adds the specified handler `hdlr` to this logger .", "snippet": "queue_listener.addHandler(hdlr)"}, {"intent": "Test that `first` is ( or is not ) in `second` .", "snippet": "test_case.assertIn(first, second)"}, {"intent": "Check if child process has terminated .", "snippet": "Popen.poll()"}, {"intent": "Read everything that can be without blocking in I/O ( eager ) .", "snippet": "Telnet.read_very_eager()"}, {"intent": "Permission denied", "snippet": "errno.EACCES"}, {"intent": "Return True if the block has nested namespaces within it .", "snippet": "symbol_table.has_children()"}, {"intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "snippet": "pool.imap(func, iterable, chunksize)"}, {"intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "snippet": "resource.RLIMIT_SWAP"}, {"intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "snippet": "FTP.mlsd(facts=)"}, {"intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "snippet": "calendar.itermonthdates(year, month)"}, {"intent": "Return a list of network interface information ( index int , name string ) tuples .", "snippet": "socket.if_nameindex()"}, {"intent": "Return the MAJOR.MINOR Python version number as a string .", "snippet": "sysconfig.get_python_version()"}, {"intent": "Similar to close ( ) but properly handles awaitables .", "snippet": "async_exit_stack.aclose()"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)"}, {"intent": "Metaclass for defining Abstract Base Classes (ABCs).", "snippet": "abc.ABCMeta"}, {"intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "snippet": "finder.find_module(fullname)"}, {"intent": "Return the approximate size of the queue .", "snippet": "queue.qsize()"}, {"intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)"}, {"intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`.", "snippet": "statistics.pstdev(data)"}, {"intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "snippet": "context.items()"}, {"intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , using at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "snippet": "buffered_io_base.readinto1(b)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.lt(a, b)"}, {"intent": "Query or modify the options for the specified `item` . If `option` is specified then the value for that option is returned . With arguments `**kw`.", "snippet": "widget.item(item, **kw, option=None)"}, {"intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "snippet": "tkinter.tix.NoteBook"}, {"intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "snippet": "POP3.user(username)"}, {"intent": "Exception raised for programming errors, e.g.", "snippet": "sqlite3.ProgrammingError"}, {"intent": "File mode: file type and file mode bits (permissions).", "snippet": "stat_result.st_mode"}, {"intent": "Locale category for formatting numbers.", "snippet": "locale.LC_NUMERIC"}, {"intent": "The XML format for plist files.", "snippet": "plistlib.FMT_XML"}, {"intent": "Exit code that means a user specified output file could not be created.", "snippet": "os.EX_CANTCREAT"}, {"intent": "Schedule all currently open asynchronous generator objects to close with an aclose ( ) call .", "snippet": "loop.shutdown_asyncgens()"}, {"intent": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.", "snippet": "test_loader.sortTestMethodsUsing"}, {"intent": "The signal corresponding to the Ctrl+C keystroke event.", "snippet": "signal.CTRL_C_EVENT"}, {"intent": "Example : With arguments `poly`, `fill`.", "snippet": "shape.addcomponent(poly, fill)"}, {"intent": "A floating-point positive infinity.", "snippet": "math.inf"}, {"intent": "Rename file `fromname` on the server to `toname` .", "snippet": "FTP.rename(fromname, toname)"}, {"intent": "Return the 8-bit character corresponding to the given ASCII character ( the character bit value is bitwise-ored with 0x80 ) . With arguments `c`.", "snippet": "curses.ascii.alt(c)"}, {"intent": "Return True if the SSL pseudo-random number generator has been seeded with \u2018 enough \u2019 randomness , and False otherwise .", "snippet": "ssl.RAND_status()"}, {"intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "snippet": "text_calendar.prmonth(theyear, themonth)"}, {"intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)"}, {"intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "snippet": "asyncio.sleep(delay, loop=None)"}, {"intent": "Locale category for sorting strings.", "snippet": "locale.LC_COLLATE"}, {"intent": "The file name of the importer\u2019s associated ZIP file, without a possible subpath.", "snippet": "zipimporter.archive"}, {"intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "snippet": "widget.reattach(item, parent, index)"}, {"intent": "Return true if the `object` is a class , whether built-in or created in Python code .", "snippet": "inspect.isclass(object)"}, {"intent": "The error response body.", "snippet": "base_handler.error_body"}, {"intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "snippet": "operator.iconcat(a, b)"}, {"intent": "Check the cache for validity .", "snippet": "linecache.checkcache()"}, {"intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "snippet": "json.JSONDecoder(strict=True)"}, {"intent": "Save cookies to a file .", "snippet": "FileCookieJar.save()"}, {"intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "snippet": "os.path.normcase(path)"}, {"intent": "Run awaitable objects in the `aws` set concurrently .", "snippet": "asyncio.as_completed(aws)"}, {"intent": "When specified, do not run the example at all.", "snippet": "doctest.SKIP"}, {"intent": "Invalid slot", "snippet": "errno.EBADSLT"}, {"intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "snippet": "email.utils.format_datetime(dt, usegmt=False)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "snippet": "connection.backup(target, pages=0, progress=None)"}, {"intent": "The string of characters that will accumulate into multi-character tokens.", "snippet": "shlex.wordchars"}, {"intent": "Close the view , through MsiViewClose ( ) .", "snippet": "View.Close()"}, {"intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "snippet": "context.quantize(x, y)"}, {"intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "snippet": "widget.insert(parent, index, **kw)"}, {"intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "snippet": "http_handler.mapLogRecord(record)"}, {"intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "snippet": "test_case.assertIs(first, second)"}, {"intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "snippet": "json.JSONEncoder(indent=None)"}, {"intent": "Returns a tuple of Field objects that define the fields for this dataclass . With arguments `class_or_instance`.", "snippet": "dataclasses.fields(class_or_instance)"}, {"intent": "Compare this network to `other` .", "snippet": "i_pv4_network.compare_networks(other)"}, {"intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "snippet": "ascii(object)"}, {"intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "snippet": "profile.run(command, sort=-1)"}, {"intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "snippet": "xml.sax.saxutils.escape(data)"}, {"intent": "Sends the `signal` signal to the child .", "snippet": "Popen.send_signal(signal)"}, {"intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "snippet": "logging.addLevelName(level, levelName)"}, {"intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "snippet": "ordered_dict.popitem()"}, {"intent": "Do whatever it takes to actually log the specified logging `record` .", "snippet": "queue_listener.emit(record)"}, {"intent": "Return the colormode or set it to 1.0 or 255 .", "snippet": "turtle.colormode()"}, {"intent": "Return non-zero if the `mode` is from a block special device file .", "snippet": "stat.S_ISBLK(mode)"}, {"intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "snippet": "stringprep.in_table_c5(code)"}, {"intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "snippet": "style.map(style, **kw)"}, {"intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `port` is omitted , the standard IMAP4-over-SSL port ( 993 ) is used .", "snippet": "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)"}, {"intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "snippet": "winreg.LoadKey(key, sub_key, file_name)"}, {"intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value .", "snippet": "condition.wait_for(predicate)"}, {"intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "snippet": "stat.UF_HIDDEN"}, {"intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)"}, {"intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "snippet": "binascii.b2a_base64(data, newline=True)"}, {"intent": "Alias for ExpatError.", "snippet": "xml.parsers.expat.error"}, {"intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "snippet": "stringprep.in_table_d2(code)"}, {"intent": "Return the data for the specified `year` ready for formatting .", "snippet": "calendar.yeardatescalendar(year)"}, {"intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "snippet": "wave.open(file, mode=None)"}, {"intent": "Open a pipe to or from command `cmd` .", "snippet": "os.popen(cmd)"}, {"intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "snippet": "message.attach(payload)"}, {"intent": "Time of file creation.", "snippet": "stat_result.st_birthtime"}, {"intent": "The expected output from running the example\u2019s source code (either from stdout, or a traceback in case of exception).", "snippet": "example.want"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "snippet": "calendar.calendar(year, m=3)"}, {"intent": "Return the string right justified in a string of length `width` .", "snippet": "str.rjust(width)"}, {"intent": "Remove all elements from the set .", "snippet": "set.clear()"}, {"intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "snippet": "email_message.get_content(*args, **kw)"}, {"intent": "Compile several source files .", "snippet": "py_compile.main()"}, {"intent": "Special type construct to mark class variables.", "snippet": "typing.ClassVar"}, {"intent": "Represents the C unsigned char datatype, it interprets the value as small integer.", "snippet": "ctypes.c_ubyte"}, {"intent": "Bind `fun` to mouse-button-release events on this turtle .", "snippet": "turtle.onrelease(fun)"}, {"intent": "Returns an iterable of strings over the contents of the package .", "snippet": "resource_reader.contents()"}, {"intent": "Represents the C void * type.", "snippet": "ctypes.c_void_p"}, {"intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "snippet": "audioop.maxpp(fragment, width)"}, {"intent": "If True, tokens will only be split in whitespaces.", "snippet": "shlex.whitespace_split"}, {"intent": "If the OptionParser has an option corresponding to `opt_str` , that option is removed .", "snippet": "OptionParser.remove_option(opt_str)"}, {"intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "snippet": "turtle.register_shape(name, shape=None)"}, {"intent": "Equivalent to get ( False ) .", "snippet": "queue.get_nowait()"}, {"intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "snippet": "date.fromordinal(ordinal)"}, {"intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "snippet": "abc_meta.__subclasshook__(subclass)"}, {"intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL .", "snippet": "pickle.Pickler(file, protocol=None)"}, {"intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "snippet": "connection.enable_load_extension(enabled)"}, {"intent": "This attribute contains a mapping of error code integers to two-element tuples containing a short and long message.", "snippet": "base_http_request_handler.responses"}, {"intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "snippet": "re.sub(pattern, repl, string)"}, {"intent": "Finally send the headers to the output stream and flush the internal headers buffer .", "snippet": "base_http_request_handler.flush_headers()"}, {"intent": "Mapping class that references values weakly . With arguments `dict`.", "snippet": "weakref.WeakValueDictionary(dict)"}, {"intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "snippet": "codecs.lookup(encoding)"}, {"intent": "Pop the last-pushed input source from the input stack .", "snippet": "shlex.pop_source()"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value .", "snippet": "config_parser.getboolean(section, option)"}, {"intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "snippet": "imaplib.Int2AP(num)"}, {"intent": "Test whether every element in the set is in `other` .", "snippet": "set.issubset(other)"}, {"intent": "Value too large for defined data type", "snippet": "errno.EOVERFLOW"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)"}, {"intent": "Version interface for Jython . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''))"}, {"intent": "Package not installed", "snippet": "errno.ENOPKG"}, {"intent": "Explicitly close the audio device .", "snippet": "oss_audio_device.close()"}, {"intent": "Reached the buffer size limit while looking for a separator.", "snippet": "asyncio.LimitOverrunError"}, {"intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "snippet": "IMAP4.fetch(message_set, message_parts)"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "snippet": "unittest.main(verbosity=1)"}, {"intent": "Contains the request path.", "snippet": "base_http_request_handler.path"}, {"intent": "Parse configuration data from a `string` .", "snippet": "config_parser.read_string(string)"}, {"intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "snippet": "Match.lastindex"}, {"intent": "Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.", "snippet": "winreg.KEY_WOW64_64KEY"}, {"intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "snippet": "trace.results()"}, {"intent": "Return the welcome message sent by the server in reply to the initial connection .", "snippet": "FTP.getwelcome()"}, {"intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)"}, {"intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "snippet": "inspect.getinnerframes(traceback)"}, {"intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "snippet": "warnings.formatwarning(message, category, filename, lineno)"}, {"intent": "Multithreaded version of interact ( ) .", "snippet": "Telnet.mt_interact()"}, {"intent": "Remove an attribute by `name` .", "snippet": "Element.removeAttribute(name)"}, {"intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "snippet": "@importlib.util.module_for_loader"}, {"intent": "The regular expression object whose match() or search() method produced this match instance.", "snippet": "Match.re"}, {"intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "snippet": "map(function, iterable)"}, {"intent": "The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "snippet": "message.epilogue"}, {"intent": "List of type map file names commonly installed.", "snippet": "mimetypes.knownfiles"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")"}, {"intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "snippet": "bytes()"}, {"intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "snippet": "uuid.uuid3(namespace, name)"}, {"intent": "Remove the first occurrence of `x` from the array .", "snippet": "array.remove(x)"}, {"intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "snippet": "datetime.max"}, {"intent": "Concrete class for urldefrag ( ) results containing str data . With arguments `url`, `fragment`.", "snippet": "urllib.parse.DefragResult(url, fragment)"}, {"intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type .", "snippet": "multiprocessing.Value(typecode_or_type, *args)"}, {"intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "snippet": "readline.insert_text(string)"}, {"intent": "When specified, exit after the first failing example and don\u2019t attempt to run the remaining examples.", "snippet": "doctest.FAIL_FAST"}, {"intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)"}, {"intent": "Null-terminated string containing references to environment variables (%PATH%).", "snippet": "winreg.REG_EXPAND_SZ"}, {"intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "snippet": "os.WEXITED"}, {"intent": "Return the name of the user owning the file .", "snippet": "Path.owner()"}, {"intent": "Set during Python startup, before site.py is run, to the same value as prefix.", "snippet": "sys.base_prefix"}, {"intent": "Push `ch` so the next getch ( ) will return it .", "snippet": "curses.ungetch(ch)"}, {"intent": "Return whether the call has completed .", "snippet": "async_result.ready()"}, {"intent": "For a call object that represents multiple calls , call_list ( ) returns a list of all the intermediate calls as well as the final call .", "snippet": "call.call_list()"}, {"intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "snippet": "weakref.getweakrefs(object)"}, {"intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "snippet": "tkinter.tix.LabelFrame"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "snippet": "SSLContext.wrap_socket(sock, session=None)"}, {"intent": "Error raised when there is a problem unpickling an object, such as a data corruption or a security violation.", "snippet": "pickle.UnpicklingError"}, {"intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "snippet": "bytes.hex()"}, {"intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "snippet": "inspect.isfunction(object)"}, {"intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "snippet": "asyncio.Task(coro, loop=None)"}, {"intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "snippet": "@test.support.anticipate_failure(condition)"}, {"intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "snippet": "datetime.utctimetuple()"}, {"intent": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).", "snippet": "UUID.bytes_le"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "bytes.split(maxsplit=-1)"}, {"intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "snippet": "int.from_bytes(bytes, byteorder)"}, {"intent": "This is identical to m.group ( `g` ) .", "snippet": "Match.__getitem__(g)"}, {"intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "snippet": "structure._anonymous_"}, {"intent": "Break the current line .", "snippet": "writer.send_line_break()"}, {"intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "snippet": "curses.has_key(ch)"}, {"intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "snippet": "cab.commit(database)"}, {"intent": "Return a random byte string containing `nbytes` number of bytes .", "snippet": "secrets.token_bytes()"}, {"intent": "For actions that store a constant value, the constant value to store.", "snippet": "Option.const"}, {"intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "snippet": "robot_file_parser.set_url(url)"}, {"intent": "Ensure that `item` is visible .", "snippet": "widget.see(item)"}, {"intent": "Base class for warning categories.", "snippet": "Warning"}, {"intent": "This should not be reported to Python applications.", "snippet": "xml.parsers.expat.errors.XML_ERROR_ABORTED"}, {"intent": "Numeric code specifying the problem.", "snippet": "xmlparser.ErrorCode"}, {"intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "snippet": "pickle.Pickler(file, fix_imports=True)"}, {"intent": "Return a string with all the information about the breakpoint , nicely formatted :", "snippet": "breakpoint.bpformat()"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "snippet": "SSLContext.wrap_socket(sock, server_hostname=None)"}, {"intent": "Return the base-10 logarithm of `x` .", "snippet": "cmath.log10(x)"}, {"intent": "This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance.", "snippet": "sys.platform"}, {"intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "snippet": "curses.def_prog_mode()"}, {"intent": "Returns a string identifying the compiler used for compiling Python .", "snippet": "platform.python_compiler()"}, {"intent": "Get the quota `root` \u2019 s resource usage and limits .", "snippet": "IMAP4.getquota(root)"}, {"intent": "Cannot send after transport endpoint shutdown", "snippet": "errno.ESHUTDOWN"}, {"intent": "Terminate the process .", "snippet": "process.terminate()"}, {"intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "snippet": "turtle.distance(x)"}, {"intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "snippet": "bdb.get_file_breaks(filename)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "snippet": "xml.sax.saxutils.XMLGenerator(short_empty_elements=False)"}, {"intent": "Exchange full", "snippet": "errno.EXFULL"}, {"intent": "This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "snippet": "asyncio.FastChildWatcher"}, {"intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "snippet": "Cmd.onecmd(str)"}, {"intent": "A NodeVisitor subclass that walks the abstract syntax tree and allows modification of nodes.", "snippet": "ast.NodeTransformer"}, {"intent": "Works like BytesFeedParser except that the input to the feed ( ) method must be a string .", "snippet": "email.parser.FeedParser()"}, {"intent": "Raised when trying to create a file or directory which already exists.", "snippet": "FileExistsError"}, {"intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "snippet": "FTP.transfercmd(cmd, rest=None)"}, {"intent": "Get the mapping of live local variables in `generator` to their current values .", "snippet": "inspect.getgeneratorlocals(generator)"}, {"intent": "Get statistics about the SSL sessions created or managed by this context .", "snippet": "SSLContext.session_stats()"}, {"intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "snippet": "datetime.strptime(date_string, format)"}, {"intent": "A one-character string used to separate fields.", "snippet": "Dialect.delimiter"}, {"intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "snippet": "mailbox.lock()"}, {"intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "snippet": "set.difference(*others)"}, {"intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "snippet": "open(file, opener=None)"}, {"intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "snippet": "window.getstr(y, x, n)"}, {"intent": "Sends the response header only , used for the purposes when 100 Continue response is sent by the server to the client . The headers not buffered and sent directly the output stream.If the `message` is not specified , the HTTP message corresponding the response `code` is sent .", "snippet": "base_http_request_handler.send_response_only(code)"}, {"intent": "Return data for response `code` if received , or None .", "snippet": "IMAP4.response(code)"}, {"intent": "Perform a TurtleScreen update .", "snippet": "turtle.update()"}, {"intent": "Create a Stats object based on the current profile and print the results to stdout .", "snippet": "profile.print_stats()"}, {"intent": "Return true if a keypress is waiting to be read .", "snippet": "msvcrt.kbhit()"}, {"intent": "GNU tar format.", "snippet": "tarfile.GNU_FORMAT"}, {"intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "snippet": "signal.ITIMER_REAL"}, {"intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)"}, {"intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)"}, {"intent": "Raised when a specified range of text does not fit into a string.", "snippet": "xml.dom.DomstringSizeErr"}, {"intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "snippet": "test_loader.loadTestsFromNames(names, module=None)"}, {"intent": "Delete all specified items and all their descendants . With arguments `*items`.", "snippet": "widget.delete(*items)"}, {"intent": "Return the Real value `x` truncated to an Integral ( usually an integer ) .", "snippet": "math.trunc(x)"}, {"intent": "The sound parameter is the name of a WAV file.", "snippet": "winsound.SND_FILENAME"}, {"intent": "Load MIME information from a file named `filename` . If `strict` is True , information will be added to list of standard types , else to the list of non-standard types .", "snippet": "mime_types.read(filename, strict=True)"}, {"intent": "Return the square root of the argument to full precision . With arguments `context`.", "snippet": "decimal.sqrt(context=None)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . The setUp function can access the test globals as the `globs` attribute of the test passed . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, globs=None)"}, {"intent": "Disables registry reflection for 32-bit processes running on a 64-bit operating system . `key` is an already open key , or one of the predefined HKEY_* constants .", "snippet": "winreg.DisableReflectionKey(key)"}, {"intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "snippet": "ssl.cert_time_to_seconds(cert_time)"}, {"intent": "This is a standard context defined by the General Decimal Arithmetic Specification.", "snippet": "decimal.BasicContext"}, {"intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "snippet": "xml.etree.ElementTree.iterparse(source, events=None)"}, {"intent": "Determines the message ID , event category and event type , and then logs the message in the NT event log . With arguments `record`.", "snippet": "nt_event_log_handler.emit(record)"}, {"intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "snippet": "wsgiref.handlers.read_environ()"}, {"intent": "When the path points to a directory , yield path objects of the directory contents :", "snippet": "Path.iterdir()"}, {"intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "snippet": "turtle.onkeypress(fun)"}, {"intent": "Represents the C signed short datatype.", "snippet": "ctypes.c_short"}, {"intent": "A list of the non-fatal errors encountered while loading tests.", "snippet": "test_loader.errors"}, {"intent": "Can be passed to the stdin, stdout or stderr parameters.", "snippet": "asyncio.subprocess.PIPE"}, {"intent": "Finder for modules declared in the Windows registry.", "snippet": "importlib.machinery.WindowsRegistryFinder"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "snippet": "NNTP.login(usenetrc=True)"}, {"intent": "Returns the logger used by multiprocessing .", "snippet": "multiprocessing.get_logger()"}, {"intent": "Returns True if the panel is hidden ( not visible ) , False otherwise .", "snippet": "Panel.hidden()"}, {"intent": "Return a list of the extended filesystem attributes on `path` . With arguments `follow_symlinks`.", "snippet": "os.listxattr(follow_symlinks=True)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `month`.", "snippet": "datetime.replace(month=self.month)"}, {"intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "snippet": "os.fchmod(fd, mode)"}, {"intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "snippet": "NNTP.xhdr(hdr, str)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "snippet": "turtle.shapetransform(t22=None)"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "snippet": "message.get_params(failobj=None, unquote=True)"}, {"intent": "The subnets that join to make the current network definition , depending on the argument values .", "snippet": "i_pv4_network.subnets()"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "snippet": "bz2.BZ2File(filename, compresslevel=9)"}, {"intent": "An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.", "snippet": "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"}, {"intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)"}, {"intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "snippet": "struct.unpack_from(buffer)"}, {"intent": "A list containing TestCase instances that were marked as expected failures, but succeeded.", "snippet": "test_result.unexpectedSuccesses"}, {"intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "snippet": "os.posix_fadvise(fd, offset, len, advice)"}, {"intent": "items becomes the new selection . With arguments `*items`.", "snippet": "widget.selection_set(*items)"}, {"intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "snippet": "msvcrt.ungetch(char)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "snippet": "ZipFile.open(name, pwd=None)"}, {"intent": "Return the \u201c identity \u201d of an `object` .", "snippet": "id(object)"}, {"intent": "Return an attribute with a particular `index` .", "snippet": "NamedNodeMap.item(index)"}, {"intent": "Put the barrier into a broken state .", "snippet": "barrier.abort()"}, {"intent": "Print a comparison between a and b and common immediate subdirectories .", "snippet": "dircmp.report_partial_closure()"}, {"intent": "Open `url` . With arguments `*args`, `**kw`.", "snippet": "test.support.open_urlresource(url, *args, **kw)"}, {"intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "snippet": "re.findall(pattern, string, flags=0)"}, {"intent": "A writer which can be used in debugging formatters, but not much else.", "snippet": "formatter.AbstractWriter"}, {"intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "snippet": "fileinput.isstdin()"}, {"intent": "All the signal numbers are defined symbolically.", "snippet": "SIG*"}, {"intent": "Close all file descriptors from `fd_low` ( inclusive ) to `fd_high` ( exclusive ) , ignoring errors .", "snippet": "os.closerange(fd_low, fd_high)"}, {"intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "snippet": "os.WIFSIGNALED(status)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects .", "snippet": "doctest.DocTestFinder()"}, {"intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "snippet": "counter.most_common(n)"}, {"intent": "Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.", "snippet": "@functools.total_ordering"}, {"intent": "Assert the mock was never called .", "snippet": "mock.assert_not_called()"}, {"intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 . With arguments `methodname`.", "snippet": "xmlrpc.client.dumps(params, methodname=None, encoding=None)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "snippet": "json.load(fp, **kw, object_hook=None)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "snippet": "json.load(fp, **kw, cls=None, parse_float=None)"}, {"intent": "Provide `data` to the compressor object .", "snippet": "bz2_compressor.compress(data)"}, {"intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "snippet": "colorsys.yiq_to_rgb(y, i, q)"}, {"intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "snippet": "gdbm.sync()"}, {"intent": "Format the exception part of the traceback .", "snippet": "traceback_exception.format_exception_only()"}, {"intent": "Encode the bytes-like object `s` , which can contain arbitrary binary data , and return bytes containing the base64-encoded data , with newlines ( b'\\n ' ) inserted after every 76 bytes of output , and ensuring that there is a trailing newline , as per RFC 2045 ( MIME ) .", "snippet": "base64.encodebytes(s)"}, {"intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "snippet": "cgitb.html(info)"}, {"intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method . If `keepends` is false line-endings will be stripped from the lines returned .", "snippet": "stream_reader.readline(size, keepends)"}, {"intent": "The main configuration parser . When `dict_type` is given , it will be used to create the dictionary objects for the list of sections , for the options within a section , and for the default values . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), dict_type=collections.OrderedDict)"}, {"intent": "This factory function creates and returns a new ctypes pointer `type` .", "snippet": "ctypes.POINTER(type)"}, {"intent": "Call to set a new `value` for the context variable in the current context .", "snippet": "context_var.set(value)"}, {"intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "snippet": "zlib.crc32(data, value)"}, {"intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "snippet": "email.utils.quote(str)"}, {"intent": "The type of the return values from the ParserCreate() function.", "snippet": "xml.parsers.expat.XMLParserType"}, {"intent": "Create a parser instance able to parse invalid markup .", "snippet": "html.parser.HTMLParser()"}, {"intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "snippet": "breakpoint.bpprint()"}, {"intent": "The type of the time value sequence returned by gmtime(), localtime(), and strptime().", "snippet": "time.struct_time"}, {"intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "snippet": "subprocess.check_output(args, timeout=None)"}, {"intent": "Open an LZMA-compressed file in binary `mode` .", "snippet": "lzma.LZMAFile()"}, {"intent": "Filename of default file in which to keep cookies.", "snippet": "FileCookieJar.filename"}, {"intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "snippet": "bdb.Bdb(skip=None)"}, {"intent": "ElementTree wrapper class . The tree is initialized with the contents of the XML `file` if given .", "snippet": "xml.etree.ElementTree.ElementTree(file=None)"}, {"intent": "There are three different ways to call this function : With arguments `name`.", "snippet": "turtle.register_shape(name)"}, {"intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "snippet": "curses.color_pair(color_number)"}, {"intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "snippet": "tkinter.tix.DirSelectBox"}, {"intent": "Return the base ten logarithm of the operand .", "snippet": "decimal.log10()"}, {"intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "snippet": "re.X"}, {"intent": "Set to True if IPV6 is enabled on this host, False otherwise.", "snippet": "test.support.IPV6_ENABLED"}, {"intent": "Construct an IPv6 `address` .", "snippet": "ipaddress.IPv6Address(address)"}, {"intent": "Handle authentication with the remote host .", "snippet": "urllib.request.HTTPBasicAuthHandler()"}, {"intent": "A list of prefixes for site-packages directories.", "snippet": "site.PREFIXES"}, {"intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "snippet": "base_server.handle_timeout()"}, {"intent": "Return the character at the given position in the window . With arguments `y`.", "snippet": "window.inch(y)"}, {"intent": "This method returns a list of column names .", "snippet": "row.keys()"}, {"intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "snippet": "syslog.syslog(priority, message)"}, {"intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "snippet": "time.time_ns()"}, {"intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "snippet": "itertools.combinations_with_replacement(iterable, r)"}, {"intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "snippet": "memoryview.strides"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "snippet": "parser.st2list(st, line_info=False)"}, {"intent": "Returns the message for this LogRecord instance after merging any user-supplied arguments with the message .", "snippet": "log_record.getMessage()"}, {"intent": "Generates a string representation of an XML `element` , including all subelements .", "snippet": "xml.etree.ElementTree.tostring(element)"}, {"intent": "The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).", "snippet": "tkinter.tix.InputOnly"}, {"intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "snippet": "colorsys.rgb_to_hsv(r, g, b)"}, {"intent": "Subclass of TurtleScreen, with four methods added.", "snippet": "turtle.Screen"}, {"intent": "Return a string identifying the specific test case .", "snippet": "test_case.id()"}, {"intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), strict=True)"}, {"intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "snippet": "FTP.mlsd()"}, {"intent": "Return whether `domain` is on the blacklist for setting or receiving cookies .", "snippet": "DefaultCookiePolicy.is_blocked(domain)"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)"}, {"intent": "Request the size of the file named `filename` on the server .", "snippet": "FTP.size(filename)"}, {"intent": "Return an iterator over the events which have been encountered in the data fed to the parser .", "snippet": "xml_pull_parser.read_events()"}, {"intent": "Set timeout of connections to `t` seconds .", "snippet": "CacheFTPHandler.setTimeout(t)"}, {"intent": "Run command with arguments and return its output . With arguments `args`, `stdin`.", "snippet": "subprocess.check_output(args, stdin=None)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "snippet": "trace.Trace(outfile=None)"}, {"intent": "Insert a blank line under the cursor .", "snippet": "window.insertln()"}, {"intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "snippet": "tokenize.open(filename)"}, {"intent": "This is identical to the creation of a normal socket , and will use the same options for creation .", "snippet": "dispatcher.create_socket()"}, {"intent": "Create a shallow copy of the deque .", "snippet": "deque.copy()"}, {"intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "snippet": "asyncio.Semaphore(value=1)"}, {"intent": "Operation not permitted", "snippet": "errno.EPERM"}, {"intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "snippet": "tracemalloc.start()"}, {"intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "snippet": "bytearray(source)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "snippet": "urllib.parse.urlencode(query, encoding=None)"}, {"intent": "Return a context manager that returns `enter_result` from __enter__ , but otherwise does nothing .", "snippet": "contextlib.nullcontext()"}, {"intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)"}, {"intent": "The first child of the node, if there are any, or None.", "snippet": "Node.firstChild"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . If an HTTPS URL is provided , `context` may be ssl.SSLContext and configures the SSL settings of the underlying HTTPS connection . With arguments `uri`.", "snippet": "xmlrpc.client.ServerProxy(uri, context=None)"}, {"intent": "Remove and return a ( key , value ) pair from the dictionary .", "snippet": "dict.popitem()"}, {"intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "snippet": "turtle.circle(radius, extent=None)"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `filter`.", "snippet": "select.kevent(ident, filter=KQ_FILTER_READ)"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "snippet": "modulefinder.ModuleFinder(debug=0, excludes=)"}, {"intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "snippet": "warnings.filterwarnings(action)"}, {"intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "snippet": "email.utils.localtime(dt=None)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "snippet": "test_case.assertAlmostEqual(first, second, msg=None)"}, {"intent": "These are string constants containing Bluetooth addresses with special meanings.", "snippet": "socket.BDADDR_ANY"}, {"intent": "If this attribute is set to a callable, the rotation_filename() method delegates to this callable.", "snippet": "base_rotating_handler.namer"}, {"intent": "Returns the current maximum field size allowed by the parser . If `new_limit` is given , this becomes the new limit .", "snippet": "csv.field_size_limit(new_limit)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "snippet": "HTTPConnection.request(method, url, encode_chunked=False)"}, {"intent": "Create a new dictionary . With arguments `**kwarg`.", "snippet": "dict(**kwarg)"}, {"intent": "Return fmod ( `x` , `y` ) , as defined by the platform C library .", "snippet": "math.fmod(x, y)"}, {"intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "snippet": "os.pwrite(fd, str, offset)"}, {"intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "snippet": "audioop.tomono(fragment, width, lfactor, rfactor)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)"}, {"intent": "Process the HTTP request .", "snippet": "wsgi_request_handler.handle()"}, {"intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "snippet": "queue_listener.propagate"}, {"intent": "Return a list of supported formats for archiving .", "snippet": "shutil.get_archive_formats()"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "snippet": "warnings.warn(message, source=None)"}, {"intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "snippet": "SummaryInformation.Persist()"}, {"intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)"}, {"intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "snippet": "datetime.time(tzinfo=None)"}, {"intent": "A tuple giving access to the path\u2019s various components:", "snippet": "PurePath.parts"}, {"intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "snippet": "window.hline(ch, n)"}, {"intent": "To Complex, Real adds the operations that work on real numbers.", "snippet": "numbers.Real"}, {"intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "snippet": "bin(x)"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "snippet": "str.rsplit()"}, {"intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "snippet": "mock._get_child_mock(**kw)"}, {"intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "snippet": "gc.collect(generation=2)"}, {"intent": "This read-only attribute returns the callback currently associated to the weakref.", "snippet": "ref.__callback__"}, {"intent": "Returns the current global process times .", "snippet": "os.times()"}, {"intent": "A Popen creationflags parameter to specify that a new process will have an above average priority.", "snippet": "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"}, {"intent": "Get the type of completion being attempted .", "snippet": "readline.get_completion_type()"}, {"intent": "Map character sets to their email properties .", "snippet": "email.charset.Charset()"}, {"intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "snippet": "cgi.parse()"}, {"intent": "Set an attribute `value` from a string . With arguments `name`.", "snippet": "Element.setAttribute(name, value)"}, {"intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "snippet": "inspect.Signature(parameters=None)"}, {"intent": "Abort a file transfer that is in progress .", "snippet": "FTP.abort()"}, {"intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "snippet": "subprocess.check_call(args, stdout=None)"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "snippet": "asyncio.wait(aws, loop=None)"}, {"intent": "Execute the code of the specified module and return the resulting module globals dictionary . The `mod_name` argument should be an absolute module name . The optional dictionary argument `init_globals` may be used to pre-populate the module \u2019 s globals dictionary before the code is executed .", "snippet": "runpy.run_module(mod_name, init_globals=None)"}, {"intent": "An event object .", "snippet": "asyncio.Event()"}, {"intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "snippet": "bdb.trace_dispatch(frame, event, arg)"}, {"intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "snippet": "inspect.cleandoc(doc)"}, {"intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "snippet": "statistics.pvariance(data)"}, {"intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')"}, {"intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "snippet": "dis.distb()"}, {"intent": "Create a barrier object for `parties` number of threads .", "snippet": "threading.Barrier(parties)"}, {"intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "snippet": "sync_manager.Array(typecode, sequence)"}, {"intent": "This method commits the current transaction .", "snippet": "connection.commit()"}, {"intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "snippet": "doctest.OutputChecker"}, {"intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "snippet": "locale.T_FMT_AMPM"}, {"intent": "Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.", "snippet": "connection.total_changes"}, {"intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "snippet": "content_manager.get_content(msg, *args, **kw)"}, {"intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "snippet": "base64.standard_b64encode(s)"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "snippet": "unittest.main(exit=True)"}, {"intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "snippet": "bdb.run(cmd)"}, {"intent": "This attribute should be set to a true value if the handler\u2019s _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header.", "snippet": "base_handler.origin_server"}, {"intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "snippet": "Packer.pack_fstring(n, s)"}, {"intent": "Print the formatted representation of `object` on the configured stream , followed by a newline .", "snippet": "PrettyPrinter.pprint(object)"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "snippet": "datetime.datetime(year, month, day, hour=0)"}, {"intent": "Make this feature the current feature of msilib .", "snippet": "feature.set_current()"}, {"intent": "An abstract base class for asyncio policies.", "snippet": "asyncio.AbstractEventLoopPolicy"}, {"intent": "True if the system is Android.", "snippet": "test.support.is_android"}, {"intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "snippet": "condition.wait_for(predicate, timeout=None)"}, {"intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "snippet": "statistics.median_grouped(data)"}, {"intent": "Subtypes Rational and adds a conversion to int.", "snippet": "numbers.Integral"}, {"intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "snippet": "re.sub(pattern, repl, string, flags=0)"}, {"intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "snippet": "socket.gethostname()"}, {"intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "snippet": "mh.close()"}, {"intent": "The UUID was not generated in a multiprocessing-safe way.", "snippet": "robot_file_parser.unsafe"}, {"intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "snippet": "fileinput.nextfile()"}, {"intent": "Produce a paragraph separation of at least `blankline` blank lines , or the equivalent .", "snippet": "writer.send_paragraph(blankline)"}, {"intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, create=False)"}, {"intent": "This method should only be called by Executor implementations before executing the work associated with the Future and by unit tests .", "snippet": "future.set_running_or_notify_cancel()"}, {"intent": "A debugging hook.", "snippet": "HTTPResponse.debuglevel"}, {"intent": "Write a bytes-like object `data` to the audio device : waits until the audio device is able to accept data , writes as much data as it will accept , and repeats until data has been completely written .", "snippet": "oss_audio_device.writeall(data)"}, {"intent": "A namespace table for a block.", "snippet": "symtable.SymbolTable"}, {"intent": "Restore the terminal to \u201c program \u201d mode , as previously saved by def_prog_mode ( ) .", "snippet": "curses.reset_prog_mode()"}, {"intent": "Return a dictionary containing type hints for a function , method , module or class object . With arguments `obj`.", "snippet": "typing.get_type_hints(obj)"}, {"intent": "Compile the file with path `fullname` . `invalidation_mode` should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime .", "snippet": "compileall.compile_file(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)"}, {"intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stderr`.", "snippet": "test.support.script_helper.spawn_python(*args, **kw, stderr=subprocess.STDOUT)"}, {"intent": "Set the default `timeout` in seconds ( float ) for new socket objects .", "snippet": "socket.setdefaulttimeout(timeout)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `countcallers` enables call relationship tracking .", "snippet": "trace.Trace(countcallers=0)"}, {"intent": "Do formatting for a `record` - if a formatter is set , use it .", "snippet": "queue_listener.format(record)"}, {"intent": "Wait until the stream is closed .", "snippet": "stream_writer.wait_closed()"}, {"intent": "The following methods are overridden from the base class implementation:", "snippet": "gettext.GNUTranslations"}, {"intent": "Return the greatest common divisor of the integers `a` and `b` .", "snippet": "fractions.gcd(a, b)"}, {"intent": "The constructor takes a single argument which is the `template` string .", "snippet": "string.Template(template)"}, {"intent": "If set to true then local variables will be shown in tracebacks.", "snippet": "test_result.tb_locals"}, {"intent": "Return the item of d with key key.", "snippet": "d[key]"}, {"intent": "Returns the time the robots.txt file was last fetched .", "snippet": "robot_file_parser.mtime()"}, {"intent": "Availability: BSD, OSX.", "snippet": "socket.AF_LINK"}, {"intent": "Recursive directory creation function . With arguments `name`.", "snippet": "os.makedirs(name)"}, {"intent": "The Select widget is a container of button subwidgets.", "snippet": "tkinter.tix.Select"}, {"intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "snippet": "tzinfo.utcoffset(dt)"}, {"intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "snippet": "bdb.runctx(cmd, globals, locals)"}, {"intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "snippet": "Element.getElementsByTagName(tagName)"}, {"intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "snippet": "os.path.splitext(path)"}, {"intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "snippet": "csv.reader(csvfile, **fmtparams)"}, {"intent": "Save the data loaded into the Stats object to a file named `filename` .", "snippet": "stats.dump_stats(filename)"}, {"intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "snippet": "env_builder.setup_scripts(context)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "snippet": "email_message.set_param(param, value)"}, {"intent": "List of all features.", "snippet": "xml.sax.handler.all_features"}, {"intent": "Create and return a clone of the turtle with same position , heading and turtle properties .", "snippet": "turtle.clone()"}, {"intent": "Print a debug message when the debug level is > 0 . With arguments `msg`, `*args`.", "snippet": "Telnet.msg(msg, *args)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs)"}, {"intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "snippet": "test.support.system_must_validate_cert(f)"}, {"intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "snippet": "audioop.lin2lin(fragment, width, newwidth)"}, {"intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "snippet": "widget.insert(parent, index, **kw, iid=None)"}, {"intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)"}, {"intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "snippet": "logging.setLogRecordFactory(factory)"}, {"intent": "Set the `font` style .", "snippet": "writer.new_font(font)"}, {"intent": "Holds the SMTPServer that spawned this channel.", "snippet": "smtp_channel.smtp_server"}, {"intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "snippet": "array.array(typecode, initializer)"}, {"intent": "Appends the `record` to the buffer .", "snippet": "buffering_handler.emit(record)"}, {"intent": "The number of threads currently waiting in the barrier.", "snippet": "barrier.n_waiting"}, {"intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "snippet": "typing.Type(GenericCT_co)"}, {"intent": "Subclass of Exception, this can be raised by uu.decode() under various situations, such as described above, but also including a badly formatted header, or truncated input file.", "snippet": "uu.Error"}, {"intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "snippet": "iter(dictview)"}, {"intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "snippet": "calendar.weekheader(n)"}, {"intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "snippet": "sysconfig.get_path(name, scheme, vars, expand)"}, {"intent": "This class can be used to generate plain text calendars .", "snippet": "calendar.TextCalendar()"}, {"intent": "Remove all items from the dictionary .", "snippet": "dict.clear()"}, {"intent": "Data structure modeling shapes . The pair ( `type_` , `data` ) must follow this specification :", "snippet": "turtle.Shape(type_, data)"}, {"intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "snippet": "textbox.edit(validator)"}, {"intent": "An abstract method to return the bytes for the data located at `path` .", "snippet": "resource_loader.get_data(path)"}, {"intent": "Limit on the number of characters in the representation of the string.", "snippet": "Repr.maxstring"}, {"intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "snippet": "xml.dom.WrongDocumentErr"}, {"intent": "The flag is set if there are no free or cell variables.", "snippet": "inspect.CO_NOFREE"}, {"intent": "Create a mock object using another object as a `spec` . If a class is used as a spec then the return value of the mock ( the `instance` of the class ) will have the same spec . With arguments `**kwargs`.", "snippet": "unittest.mock.create_autospec(spec, **kwargs, instance=False)"}, {"intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) .", "snippet": "dbm.dumb.open(filename)"}, {"intent": "Like Path.stat ( ) but , if the path points to a symbolic link , return the symbolic link \u2019 s information rather than its target \u2019 s .", "snippet": "Path.lstat()"}, {"intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "snippet": "os.getenv(key)"}, {"intent": "The frame which surrounds the text and scroll bar widgets.", "snippet": "ScrolledText.frame"}, {"intent": "Class for reading and writing tar archives.", "snippet": "tarfile.TarFile"}, {"intent": "A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods . With arguments `fullname`, `path`.", "snippet": "importlib.machinery.SourceFileLoader(fullname, path)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "snippet": "SSLContext.wrap_socket(sock, suppress_ragged_eofs=True)"}, {"intent": "If not specified, the directory to serve is the current working directory.", "snippet": "simple_http_request_handler.directory"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object .", "snippet": "plistlib.load(fp)"}, {"intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "snippet": "bytes.decode(encoding=\"utf-8\")"}, {"intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)"}, {"intent": "The broadcast address for the network.", "snippet": "i_pv4_network.broadcast_address"}, {"intent": "Return the size of an `object` in bytes .", "snippet": "sys.getsizeof(object)"}, {"intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "snippet": "mailbox.NoSuchMailboxError"}, {"intent": "Is raised when a compression method is not supported or when the data cannot be decoded properly.", "snippet": "tarfile.CompressionError"}, {"intent": "Make an iterator that filters elements from `iterable` returning only those for which the `predicate` is False .", "snippet": "itertools.filterfalse(predicate, iterable)"}, {"intent": "Test that a `regex` search matches ( or does not match ) `text` .", "snippet": "test_case.assertRegex(text, regex)"}, {"intent": "No-op in the base class , this method takes file object `fp` , and reads the data from the file , initializing its message catalog .", "snippet": "null_translations._parse(fp)"}, {"intent": "Set a trace function for all threads started from the threading module . The `func` will be passed to sys.settrace ( ) for each thread , before its run ( ) method is called .", "snippet": "threading.settrace(func)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "snippet": "window.insnstr(y, x, str, n)"}, {"intent": "(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "snippet": "text_wrapper.replace_whitespace"}, {"intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "snippet": "base64.b64decode(s)"}, {"intent": "A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "snippet": "sys.meta_path"}, {"intent": "Return fillstate ( True if filling , False else ) .", "snippet": "turtle.filling()"}, {"intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "snippet": "multiprocessing.Pipe()"}, {"intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "snippet": "inspect.getcallargs(func, *args, **kwds)"}, {"intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "snippet": "signature.bind(*args, **kwargs)"}, {"intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "snippet": "re.A"}, {"intent": "Return the number of Thread objects currently alive .", "snippet": "threading.active_count()"}, {"intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "snippet": "connection.interrupt()"}, {"intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "snippet": "logging.setLoggerClass(klass)"}, {"intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "snippet": "gc.get_stats()"}, {"intent": "A tuple of Address objects encoding all of the individual addresses from the header value.", "snippet": "address_header.addresses"}, {"intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "snippet": "curses.setupterm(term=None)"}, {"intent": "When called without arguments this `function` removes the control-c handler if it has been installed .", "snippet": "unittest.removeHandler()"}, {"intent": "Return True if the event loop was closed .", "snippet": "loop.is_closed()"}, {"intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "snippet": "dict.items()"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "snippet": "uuid.UUID()"}, {"intent": "Return a set of all tasks for an event `loop` .", "snippet": "task.all_tasks()"}, {"intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "snippet": "text_wrapper.wrap(text)"}, {"intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "snippet": "SSLContext.get_ca_certs()"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "snippet": "SMTP.starttls(keyfile=None, context=None)"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, blacklist=())"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "snippet": "email.header.Header(charset=None)"}, {"intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "snippet": "ctypes.memset(dst, c, count)"}, {"intent": "Register a codec search function . With arguments `search_function`.", "snippet": "codecs.register(search_function)"}, {"intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "snippet": "sys.setrecursionlimit(limit)"}, {"intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "snippet": "FTP.storlines(cmd, fp)"}, {"intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "snippet": "style.layout(style, layoutspec=None)"}, {"intent": "Convert samples in the audio `fragment` to a-LAW encoding and return this as a bytes object . With arguments `width`.", "snippet": "audioop.lin2alaw(fragment, width)"}, {"intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "snippet": "curses.ascii.isspace(c)"}, {"intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "snippet": "decimal.compare_signal(other)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "snippet": "calendar.calendar(year, w=2)"}, {"intent": "The platform does not provide information on whether the UUID was generated safely or not.", "snippet": "robot_file_parser.unknown"}, {"intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs .", "snippet": "socket.sendall(bytes)"}, {"intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "snippet": "contextlib.redirect_stderr(new_target)"}, {"intent": "Return a network interface index number corresponding to an interface name . With arguments `if_name`.", "snippet": "socket.if_nametoindex(if_name)"}, {"intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string .", "snippet": "profile.runctx(command, globals, locals)"}, {"intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "snippet": "class.__mro__"}, {"intent": "Return a floating point number constructed from a number or string `x` .", "snippet": "float(x)"}, {"intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "snippet": "str.isdigit()"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)"}, {"intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "snippet": "codeop.compile_command(source, symbol=\"single\")"}, {"intent": "Return the message \u2019 s content type .", "snippet": "message.get_content_type()"}, {"intent": "Synchronize and close the persistent dict object .", "snippet": "Shelf.close()"}, {"intent": "Start recording the vertices of a polygon .", "snippet": "turtle.begin_poly()"}, {"intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "snippet": "CookiePolicy.domain_return_ok(domain, request)"}, {"intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "snippet": "range(start, stop, step)"}, {"intent": "Automatically determine how many times to call timeit ( ) .", "snippet": "timer.autorange()"}, {"intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "snippet": "importlib.util.spec_from_loader(name, loader)"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "snippet": "multiprocessing.pool.Pool(processes)"}, {"intent": "Close the gdbm database .", "snippet": "gdbm.close()"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, extra=())"}, {"intent": "Set or get the word delimiters for completion . With arguments `string`.", "snippet": "readline.set_completer_delims(string)"}, {"intent": "This read-only attribute provides the SQLite database Connection used by the Cursor object.", "snippet": "cursor.connection"}, {"intent": "Binary data in any form.", "snippet": "winreg.REG_BINARY"}, {"intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "snippet": "random.vonmisesvariate(mu, kappa)"}, {"intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "snippet": "locale.ALT_DIGITS"}, {"intent": "This function must do all the work required to service a request .", "snippet": "base_request_handler.handle()"}, {"intent": "Called each time around the asynchronous loop to determine whether a channel \u2019 s socket should be added to the list on which read events can occur .", "snippet": "dispatcher.readable()"}, {"intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "snippet": "re.I"}, {"intent": "Width of the terminal window in characters.", "snippet": "terminal_size.columns"}, {"intent": "Channel number out of range", "snippet": "errno.ECHRNG"}, {"intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "snippet": "webbrowser.open(url, new=0, autoraise=True)"}, {"intent": "Load cookies from a file . With arguments `filename`.", "snippet": "FileCookieJar.load(filename=None)"}, {"intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "snippet": "ast.iter_fields(node)"}, {"intent": "The DEFAULT object is a pre-created sentinel (actually sentinel.DEFAULT).", "snippet": "unittest.mock.DEFAULT"}, {"intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "snippet": "ArgumentParser.print_usage(file=None)"}, {"intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` .", "snippet": "text_io_wrapper.reconfigure(encoding, errors, newline)"}, {"intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "snippet": "test_result.skipped"}, {"intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)"}, {"intent": "Update the hash object with the bytes-like object . With arguments `data`.", "snippet": "hash.update(data)"}, {"intent": "This bytes class method returns a bytes object , decoding the given `string` object .", "snippet": "bytes.fromhex(string)"}, {"intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "snippet": "locale.ERA_D_FMT"}, {"intent": "Number of links to the inode.", "snippet": "stat.ST_NLINK"}, {"intent": "Split the string `s` using shell-like syntax .", "snippet": "shlex.split(s)"}, {"intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "snippet": "str.expandtabs()"}, {"intent": "This method is called from dispatch_call ( ) when there is the possibility that a break might be necessary anywhere inside the called function . With arguments `frame`, `argument_list`.", "snippet": "bdb.user_call(frame, argument_list)"}, {"intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)"}, {"intent": "Block for `delay` seconds .", "snippet": "asyncio.sleep(delay)"}, {"intent": "Return true if the string is a valid identifier according to the language definition , section Identifiers and keywords .", "snippet": "str.isidentifier()"}, {"intent": "If all_frames is True, all frames of the traceback are checked.", "snippet": "filter.all_frames"}, {"intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes .", "snippet": "bz2_decompressor.decompress(data)"}, {"intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "snippet": "locale.format_string(format, val, monetary=False)"}, {"intent": "Return a mapping of file objects to selector keys .", "snippet": "base_selector.get_map()"}, {"intent": "Return the bitwise exclusive or of `a` and `b` .", "snippet": "operator.xor(a, b)"}, {"intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "snippet": "formatter.push_margin(margin)"}, {"intent": "When specified, differences are computed by difflib.Differ, using the same algorithm as the popular ndiff.py utility.", "snippet": "doctest.REPORT_NDIFF"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings .", "snippet": "locale.currency(val)"}, {"intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring . See the Unix manual page recv ( 2 ) for the meaning of the optional argument `flags` ; it defaults to zero .", "snippet": "socket.recv_into(buffer, nbytes, flags)"}, {"intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "snippet": "aifc.getcomptype()"}, {"intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "snippet": "Path.touch(exist_ok=True)"}, {"intent": "Write the string `s` to the stream and return the number of characters written .", "snippet": "text_io_base.write(s)"}, {"intent": "True if cookie should only be returned over a secure connection.", "snippet": "Cookie.secure"}, {"intent": "Text file busy", "snippet": "errno.ETXTBSY"}, {"intent": "Called before the handle ( ) method to perform any initialization actions required .", "snippet": "base_request_handler.setup()"}, {"intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "snippet": "socket.CMSG_LEN(length)"}, {"intent": "Get the name of the n-th month.", "snippet": "MON_1 ... MON_12"}, {"intent": "Must accept a request from the socket , and return a 2-tuple containing the new socket object to be used to communicate with the client , and the client \u2019 s address .", "snippet": "base_server.get_request()"}, {"intent": "The code object is optimized, using fast locals.", "snippet": "inspect.CO_OPTIMIZED"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "snippet": "urllib.parse.quote_plus(string)"}, {"intent": "Return the column number where the current event begins .", "snippet": "Locator.getColumnNumber()"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "snippet": "compileall.compile_dir(dir, legacy=False)"}, {"intent": "Read and return the next `nframes` frames from the audio file .", "snippet": "aifc.readframes(nframes)"}, {"intent": "Try to find the module `name` .", "snippet": "imp.find_module(name)"}, {"intent": "Return the filename corresponding to the controlling terminal of the process .", "snippet": "os.ctermid()"}, {"intent": "Object yielded by scandir() to expose the file path and other file attributes of a directory entry.", "snippet": "os.DirEntry"}, {"intent": "Old getter/setter API for name ; use it directly as a property instead .", "snippet": "thread.getName()"}, {"intent": "Make the '.'", "snippet": "re.S"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "snippet": "subprocess.Popen(args, stdin=None)"}, {"intent": "Returns the file selection dialog that may be shared among different calls from this application .", "snippet": "tixCommand.tix_filedialog()"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode .", "snippet": "SMTP.starttls()"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "snippet": "BaseCookie.output(sep='\\r\\n')"}, {"intent": "The process\u2019s daemon flag, a Boolean value.", "snippet": "process.daemon"}, {"intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "snippet": "@abc.abstractclassmethod"}, {"intent": "Schedule the execution of a Coroutines . With arguments `coro`.", "snippet": "loop.create_task(coro)"}, {"intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "snippet": "sys.setprofile(profilefunc)"}, {"intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked .", "snippet": "pool.starmap_async(func, iterable)"}, {"intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "snippet": "smtp_channel.rcpttos"}, {"intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "snippet": "tabnanny.check(file_or_dir)"}, {"intent": "Inode protection mode.", "snippet": "stat.ST_MODE"}, {"intent": "Call timeit ( ) a few times . With arguments `repeat`.", "snippet": "timer.repeat(repeat=5)"}, {"intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "snippet": "pkgutil.ImpImporter()"}, {"intent": "Represents a reader object that provides APIs to read data from the IO stream.", "snippet": "asyncio.StreamReader"}, {"intent": "Return a file-like object that can be used as a temporary storage area .", "snippet": "tempfile.TemporaryFile()"}, {"intent": "Base class for exceptions raised when problems occur performing string interpolation.", "snippet": "configparser.InterpolationError"}, {"intent": "Convert the array to a unicode string .", "snippet": "array.tounicode()"}, {"intent": "This routine registers a callback . With arguments `authorizer_callback`.", "snippet": "connection.set_authorizer(authorizer_callback)"}, {"intent": "Address headers are one of the most complex structured header types.", "snippet": "email.headerregistry.AddressHeader"}, {"intent": "Time of most recent content modification expressed in seconds.", "snippet": "stat_result.st_mtime"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`.", "snippet": "warnings.simplefilter(action, category=Warning)"}, {"intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "snippet": "joinable_queue.send_bytes(buffer, offset)"}, {"intent": "If the specified sound cannot be found, do not play the system default sound.", "snippet": "winsound.SND_NODEFAULT"}, {"intent": "Return `x` raised to the power `y` .", "snippet": "math.pow(x, y)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "snippet": "trace.Trace(timing=False)"}, {"intent": "These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).", "snippet": "socket.SOCK_CLOEXEC"}, {"intent": "By default you will not get any tracebacks in user-defined functions , aggregates , converters , authorizer callbacks etc . If you want to debug them , you can call this function with `flag` set to True .", "snippet": "sqlite3.enable_callback_tracebacks(flag)"}, {"intent": "Return the path of Makefile .", "snippet": "sysconfig.get_makefile_filename()"}, {"intent": "Exponent was lower than Emin prior to rounding.", "snippet": "decimal.Subnormal"}, {"intent": "Set when tests can be skipped when they are not useful for PGO.", "snippet": "test.support.PGO"}, {"intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.fromstring(text, parser=None)"}, {"intent": "Raised when the import statement has troubles trying to load a module.", "snippet": "ImportError"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "snippet": "doctest.DocTestSuite(extraglobs=None)"}, {"intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "snippet": "bytes.count(sub, start, end)"}, {"intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "snippet": "@abc.abstractstaticmethod"}, {"intent": "Write `value` to a plist file . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "snippet": "plistlib.dump(value, fp, skipkeys=False)"}, {"intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addnstr(str, n, attr)"}, {"intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "snippet": "string.ascii_lowercase"}, {"intent": "This key is not used in versions of Windows after 98.", "snippet": "winreg.HKEY_DYN_DATA"}, {"intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "snippet": "turtle.end_fill()"}, {"intent": "Query or modify the heading options for the specified `column` . If kw is not given , returns a dict of the heading `option` values . With arguments `**kw`.", "snippet": "widget.heading(column, **kw, option=None)"}, {"intent": "Profile `func` ( `*args` , `**kwargs` )", "snippet": "profile.runcall(func, *args, **kwargs)"}, {"intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "snippet": "mh.set_sequences(sequences)"}, {"intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "snippet": "audioop.findmax(fragment, length)"}, {"intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "snippet": "tuple()"}, {"intent": "Set the `spacing` style to spacing .", "snippet": "writer.new_spacing(spacing)"}, {"intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "snippet": "issubclass(class, classinfo)"}, {"intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "snippet": "readline.read_init_file(filename)"}, {"intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "snippet": "raw_io_base.readinto(b)"}, {"intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "snippet": "imp.get_tag()"}, {"intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "snippet": "xml.dom.NamespaceErr"}, {"intent": "Return the value of the filename parameter of the Content-Disposition header of the message .", "snippet": "message.get_filename()"}, {"intent": "Pretend the whole window has been changed , for purposes of drawing optimizations .", "snippet": "window.touchwin()"}, {"intent": "An immutable sequence providing access to the logical ancestors of the path:", "snippet": "PurePath.parents"}, {"intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e .", "snippet": "inspect_loader.source_to_code(data)"}, {"intent": "(default: ' [...]') String that will appear at the end of the output text if it has been truncated.", "snippet": "text_wrapper.placeholder"}, {"intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "snippet": "epoll.poll(timeout=-1, maxevents=-1)"}, {"intent": "A user updateable list of mappings.", "snippet": "chain_map.maps"}, {"intent": "A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window.", "snippet": "startupinfo.dwFlags"}, {"intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "snippet": "sequence_matcher.set_seqs(a, b)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, ensure_ascii=True)"}, {"intent": "Search for a module specified by `fullname` . The optional `path` argument is ignored\u2014it \u2019 s there for compatibility with the importer protocol .", "snippet": "zipimporter.find_module(fullname, path)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously .", "snippet": "concurrent.futures.ThreadPoolExecutor()"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')"}, {"intent": "Return True if the locals in this table can be optimized .", "snippet": "symbol_table.is_optimized()"}, {"intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "snippet": "time.CLOCK_UPTIME"}, {"intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "snippet": "email.utils.formataddr(pair)"}, {"intent": "Run the test without collecting the result .", "snippet": "test_case.debug()"}, {"intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "snippet": "wsgiref.simple_server.demo_app(environ, start_response)"}, {"intent": "Dictionary mapping macro names to string lists.", "snippet": "netrc.macros"}, {"intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "snippet": "TabError"}, {"intent": "Return the most common `data` point from discrete or nominal data .", "snippet": "statistics.mode(data)"}, {"intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "snippet": "itertools.groupby(iterable)"}, {"intent": "Assert that the mock was called exactly once .", "snippet": "mock.assert_called_once()"}, {"intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "snippet": "socket.getprotobyname(protocolname)"}, {"intent": "Return a token .", "snippet": "shlex.get_token()"}, {"intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "snippet": "turtle.stamp()"}, {"intent": "This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a datetime.datetime instance.", "snippet": "xmlrpc.client.DateTime"}, {"intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "snippet": "decimal.normalize()"}, {"intent": "Return the path to the `resource` as an actual file system path . `package` is either a name or a module object which conforms to the Package requirements .", "snippet": "importlib.resources.path(package, resource)"}, {"intent": "Open for text reading the `resource` within `package` .", "snippet": "importlib.resources.open_text(package, resource)"}, {"intent": "Return the value returned by the call . If the call hasn \u2019 t yet completed then this method will wait up to `timeout` seconds .", "snippet": "future.result(timeout=None)"}, {"intent": "Return a list of names of symbols in this table .", "snippet": "symbol_table.get_identifiers()"}, {"intent": "Route attribute access on a class to __getattr__ .", "snippet": "types.DynamicClassAttribute()"}, {"intent": "Line number at which an error occurred.", "snippet": "xmlparser.ErrorLineNumber"}, {"intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "snippet": "formatter.check_unused_args(used_args, args, kwargs)"}, {"intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "snippet": "style.theme_settings(themename, settings)"}, {"intent": "Read at most `buffer_size` bytes from the socket \u2019 s remote end-point .", "snippet": "dispatcher.recv(buffer_size)"}, {"intent": "Accept a `string` as the instance \u2019 s new time value .", "snippet": "date_time.decode(string)"}, {"intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"}, {"intent": "Generic version of `list` . With arguments `MutableSequenceT`.", "snippet": "typing.List(list, MutableSequenceT)"}, {"intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "snippet": "winreg.ConnectRegistry(computer_name, key)"}, {"intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "snippet": "asyncio.Protocol(BaseProtocol)"}, {"intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "snippet": "argparse.ArgumentParser(description=None)"}, {"intent": "Exit code that means something like \u201can entry was not found\u201d.", "snippet": "os.EX_NOTFOUND"}, {"intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "snippet": "mmap.find(sub, start, end)"}, {"intent": "Run command with arguments . With arguments `args`, `stdin`.", "snippet": "subprocess.check_call(args, stdin=None)"}, {"intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "snippet": "turtle.tracer(n=None)"}, {"intent": "Return a string representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "snippet": "mailbox.get_string(key)"}, {"intent": "Compile and run some `source` in the interpreter .", "snippet": "InteractiveInterpreter.runsource(source)"}, {"intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"}, {"intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "snippet": "robot_file_parser.crawl_delay(useragent)"}, {"intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "snippet": "subprocess.getstatusoutput(cmd)"}, {"intent": "Return the hash value of the `object` ( if it has one ) .", "snippet": "hash(object)"}, {"intent": "Return True if the symbol is created from an import statement .", "snippet": "symbol.is_imported()"}, {"intent": "Transform a method into a class method.", "snippet": "@classmethod"}, {"intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "snippet": "doc_test_parser.get_examples(string)"}, {"intent": "Return the fractional and integer parts of `x` .", "snippet": "math.modf(x)"}, {"intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "snippet": "socket.fileno()"}, {"intent": "Windows only : Returns the last error code set by Windows in the calling thread .", "snippet": "ctypes.GetLastError()"}, {"intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "snippet": "test.support.check_warnings(*filters)"}, {"intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "snippet": "gc.set_threshold(threshold0, threshold1)"}, {"intent": "Round to the nearest integer without signaling Inexact or Rounded .", "snippet": "decimal.to_integral_value()"}, {"intent": "Run `test` and return the result .", "snippet": "warnings_recorder.run(test)"}, {"intent": "Create a mock object using another object as a `spec` . With arguments `**kwargs`.", "snippet": "unittest.mock.create_autospec(spec, **kwargs)"}, {"intent": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all .", "snippet": "test.support.script_helper.interpreter_requires_environment()"}, {"intent": "Compare the values of two Decimal instances . With arguments `other`.", "snippet": "decimal.compare(other)"}, {"intent": "Test that `first` and `second` are not equal .", "snippet": "test_case.assertNotEqual(first, second)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name .", "snippet": "TarFile.extract(member)"}, {"intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "snippet": "pool.imap(func, iterable)"}, {"intent": "A named tuple giving parameters of the numeric hash implementation.", "snippet": "sys.hash_info"}, {"intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `output_charset` is the character set that the output should be in .", "snippet": "email.charset.add_charset(charset, output_charset=None)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "snippet": "unittest.TextTestRunner(descriptions=True)"}, {"intent": "Same as print_version ( ) but returns the version string instead of printing it .", "snippet": "OptionParser.get_version()"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `newline` controls how line endings are handled .", "snippet": "io.TextIOWrapper(buffer, encoding=None, newline=None)"}, {"intent": "Class implementing event objects.", "snippet": "threading.Event"}, {"intent": "Set the orientation of the turtle to `to_angle` .", "snippet": "turtle.setheading(to_angle)"}, {"intent": "Level 2 halted", "snippet": "errno.EL2HLT"}, {"intent": "Current byte index in the parser input.", "snippet": "xmlparser.CurrentByteIndex"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "snippet": "json.dumps(obj, **kw)"}, {"intent": "Return an upper bound on ratio ( ) relatively quickly .", "snippet": "sequence_matcher.quick_ratio()"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `subcalls`.", "snippet": "profile.Profile(timer=None, subcalls=True)"}, {"intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "snippet": "widget.add(child, **kw)"}, {"intent": "The based class for all other module-specific exceptions.", "snippet": "mailbox.Error"}, {"intent": "Return the URL scheme being used for the current request .", "snippet": "base_handler.get_scheme()"}, {"intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "snippet": "config_parser.read(filenames)"}, {"intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "snippet": "int(x, base=10)"}, {"intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)"}, {"intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "snippet": "sys.executable"}, {"intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "snippet": "tree_builder.start(tag, attrs)"}, {"intent": "Returns the panel above the current panel .", "snippet": "Panel.above()"}, {"intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "snippet": "widget.start()"}, {"intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "snippet": "turtle.tiltangle(angle=None)"}, {"intent": "Insert CGI variables for the current request into the environ attribute .", "snippet": "base_handler.add_cgi_vars()"}, {"intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "snippet": "simple_http_request_handler.do_HEAD()"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . If `errorlevel` is 0 , all `errors` are ignored when using TarFile.extract ( ) .", "snippet": "tarfile.TarFile(errors='surrogateescape')"}, {"intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "snippet": "date_time.encode(out)"}, {"intent": "Append the last `nelements` items of history to a file .", "snippet": "readline.append_history_file(nelements)"}, {"intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds . When `use_default_map` is True ( the default ) , the standard mapping of header names to classes is copied in to the registry during initialization .", "snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader, use_default_map=True)"}, {"intent": "Return the square root of `x` .", "snippet": "cmath.sqrt(x)"}, {"intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "snippet": "calendar.setfirstweekday(weekday)"}, {"intent": "A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:", "snippet": "UUID.fields"}, {"intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "snippet": "int.bit_length()"}, {"intent": "Update the set , removing elements found in others . With arguments `*others`.", "snippet": "set.difference_update(*others)"}, {"intent": "Statistic on memory allocations.", "snippet": "tracemalloc.Statistic"}, {"intent": "Automatically determine how many times to call timeit ( ) . If `callback` is given and is not None , it will be called after each trial with two arguments : callback ( number , time_taken ) .", "snippet": "timer.autorange(callback=None)"}, {"intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "snippet": "heapq.merge(*iterables, key=None, reverse=False)"}, {"intent": "Cast a memoryview to a new `format` or `shape` .", "snippet": "memoryview.cast(format, shape)"}, {"intent": "Display `url` using the default browser .", "snippet": "webbrowser.open(url)"}, {"intent": "A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "snippet": "subprocess.DETACHED_PROCESS"}, {"intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "snippet": "doc_test_runner.report_start(out, test, example)"}, {"intent": "Return an iterable over the named items within the `package` .", "snippet": "importlib.resources.contents(package)"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)"}, {"intent": "All actions must be listed in ACTIONS.", "snippet": "Option.ACTIONS"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "snippet": "doctest.testfile(filename, package=None)"}, {"intent": "Return True if this entry is a symbolic link ( even if broken ) ; return False if the entry points to a directory or any kind of file , or if it doesn \u2019 t exist anymore .", "snippet": "dir_entry.is_symlink()"}, {"intent": "Set the sample width to `n` bytes .", "snippet": "Wave_write.setsampwidth(n)"}, {"intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "snippet": "platform.python_version_tuple()"}, {"intent": "Add element `elem` to the set .", "snippet": "set.add(elem)"}, {"intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "snippet": "DeprecationWarning"}, {"intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "snippet": "xml.etree.ElementTree.ElementTree(element=None)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "snippet": "urllib.parse.urlencode(query)"}, {"intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "snippet": "pickle.dump(obj, file, fix_imports=True)"}, {"intent": "Exit code that means that an error occurred while doing I/O on some file.", "snippet": "os.EX_IOERR"}, {"intent": "Enable automatic garbage collection .", "snippet": "gc.enable()"}, {"intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "snippet": "connection.create_function(name, num_params, func)"}, {"intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy .", "snippet": "urllib.request.AbstractBasicAuthHandler()"}, {"intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "snippet": "random.uniform(a, b)"}, {"intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "snippet": "resource.RUSAGE_SELF"}, {"intent": "The args argument as it was passed to Popen \u2013 a sequence of program arguments or else a single string.", "snippet": "Popen.args"}, {"intent": "Return the current setting for feature `featurename` .", "snippet": "XMLReader.getFeature(featurename)"}, {"intent": "Resource deadlock would occur", "snippet": "errno.EDEADLK"}, {"intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "snippet": "string.capwords(s, sep=None)"}, {"intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "snippet": "inspect.isasyncgen(object)"}, {"intent": "Create an object with a writable `value` attribute and return a proxy for it . With arguments `typecode`.", "snippet": "sync_manager.Value(typecode, value)"}, {"intent": "Implements the 'xmlcharrefreplace ' error handling ( for encoding with text encodings only ) : the unencodable character is replaced by an appropriate XML character reference . With arguments `exception`.", "snippet": "codecs.xmlcharrefreplace_errors(exception)"}, {"intent": "Current line number in the parser input.", "snippet": "xmlparser.CurrentLineNumber"}, {"intent": "Output character `data` which has already been formatted for display .", "snippet": "writer.send_literal_data(data)"}, {"intent": "A Set object indicating which functions in the os module permit use of their dir_fd parameter.", "snippet": "os.supports_dir_fd"}, {"intent": "Return the formatted representation of `object` as a string .", "snippet": "pprint.pformat(object)"}, {"intent": "Create a new zipimporter instance . `archivepath` must be a path to a ZIP file , or to a specific path within a ZIP file .", "snippet": "zipimport.zipimporter(archivepath)"}, {"intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "snippet": "robot_file_parser.can_fetch(useragent, url)"}, {"intent": "Return disk usage statistics about the given `path` as a named tuple with the attributes total , used and free , which are the amount of total , used and free space , in bytes .", "snippet": "shutil.disk_usage(path)"}, {"intent": "The class implementing primitive lock objects.", "snippet": "threading.Lock"}, {"intent": "A decorator for running tests that require a functional bind() for Unix sockets.", "snippet": "@test.support.skip_unless_bind_unix_socket"}, {"intent": "A dictionary representing the string environment at the time the interpreter was started.", "snippet": "posix.environ"}, {"intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "snippet": "sorted(iterable, reverse=False)"}, {"intent": "The typecode character used to create the array.", "snippet": "array.typecode"}, {"intent": "Combination of all locale settings.", "snippet": "locale.LC_ALL"}, {"intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "snippet": "SSLContext.get_ca_certs(binary_form=False)"}, {"intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "snippet": "unittest.mock.sentinel"}, {"intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "snippet": "NNTP.newgroups(date)"}, {"intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "snippet": "signal.pthread_sigmask(how, mask)"}, {"intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "snippet": "base64.decode(input, output)"}, {"intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "snippet": "email.message.Message()"}, {"intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "snippet": "curses.qiflush(flag)"}, {"intent": "Element class . `tag` is the element name . With arguments `**extra`.", "snippet": "xml.etree.ElementTree.Element(tag, **extra)"}, {"intent": "All arguments are optional and default to 0 . With arguments `hours`.", "snippet": "datetime.timedelta(hours=0)"}, {"intent": "Class to save and restore signal handlers registered by the Python signal handler.", "snippet": "test.support.SaveSignals"}, {"intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "snippet": "Database.OpenView(sql)"}, {"intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "snippet": "sys.setswitchinterval(interval)"}, {"intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "snippet": "context.compare_total(x, y)"}, {"intent": "Locale category for formatting of monetary values.", "snippet": "locale.LC_MONETARY"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The version of the pickle `protocol` can be specified with the protocol parameter .", "snippet": "shelve.open(filename, protocol=None)"}, {"intent": "Return non-zero if the `mode` is from a character special device file .", "snippet": "stat.S_ISCHR(mode)"}, {"intent": "Mark for refresh but wait .", "snippet": "window.noutrefresh()"}, {"intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "snippet": "test.support.findfile(filename, subdir=None)"}, {"intent": "Signoff : commit changes , unlock mailbox , drop connection .", "snippet": "POP3.quit()"}, {"intent": "A Popen creationflags parameter to specify that a new process will have realtime priority.", "snippet": "subprocess.REALTIME_PRIORITY_CLASS"}, {"intent": "Send a HELP command . With arguments `file`.", "snippet": "NNTP.help(file=None)"}, {"intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "snippet": "widget.set(item)"}, {"intent": "Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line , for cases where you can not use a list . With arguments `s`.", "snippet": "shlex.quote(s)"}, {"intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "snippet": "@reprlib.recursive_repr(fillvalue=\"...\")"}, {"intent": "Thread-specific CPU-time clock.", "snippet": "time.CLOCK_THREAD_CPUTIME_ID"}, {"intent": "Path to the file of the module.", "snippet": "file_loader.path"}, {"intent": "Communication error on send", "snippet": "errno.ECOMM"}, {"intent": "Return True if Python was not built with -O0 or -Og .", "snippet": "test.support.python_is_optimized()"}, {"intent": "Read all the files in the archive and check their CRC \u2019 s and file headers .", "snippet": "ZipFile.testzip()"}, {"intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "snippet": "pkgutil.iter_modules(prefix='')"}, {"intent": "Called when the connection is lost or closed . With arguments `exc`.", "snippet": "BaseProtocol.connection_lost(exc)"}, {"intent": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "snippet": "test.support.TESTFN_UNENCODABLE"}, {"intent": "Appends `subelements` from a sequence object with zero or more elements .", "snippet": "element.extend(subelements)"}, {"intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "snippet": "tokenize.untokenize(iterable)"}, {"intent": "These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback.", "snippet": "sys.last_type"}, {"intent": "Base class for warnings about probable mistakes in module imports.", "snippet": "ImportWarning"}, {"intent": "Attempt to find the spec to handle `fullname` within path .", "snippet": "file_finder.find_spec(fullname)"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "snippet": "__import__(name, fromlist=())"}, {"intent": "An end tag did not match the innermost open start tag.", "snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"}, {"intent": "A list of strings that specifies the search path for modules.", "snippet": "sys.path"}, {"intent": "Insert `x` into the deque at position `i` .", "snippet": "deque.insert(i, x)"}, {"intent": "Run the command described by `args` .", "snippet": "subprocess.run(args)"}, {"intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "snippet": "http.cookiejar.LWPCookieJar(filename)"}, {"intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "snippet": "str.index(sub)"}, {"intent": "Return a suite of all test cases contained in the TestCase-derived `testCaseClass` .", "snippet": "test_loader.loadTestsFromTestCase(testCaseClass)"}, {"intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "snippet": "calendar.itermonthdays(year, month)"}, {"intent": "Maildir mailboxes do not support ( or require ) locking , so these methods do nothing .", "snippet": "maildir.lock()"}, {"intent": "Called for comments . `data` is the text of the comment , excluding the leading ' < ! -- ' and trailing ' -- > ' .", "snippet": "xmlparser.CommentHandler(data)"}, {"intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "snippet": "str.rfind(sub, start, end)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "snippet": "timeit.timeit()"}, {"intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')"}, {"intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "snippet": "wsgiref.util.guess_scheme(environ)"}, {"intent": "Cleanup up threads not specified in original_values . With arguments `*original_values`.", "snippet": "test.support.threading_cleanup(*original_values)"}, {"intent": "Exception to be raised when a test fails.", "snippet": "test.support.TestFailed"}, {"intent": "Compose a raw device number from the `major` and `minor` device numbers .", "snippet": "os.makedev(major, minor)"}, {"intent": "Run command with arguments . With arguments `args`, `shell`.", "snippet": "subprocess.check_call(args, shell=False)"}, {"intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "snippet": "complex(real)"}, {"intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "snippet": "re.compile(pattern)"}, {"intent": "The first index of invalid data in object.", "snippet": "auto.start"}, {"intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "snippet": "condition.notify()"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "snippet": "window.insstr(str)"}, {"intent": "Delete `name` from sys.modules .", "snippet": "test.support.unload(name)"}, {"intent": "A generic version of collections.abc.Collection With arguments `Sized`.", "snippet": "typing.Collection(Sized)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, package=None)"}, {"intent": "A string, a tuple of strings, or None, indicating the newlines translated so far.", "snippet": "text_io_base.newlines"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module)"}, {"intent": "Shuffle the sequence `x` in place .", "snippet": "random.shuffle(x)"}, {"intent": "Sets the time the robots.txt file was last fetched to the current time .", "snippet": "robot_file_parser.modified()"}, {"intent": "Put the socket object into closed state without actually closing the underlying file descriptor .", "snippet": "socket.detach()"}, {"intent": "Returns a list of the supported start methods , the first of which is the default .", "snippet": "multiprocessing.get_all_start_methods()"}, {"intent": "Read `size` bytes from the audio input and return them as a Python string .", "snippet": "oss_audio_device.read(size)"}, {"intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "snippet": "re.split(pattern, string, flags=0)"}, {"intent": "Dictionary mapping field names to default values.", "snippet": "somenamedtuple._field_defaults"}, {"intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "snippet": "OpenerDirector.open(url)"}, {"intent": "Get the inheritable flag of the socket \u2019 s file descriptor or socket \u2019 s handle : True if the socket can be inherited in child processes , False if it can not .", "snippet": "socket.get_inheritable()"}, {"intent": "Return the thread stack `size` used when creating new threads .", "snippet": "threading.stack_size(size)"}, {"intent": "Subdirectories in both a and b.", "snippet": "dircmp.common_dirs"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, plist=)"}, {"intent": "Bootstraps pip into the current or designated environment . If `default_pip` is set , then pip will be installed in addition to the two regular scripts .", "snippet": "ensurepip.bootstrap(default_pip=False)"}, {"intent": "Return a copy of the string with the leading and trailing characters removed .", "snippet": "str.strip()"}, {"intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "snippet": "subprocess.STARTUPINFO()"}, {"intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "snippet": "os.WIFSTOPPED(status)"}, {"intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "snippet": "dialog.line(name, x, y, width, height)"}, {"intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value . If `vars` is provided , it must be a dictionary .", "snippet": "config_parser.get(section, option, fallback, vars=None)"}, {"intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "snippet": "tzinfo.dst(dt)"}, {"intent": "Connection refused", "snippet": "errno.ECONNREFUSED"}, {"intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` . With arguments `methodname`.", "snippet": "xmlrpc.client.dumps(params, methodname=None, allow_none=False)"}, {"intent": "Result of a Signature.bind() or Signature.bind_partial() call.", "snippet": "inspect.BoundArguments"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive .", "snippet": "shutil.make_archive(base_name, format, root_dir)"}, {"intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "snippet": "socket.has_ipv6"}, {"intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "snippet": "widget.next(item)"}, {"intent": "Insert `x` in `a` in sorted order .", "snippet": "bisect.insort_left(a, x)"}, {"intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "snippet": "typing.Type()"}, {"intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "snippet": "@functools.wraps(wrapped)"}, {"intent": "The type object for weak references objects.", "snippet": "weakref.ReferenceType"}, {"intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "snippet": "TarFile.list(verbose=True)"}, {"intent": "Packs the double-precision floating point number `value` .", "snippet": "Packer.pack_double(value)"}, {"intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "snippet": "asyncio.gather(*aws)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "snippet": "datetime.replace(minute=self.minute)"}, {"intent": "Returns the elements attribute names as a list .", "snippet": "element.keys()"}, {"intent": "Run the `cmd` shell command . With arguments `**kwds`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds)"}, {"intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "snippet": "turtle.write_docstringdict()"}, {"intent": "Removes `subelement` from the element .", "snippet": "element.remove(subelement)"}, {"intent": "Return a list of the sections available ; the default section is not included in the list .", "snippet": "config_parser.sections()"}, {"intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "snippet": "collections.deque(iterable, maxlen)"}, {"intent": "The largest area of mapped memory which the process may occupy.", "snippet": "resource.RLIMIT_VMEM"}, {"intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "snippet": "exec(object, globals, locals)"}, {"intent": "The type of methods of user-defined class instances.", "snippet": "types.MethodType"}, {"intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "snippet": "widget.index(tab_id)"}, {"intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "snippet": "cursor.fetchone()"}, {"intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "snippet": "str.endswith(suffix)"}, {"intent": "Turn on attribute A_STANDOUT .", "snippet": "window.standout()"}, {"intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program . `shortopts` is the string of option letters that the script wants to recognize , with options that require an argument followed by a colon ( ' : ' ; i.e. , the same format that Unix getopt ( ) uses ) .", "snippet": "getopt.getopt(args, shortopts)"}, {"intent": "Replace history item specified by its position with `line` . With arguments `pos`.", "snippet": "readline.replace_history_item(pos, line)"}, {"intent": "Open `fullurl` using the appropriate protocol .", "snippet": "ur_lopener.open(fullurl)"}, {"intent": "This method always returns only one value associated with form field `name` .", "snippet": "FieldStorage.getfirst(name)"}, {"intent": "True if the running interpreter is Jython.", "snippet": "test.support.is_jython"}, {"intent": "Simple JSON decoder .", "snippet": "json.JSONDecoder()"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"))"}, {"intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "snippet": "turtle.ondrag(fun, btn=1)"}, {"intent": "This uses the Internet TCP protocol , which provides for continuous streams of data between the client and server . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "socketserver.TCPServer(server_address, RequestHandlerClass)"}, {"intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "snippet": "Path.resolve(strict=False)"}, {"intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "snippet": "ssl.enum_certificates(store_name)"}, {"intent": "Rename the file or directory `src` to `dst` .", "snippet": "os.rename(src, dst)"}, {"intent": "Return the high median of `data` .", "snippet": "statistics.median_high(data)"}, {"intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "snippet": "webbrowser.register(name, constructor)"}, {"intent": "Get current state of a generator-iterator . With arguments `generator`.", "snippet": "inspect.getgeneratorstate(generator)"}, {"intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "snippet": "pickletools.genops(pickle)"}, {"intent": "Return the actual SSL protocol version negotiated by the connection as a string , or None is no secure connection is established .", "snippet": "SSLSocket.version()"}, {"intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "snippet": "smtp_server.channel_class"}, {"intent": "Returns the list of elements defined in the current theme .", "snippet": "style.element_names()"}, {"intent": "A string representing the final path component, excluding the drive and root, if any:", "snippet": "PurePath.name"}, {"intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "snippet": "window.insch(ch, attr)"}, {"intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "snippet": "inspect.getclosurevars(func)"}, {"intent": "The maximum size (in bytes) of the process\u2019s heap.", "snippet": "resource.RLIMIT_DATA"}, {"intent": "The file is stored compressed (Mac OS X 10.6+).", "snippet": "stat.UF_COMPRESSED"}, {"intent": "Called at the end of a CDATA section .", "snippet": "xmlparser.EndCdataSectionHandler()"}, {"intent": "Return a list of the nested symbol tables .", "snippet": "symbol_table.get_children()"}, {"intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "snippet": "StopIteration"}, {"intent": "Removes the handler for process with PID equal to `pid` .", "snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)"}, {"intent": "Get a `resource` from a `package` .", "snippet": "pkgutil.get_data(package, resource)"}, {"intent": "Construct a new Decimal object based from `value` .", "snippet": "decimal.Decimal()"}, {"intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "snippet": "getpass.getpass(prompt='Password: ')"}, {"intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "snippet": "calendar.monthrange(year, month)"}, {"intent": "Create a new instance to handle XML-RPC requests in a CGI environment .", "snippet": "xmlrpc.server.CGIXMLRPCRequestHandler()"}, {"intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` . With arguments `localaddr`.", "snippet": "smtpd.PureProxy(localaddr, remoteaddr)"}, {"intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "snippet": "curses.ascii.isalnum(c)"}, {"intent": "The number of lines read from the source iterator.", "snippet": "csvreader.line_num"}, {"intent": "If `key` is in the dictionary , return its value .", "snippet": "dict.setdefault(key)"}, {"intent": "Returns the public identifier of this InputSource .", "snippet": "InputSource.getPublicId()"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "snippet": "urllib.request.Request(url, method=None)"}, {"intent": "A non-callable version of Mock . With arguments `**kwargs`.", "snippet": "unittest.mock.NonCallableMock(**kwargs)"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.LMTP(local_hostname=None)"}, {"intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "snippet": "tzinfo.fromutc(dt)"}, {"intent": "Delete the turtle \u2019 s drawings from the screen .", "snippet": "turtle.clear()"}, {"intent": "Captured stderr from the child process.", "snippet": "completed_process.stderr"}, {"intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "snippet": "pprint.PrettyPrinter(indent=1, depth=None)"}, {"intent": "A http.client.HTTPMessage instance containing the response headers.", "snippet": "HTTPResponse.msg"}, {"intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "snippet": "zipapp.create_archive(source, interpreter=None)"}, {"intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "snippet": "readline.set_history_length(length)"}, {"intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "snippet": "loop.sendfile(transport, file, offset=0)"}, {"intent": "Constructor arguments should be passed as keyword arguments only . `blocked_domains` is a sequence of domain names that we never accept cookies from , nor return cookies to .", "snippet": "http.cookiejar.DefaultCookiePolicy(blocked_domains=None)"}, {"intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "snippet": "sync_manager.list(sequence)"}, {"intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "snippet": "io.BufferedRWPair(reader, writer)"}, {"intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "snippet": "queue_listener.createLock()"}, {"intent": "A null-terminated string.", "snippet": "winreg.REG_SZ"}, {"intent": "Return `a` is not `b` .", "snippet": "operator.is_not(a, b)"}, {"intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "snippet": "bytes_io.read1(size)"}, {"intent": "Return a count of messages in the mailbox .", "snippet": "mailbox.__len__()"}, {"intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "snippet": "NNTP.post(data)"}, {"intent": "Cancel the last call to dump_traceback_later ( ) .", "snippet": "faulthandler.cancel_dump_traceback_later()"}, {"intent": "External file attributes.", "snippet": "ZipInfo.external_attr"}, {"intent": "Bind bye ( ) method to mouse clicks on the Screen .", "snippet": "turtle.exitonclick()"}, {"intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "snippet": "selectors.BaseSelector"}, {"intent": "Integer specifying the handle of the Python DLL.", "snippet": "sys.dllhandle"}, {"intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "snippet": "bytearray(source)"}, {"intent": "Convert the pathname `path` from the local syntax for a path to the form used in the path component of a URL .", "snippet": "urllib.request.pathname2url(path)"}, {"intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "snippet": "tkinter.Tk(baseName=None)"}, {"intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "snippet": "unittest.mock.PropertyMock(*args, **kwargs)"}, {"intent": "Set `data` to the left of the current left margin , if possible .", "snippet": "writer.send_label_data(data)"}, {"intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "snippet": "audioop.avgpp(fragment, width)"}, {"intent": "Visit a `node` .", "snippet": "node_visitor.visit(node)"}, {"intent": "Represents the C 32-bit signed int datatype.", "snippet": "ctypes.c_int32"}, {"intent": "This closes the database connection .", "snippet": "connection.close()"}, {"intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "snippet": "curses.typeahead(fd)"}, {"intent": "A Unicode symbolic link.", "snippet": "winreg.REG_LINK"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)"}, {"intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "snippet": "test.support.strip_python_strerr(stderr)"}, {"intent": "A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one.", "snippet": "Option.TYPES"}, {"intent": "Return true if the sequence is empty or all bytes in the sequence are ASCII , false otherwise .", "snippet": "bytes.isascii()"}, {"intent": "Read-only attribute returning a list of upcoming events in the order they will be run.", "snippet": "scheduler.queue"}, {"intent": "Flush all input buffers .", "snippet": "curses.flushinp()"}, {"intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "snippet": "string.ascii_uppercase"}, {"intent": "Send `data` to the `sock` socket .", "snippet": "loop.sock_sendall(sock, data)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extract(member, path=\"\", numeric_owner=False)"}, {"intent": "Read and return a list of lines from the stream .", "snippet": "io_base.readlines()"}, {"intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "snippet": "Path.chmod(mode)"}, {"intent": "Sequence of bytecodes of Boolean operations.", "snippet": "dis.hascompare"}, {"intent": "Alias for output, for symmetry with stderr.", "snippet": "completed_process.stdout"}, {"intent": "A dictionary mapping module names to modules.", "snippet": "module_finder.modules"}, {"intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "snippet": "datetime.strftime(format)"}, {"intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "snippet": "context.logical_xor(x, y)"}, {"intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable"}, {"intent": "Get the minimum priority value for `policy` .", "snippet": "os.sched_get_priority_min(policy)"}, {"intent": "Sets the data buffer unpack `position` to position .", "snippet": "Unpacker.set_position(position)"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "snippet": "SMTP.starttls(keyfile=None)"}, {"intent": "Whether the OpenSSL library has built-in support for the SSL 2.0 protocol.", "snippet": "ssl.HAS_SSLv2"}, {"intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "snippet": "CookieJar.set_cookie_if_ok(cookie, request)"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "str.split(maxsplit=-1)"}, {"intent": "The main configuration parser . When `comment_prefixes` is given , it will be used as the set of substrings that prefix comments in otherwise empty lines . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), comment_prefixes=('#')"}, {"intent": "Tuples may be constructed in a number of ways :", "snippet": "tuple()"}, {"intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "snippet": "slice(stop)"}, {"intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "snippet": "locale.format_string(format, val, grouping=False, monetary=False)"}, {"intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "snippet": "xml.etree.ElementTree.ParseError"}, {"intent": "Perform hexbin4 binary-to-ASCII translation and return the resulting string . With arguments `data`.", "snippet": "binascii.b2a_hqx(data)"}, {"intent": "Reset all Turtles on the Screen to their initial state .", "snippet": "turtle.reset()"}, {"intent": "Extend the left side of the deque by appending elements from `iterable` .", "snippet": "deque.extendleft(iterable)"}, {"intent": "Abstract base class for asyncio-compliant event loops.", "snippet": "asyncio.AbstractEventLoop"}, {"intent": "Return non-zero if the `mode` is from a FIFO ( named pipe ) .", "snippet": "stat.S_ISFIFO(mode)"}, {"intent": "A subclass of Mailbox for mailboxes in mbox format . With arguments `path`.", "snippet": "mailbox.mbox(path)"}, {"intent": "This function performs a call to get_logger ( ) but in addition to returning the logger created by get_logger , it adds a handler which sends output to sys.stderr using format ' [ % ( levelname ) s/ % ( processName ) s ] % ( message ) s ' .", "snippet": "multiprocessing.log_to_stderr()"}, {"intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "snippet": "email.policy.compat32"}, {"intent": "Immediately stop playing or recording and return the device to a state where it can accept commands .", "snippet": "oss_audio_device.reset()"}, {"intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "snippet": "coverage_results.write_results(summary=False, coverdir=None)"}, {"intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "snippet": "datetime.utcfromtimestamp(timestamp)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, create=False)"}, {"intent": "Send a STAT command , where `message_spec` is either a message id ( enclosed in ' < ' and ' > ' ) or an article number in the current group .", "snippet": "NNTP.stat()"}, {"intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "snippet": "datetime.now(tz=None)"}, {"intent": "Alternative constructor .", "snippet": "TarFile.open()"}, {"intent": "The ButtonBox widget creates a box of buttons, such as is commonly used for Ok Cancel.", "snippet": "tkinter.tix.ButtonBox"}, {"intent": "This is a symbolic constant used for different values returned by localeconv().", "snippet": "locale.CHAR_MAX"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "snippet": "email.headerregistry.Address(username='')"}, {"intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "snippet": "compat32.fold(name, value)"}, {"intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "snippet": "setattr(object, name, value)"}, {"intent": "Default value for the bufsize parameter to parse().", "snippet": "xml.dom.pulldom.default_bufsize"}, {"intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "snippet": "text_calendar.formatmonth(theyear, themonth, l=0)"}, {"intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "snippet": "xmlparser.EndNamespaceDeclHandler(prefix)"}, {"intent": "Token value used to indicate a comment.", "snippet": "token.COMMENT"}, {"intent": "Return the index of the first of occurrence of `b` in `a` .", "snippet": "operator.indexOf(a, b)"}, {"intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "snippet": "zlib.compress(data, level=-1)"}, {"intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "snippet": "xmlparser.StartElementHandler(name, attributes)"}, {"intent": "The final path component, without its suffix:", "snippet": "PurePath.stem"}, {"intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "snippet": "imp.find_module(name, path)"}, {"intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "snippet": "lzma.LZMAFile(check=-1)"}, {"intent": "Any value error related to the net mask . With arguments `ValueError`.", "snippet": "ipaddress.NetmaskValueError(ValueError)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "snippet": "os.utime(path, ns)"}, {"intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "snippet": "sys._debugmallocstats()"}, {"intent": "Possible value for SSLContext.verify_flags.", "snippet": "ssl.VERIFY_DEFAULT"}, {"intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "snippet": "inspect.getdoc(object)"}, {"intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "snippet": "code.compile_command(source)"}, {"intent": "Handle authentication with the proxy .", "snippet": "urllib.request.ProxyBasicAuthHandler()"}, {"intent": "Return a list of the names of all folders .", "snippet": "maildir.list_folders()"}, {"intent": "Comment element factory .", "snippet": "xml.etree.ElementTree.Comment()"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)"}, {"intent": "The version number of this module, as a string.", "snippet": "sqlite3.version"}, {"intent": "Returns true if the node has any child nodes .", "snippet": "Node.hasChildNodes()"}, {"intent": "Return a named tuple describing the Windows version currently running .", "snippet": "sys.getwindowsversion()"}, {"intent": "Get a loader object for `module_or_name` .", "snippet": "pkgutil.get_loader(module_or_name)"}, {"intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "snippet": "iter(proxy)"}, {"intent": "Return a formatted dump of the tree in `node` .", "snippet": "ast.dump(node)"}, {"intent": "Create a shared dict object and return a proxy for it .", "snippet": "sync_manager.dict()"}, {"intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "snippet": "@unittest.skip(reason)"}, {"intent": "Return a list containing the character set names in the message .", "snippet": "message.get_charsets()"}, {"intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "snippet": "difflib.HtmlDiff"}, {"intent": "Return a randomly generated salt of the specified `method` .", "snippet": "crypt.mksalt()"}, {"intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "snippet": "socket.sendfile(file, count=None)"}, {"intent": "Returns a byte at the current file position as an integer , and advances the file position by 1 .", "snippet": "mmap.read_byte()"}, {"intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "snippet": "context.to_eng_string(x)"}, {"intent": "The regex matching flags.", "snippet": "Pattern.flags"}, {"intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)"}, {"intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "snippet": "formatter.convert_field(value, conversion)"}, {"intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "snippet": "decimal.compare_total(other)"}, {"intent": "A non-ASCII character encodable by os.fsencode().", "snippet": "test.support.FS_NONASCII"}, {"intent": "Called for the end of every element . With arguments `name`.", "snippet": "xmlparser.EndElementHandler(name)"}, {"intent": "All arguments are required . With arguments `year`, `month`, `day`.", "snippet": "datetime.date(year, month, day)"}, {"intent": "A list of str objects with the formatted output of matching messages.", "snippet": "test_case.output"}, {"intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "snippet": "codecs.replace_errors(exception)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `test_finder` is the DocTestFinder object ( or a drop-in replacement ) that is used to extract doctests from the module .", "snippet": "doctest.DocTestSuite(test_finder=None)"}, {"intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "snippet": "CookieJar.make_cookies(response, request)"}, {"intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "snippet": "marshal.loads(bytes)"}, {"intent": "Return True if the path points to a regular file ( or a symbolic link pointing to a regular file ) , False if it points to another kind of file .", "snippet": "Path.is_file()"}, {"intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "snippet": "stringprep.in_table_c12(code)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "snippet": "importlib.machinery.ModuleSpec(name, loader)"}, {"intent": "Finish the compression process .", "snippet": "bz2_compressor.flush()"}, {"intent": "Converts a number to a string using scientific notation . With arguments `x`.", "snippet": "context.to_sci_string(x)"}, {"intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "snippet": "base_handler.os_environ"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "snippet": "multiprocessing.pool.Pool(processes, initializer)"}, {"intent": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT , xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS .", "snippet": "sax2_dom.getEvent()"}, {"intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "snippet": "inspect.Signature(parameters=None, return_annotation=Signature.empty)"}, {"intent": "Return the difference between `x` and `y` .", "snippet": "context.subtract(x, y)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, encoding=None)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect_right(a, x, lo=0)"}, {"intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "snippet": "curses.resize_term(nlines, ncols)"}, {"intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "snippet": "turtle.ondrag(fun, add=None)"}, {"intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "snippet": "asyncio.Queue(maxsize=0)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)"}, {"intent": "Transform a function into a single-dispatch generic function.", "snippet": "@functools.singledispatch"}, {"intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "snippet": "trace.runctx(cmd)"}, {"intent": "Return a random element from the non-empty sequence `seq` .", "snippet": "random.choice(seq)"}, {"intent": "Wide char variant of putch ( ) , accepting a Unicode value . With arguments `unicode_char`.", "snippet": "msvcrt.putwch(unicode_char)"}, {"intent": "Returns the size of the chunk .", "snippet": "chunk.getsize()"}, {"intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "snippet": "test_suite.addTests(tests)"}, {"intent": "Remove and return an element from the right side of the deque .", "snippet": "deque.pop()"}, {"intent": "Returns the number closest to `x` , in direction towards `y` .", "snippet": "context.next_toward(x, y)"}, {"intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "snippet": "dbm.open(file, mode=0o666)"}, {"intent": "Set maximum number of cached connections to `m` .", "snippet": "CacheFTPHandler.setMaxConns(m)"}, {"intent": "Put an `item` into the queue without blocking .", "snippet": "queue.put_nowait(item)"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`.", "snippet": "loop.create_unix_server(protocol_factory)"}, {"intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "snippet": "ensurepip.bootstrap(user=False)"}, {"intent": "Return the main Thread object .", "snippet": "threading.main_thread()"}, {"intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "snippet": "dict.setdefault(key, default)"}, {"intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "snippet": "filter(function, iterable)"}, {"intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer . `eventmask` is an optional bitmask describing the type of events you want to check for .", "snippet": "devpoll.register(fd, eventmask)"}, {"intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "snippet": "bdb.get_bpbynumber(arg)"}, {"intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object .", "snippet": "base_manager.register(typeid, callable)"}, {"intent": "Return the sum of `x` and `y` .", "snippet": "context.add(x, y)"}, {"intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "snippet": "asyncio.sleep(delay, result=None, loop=None)"}, {"intent": "Return the delivery date of the message as a floating-point number representing seconds since the epoch .", "snippet": "maildir_message.get_date()"}, {"intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "snippet": "config_parser.read_dict(dictionary, source='<dict>')"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "snippet": "platform.architecture()"}, {"intent": "The name of the root element as given in the DOCTYPE declaration, if present.", "snippet": "DocumentType.name"}, {"intent": "This helper function returns a dictionary of scheme to proxy server URL mappings .", "snippet": "urllib.request.getproxies()"}, {"intent": "Send a LIST or LIST ACTIVE command .", "snippet": "NNTP.list()"}, {"intent": "This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "snippet": "@contextlib.contextmanager"}, {"intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)"}, {"intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "snippet": "imaplib.IMAP4_SSL(keyfile=None)"}, {"intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "snippet": "code.InteractiveConsole(locals=None)"}, {"intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "snippet": "pool.apply(func, args, kwds)"}, {"intent": "Get a string with the name of the character encoding used in the selected locale.", "snippet": "locale.CODESET"}, {"intent": "Exit from Python .", "snippet": "sys.exit()"}, {"intent": "Flag indicating whether to print only the filenames of files containing whitespace related problems.", "snippet": "tabnanny.filename_only"}, {"intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "snippet": "fileinput.hook_encoded(encoding)"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(check=-1, preset=None)"}, {"intent": "Returns a rotated copy of `x` , `y` times .", "snippet": "context.rotate(x, y)"}, {"intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "snippet": "context.compare_signal(x, y)"}, {"intent": "A Counter is a dict subclass for counting hashable objects .", "snippet": "collections.Counter()"}, {"intent": "Return bytes containing the entire contents of the buffer .", "snippet": "bytes_io.getvalue()"}, {"intent": "Compile the file with path `fullname` . `optimize` specifies the optimization level for the compiler .", "snippet": "compileall.compile_file(fullname, optimize=-1)"}, {"intent": "Accept a connection . `sock` must be a non-blocking socket .", "snippet": "loop.sock_accept(sock)"}, {"intent": "Path for shell if not on Windows; otherwise None.", "snippet": "test.support.unix_shell"}, {"intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "snippet": "KeyError"}, {"intent": "The OptionMenu creates a menu button of options.", "snippet": "tkinter.tix.OptionMenu"}, {"intent": "Round to nearest with ties going towards zero.", "snippet": "decimal.ROUND_HALF_DOWN"}, {"intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "snippet": "exec(object)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "snippet": "random.choices(population)"}, {"intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "snippet": "traceback.print_tb(tb)"}, {"intent": "Insert a new item with value `x` in the array before position `i` .", "snippet": "array.insert(i, x)"}, {"intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "snippet": "os.makedirs(name, mode=0o777)"}, {"intent": "Attaches the callable `fn` to the future .", "snippet": "future.add_done_callback(fn)"}, {"intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "snippet": "importlib.resources.open_text(package, resource, encoding='utf-8')"}, {"intent": "The system handle used to access the library.", "snippet": "PyDLL._handle"}, {"intent": "Query or modify horizontal position of the treeview . With arguments `*args`.", "snippet": "widget.xview(*args)"}, {"intent": "Dump the tracebacks of all threads into `file` . If `all_threads` is False , dump only the current thread .", "snippet": "faulthandler.dump_traceback(all_threads=True)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `fromdesc`.", "snippet": "html_diff.make_table(fromlines, tolines, fromdesc='')"}, {"intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "snippet": "atexit.unregister(func)"}, {"intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "snippet": "os.lseek(fd, pos, how)"}, {"intent": "Returns the element at position `x` , `y` .", "snippet": "widget.identify_element(x, y)"}, {"intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "snippet": "list()"}, {"intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "snippet": "decimal.Decimal(context=None)"}, {"intent": "Return the argument with environment variables expanded . With arguments `path`.", "snippet": "os.path.expandvars(path)"}, {"intent": "Compress `data` , returning a bytes object containing compressed data for at least part of the data in data .", "snippet": "Compress.compress(data)"}, {"intent": "Holds the socket object connecting to the client.", "snippet": "smtp_channel.conn"}, {"intent": "Write the `buffers` contents to file descriptor `fd` at a `offset` offset , leaving the file offset unchanged .", "snippet": "os.pwritev(fd, buffers, offset)"}, {"intent": "Restore a pipeline template to its initial state .", "snippet": "Template.reset()"}, {"intent": "Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists.", "snippet": "mailbox.ExternalClashError"}, {"intent": "Forking and threading versions of each type of server can be created using these mix-in classes.", "snippet": "socketserver.ForkingMixIn"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "snippet": "doctest.DocTestRunner(optionflags=0)"}, {"intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "snippet": "weakref.finalize(obj, func, *args, **kwargs)"}, {"intent": "Returns a dictionary containing the WSGI environment for a request .", "snippet": "wsgi_request_handler.get_environ()"}, {"intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "snippet": "View.Execute(params)"}, {"intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "snippet": "OptionParser.set_usage(usage)"}, {"intent": "Get the beginning or ending index of the completion scope .", "snippet": "readline.get_begidx()"}, {"intent": "Construct and return a class to handle creating a `name` header .", "snippet": "header_registry.__getitem__(name)"}, {"intent": "Delete the ACLs ( remove any rights ) set for `who` on `mailbox` .", "snippet": "IMAP4.deleteacl(mailbox, who)"}, {"intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "snippet": "str.replace(old, new)"}, {"intent": "No space left on device", "snippet": "errno.ENOSPC"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "snippet": "shutil.copytree(src, dst, ignore=None)"}, {"intent": "Required to request change notifications for a registry key or for subkeys of a registry key.", "snippet": "winreg.KEY_NOTIFY"}, {"intent": "Resume the receiving end .", "snippet": "ReadTransport.resume_reading()"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "snippet": "shelve.Shelf(dict, keyencoding='utf-8')"}, {"intent": "Closes the socket .", "snippet": "socket_handler.close()"}, {"intent": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.", "snippet": "doctest.REPORT_UDIFF"}, {"intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "snippet": "time.clock_getres(clk_id)"}, {"intent": "Remove and return an item from the queue .", "snippet": "queue.get()"}, {"intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "snippet": "heapq.heappush(heap, item)"}, {"intent": "Cannot exec a shared library directly", "snippet": "errno.ELIBEXEC"}, {"intent": "Remove and return an element from the left side of the deque .", "snippet": "deque.popleft()"}, {"intent": "When specified, display the first failing example in each doctest, but suppress output for all remaining examples.", "snippet": "doctest.REPORT_ONLY_FIRST_FAILURE"}, {"intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "snippet": "BaseCookie.js_output(attrs=None)"}, {"intent": "Add correct Cookie header to `request` .", "snippet": "CookieJar.add_cookie_header(request)"}, {"intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "snippet": "str.islower()"}, {"intent": "If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file , this routine will reorganize the database .", "snippet": "gdbm.reorganize()"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "snippet": "zipfile.ZipFile(file, mode='r')"}, {"intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "snippet": "widget.bbox(item)"}, {"intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "snippet": "address_header.groups"}, {"intent": "List of all known property names.", "snippet": "xml.sax.handler.all_properties"}, {"intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "snippet": "collections.namedtuple(typename, field_names, module=None)"}, {"intent": "A dictionary mapping names in common_dirs to dircmp objects.", "snippet": "dircmp.subdirs"}, {"intent": "Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.", "snippet": "crypt.METHOD_SHA256"}, {"intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "snippet": "Popen.stdin"}, {"intent": "Constructor for an unbounded FIFO queue.", "snippet": "queue.SimpleQueue"}, {"intent": "The class for reading and writing ZIP files.", "snippet": "zipfile.ZipFile"}, {"intent": "Execute unittest.TestCase subclasses passed to the function . With arguments `*classes`.", "snippet": "test.support.run_unittest(*classes)"}, {"intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "snippet": "inspect.getmro(cls)"}, {"intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "snippet": "audioop.mul(fragment, width, factor)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . With arguments `thread_name_prefix`.", "snippet": "concurrent.futures.ThreadPoolExecutor(thread_name_prefix='')"}, {"intent": "Return a new set with elements from the set and all others.", "snippet": "set | other | ..."}, {"intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "snippet": "bytes()"}, {"intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "snippet": "async_exit_stack.enter_async_context(cm)"}, {"intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "snippet": "property(fget=None, fset=None)"}, {"intent": "Signals the end of an element in non-namespace mode . The `name` parameter contains the name of the element type , just as with the startElement ( ) event .", "snippet": "ContentHandler.endElement(name)"}, {"intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "snippet": "@typing.overload"}, {"intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "snippet": "tkinter.tix.ListNoteBook"}, {"intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "snippet": "hashlib.new(name, data)"}, {"intent": "This is usually a string explaining the reason for this error.", "snippet": "non_callable_magic_mock.reason"}, {"intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive .", "snippet": "TarFile.add(name, arcname=None)"}, {"intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "snippet": "socket.recvmsg_into(buffers)"}, {"intent": "The Tree widget can be used to display hierarchical data in a tree form.", "snippet": "tkinter.tix.Tree"}, {"intent": "Returns the east asian width assigned to the character `chr` as string .", "snippet": "unicodedata.east_asian_width(chr)"}, {"intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "snippet": "difflib.IS_LINE_JUNK(line)"}, {"intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "snippet": "sqlite3.complete_statement(sql)"}, {"intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`.", "snippet": "re.error(msg)"}, {"intent": "Calls flush ( ) , sets the target to None and clears the buffer .", "snippet": "memory_handler.close()"}, {"intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "snippet": "class.mro()"}, {"intent": "Load a snapshot from a file . With arguments `filename`.", "snippet": "snapshot.load(filename)"}, {"intent": "File name too long", "snippet": "errno.ENAMETOOLONG"}, {"intent": "A list of CSS classes used for each weekday.", "snippet": "html_calendar.cssclasses"}, {"intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "snippet": "bytes.splitlines(keepends=False)"}, {"intent": "Bind `fun` to key-release event of `key` .", "snippet": "turtle.onkey(fun, key)"}, {"intent": "A string representing the drive letter or name, if any:", "snippet": "PurePath.drive"}, {"intent": "Same as Element.findtext ( ) , starting at the root of the tree . With arguments `match`, `default`.", "snippet": "element_tree.findtext(match, default=None)"}, {"intent": "Returns the client address .", "snippet": "base_http_request_handler.address_string()"}, {"intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "snippet": "urllib.request.CacheFTPHandler"}, {"intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "snippet": "locale.format_string(format, val, grouping=False)"}, {"intent": "The line number in the file where the definition starts.", "snippet": "Function.lineno"}, {"intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "snippet": "NNTP.xover(start, end)"}, {"intent": "An object containing information about the implementation of the currently running Python interpreter.", "snippet": "sys.implementation"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, indent=1)"}, {"intent": "Raised when a file operation (such as os.remove()) is requested on a directory.", "snippet": "IsADirectoryError"}, {"intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "snippet": "winreg.ExpandEnvironmentStrings(str)"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "snippet": "urllib.request.Request(url, unverifiable=False)"}, {"intent": "Return an IPv4Address or IPv6Address object depending on the IP `address` passed as argument .", "snippet": "ipaddress.ip_address(address)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url)"}, {"intent": "Return the name of the module named by the file `path` , without including the names of enclosing packages .", "snippet": "inspect.getmodulename(path)"}, {"intent": "Return e raised to the power `x` , where e is the base of natural logarithms .", "snippet": "cmath.exp(x)"}, {"intent": "Uuencode file `in_file` into file `out_file` . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "snippet": "uu.encode(in_file, out_file, backtick=False)"}, {"intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "snippet": "datetime.astimezone()"}, {"intent": "Numerical overflow.", "snippet": "decimal.Overflow"}, {"intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "snippet": "Match.groups(default=None)"}, {"intent": "True if this is a session cookie.", "snippet": "Cookie.discard"}, {"intent": "The CSS class for the whole year\u2019s table of tables (used by formatyear()).", "snippet": "html_calendar.cssclass_year"}, {"intent": "Return `n` independent iterators from a single `iterable` .", "snippet": "itertools.tee(iterable)"}, {"intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "snippet": "Dialect.doublequote"}, {"intent": "Add all table content from `module` to `database` .", "snippet": "msilib.add_tables(database, module)"}, {"intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "snippet": "random.setstate(state)"}, {"intent": "Class used to temporarily set or unset environment variables.", "snippet": "test.support.EnvironmentVarGuard"}, {"intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "snippet": "pdb.Pdb(skip=None)"}, {"intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "snippet": "base64.encode(input, output)"}, {"intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "snippet": "audioop.findfactor(fragment, reference)"}, {"intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "snippet": "audioop.add(fragment1, fragment2, width)"}, {"intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "snippet": "sys.version_info"}, {"intent": "Convert the frame rate of the input `fragment` . `state` is a tuple containing the state of the converter . With arguments `width`, `nchannels`, `inrate`, `outrate`.", "snippet": "audioop.ratecv(fragment, width, nchannels, inrate, outrate, state)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "snippet": "json.load(fp, **kw, cls=None)"}, {"intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "snippet": "subprocess.STARTUPINFO(dwFlags=0)"}, {"intent": "resolved arg value (if known), otherwise same as arg", "snippet": "argval"}, {"intent": "Returns the bottom panel in the panel stack .", "snippet": "curses.panel.bottom_panel()"}, {"intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "snippet": "dialog.text(name, x, y, width, height, attributes, text)"}, {"intent": "The parser determined that the document was not \u201cstandalone\u201d though it declared itself to be in the XML declaration, and the NotStandaloneHandler was set and returned 0.", "snippet": "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"}, {"intent": "Iteratively unpack from the `buffer` buffer according to the `format` string format .", "snippet": "struct.iter_unpack(format, buffer)"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "snippet": "asyncio.wait(aws, loop=None, timeout=None)"}, {"intent": "Raised when the data in a file cannot be parsed, such as when an MH instance attempts to read a corrupted .mh_sequences file.", "snippet": "mailbox.FormatError"}, {"intent": "The class used to represent an email address . With arguments `display_name`.", "snippet": "email.headerregistry.Address(display_name='')"}, {"intent": "Parse `address` \u2013 which should be the value of some address-containing field such as To or Cc \u2013 into its constituent realname and email address parts .", "snippet": "email.utils.parseaddr(address)"}, {"intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "snippet": "os.setxattr(path, attribute, value)"}, {"intent": "Return True if the stream supports random access .", "snippet": "io_base.seekable()"}, {"intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "snippet": "struct.pack_into(format, buffer, offset, v1, v2)"}, {"intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "snippet": "importlib.util.spec_from_file_location(name, location)"}, {"intent": "Return the maximum allowed number of headers named `name` .", "snippet": "policy.header_max_count(name)"}, {"intent": "True if the address is reserved for multicast use.", "snippet": "i_pv4_address.is_multicast"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object .", "snippet": "zipfile.ZipFile(file)"}, {"intent": "Create a new Signature instance based on the instance replace was invoked on .", "snippet": "signature.replace()"}, {"intent": "Return a byte representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "snippet": "mailbox.get_bytes(key)"}, {"intent": "Remove the `event` from the queue .", "snippet": "scheduler.cancel(event)"}, {"intent": "Called when a `subtest` finishes . `test` is the test case corresponding to the test method . If `outcome` is None , the subtest succeeded .", "snippet": "test_result.addSubTest(test, subtest, outcome)"}, {"intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "snippet": "test_case.assertMultiLineEqual(first, second, msg=None)"}, {"intent": "A generic version of collections.abc.Iterable .", "snippet": "typing.Iterable()"}, {"intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "snippet": "errno.errorcode"}, {"intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "snippet": "logging.config.fileConfig(fname)"}, {"intent": "Variable that specifies the user agent of the opener object.", "snippet": "ur_lopener.version"}, {"intent": "An SMTP instance encapsulates an SMTP connection .", "snippet": "smtplib.SMTP()"}, {"intent": "Sets the `result` of the work associated with the Future to result .", "snippet": "future.set_result(result)"}, {"intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "snippet": "urllib.parse.unquote(string)"}, {"intent": "Get the separator character for thousands (groups of three digits).", "snippet": "locale.THOUSEP"}, {"intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "snippet": "widget.move(item, parent, index)"}, {"intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)"}, {"intent": "Return a logical OR of all video attributes supported by the terminal .", "snippet": "curses.termattrs()"}, {"intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "snippet": "directory.glob(pattern, exclude=None)"}, {"intent": "Return true if the string is a titlecased string and there is at least one character , for example uppercase characters may only follow uncased characters and lowercase characters only cased ones .", "snippet": "str.istitle()"}, {"intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` .", "snippet": "xml.sax.saxutils.unescape(data)"}, {"intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "snippet": "traceback_exception.extract(frame_gen, capture_locals=False)"}, {"intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "snippet": "maildir.close()"}, {"intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "snippet": "FTP.retrlines(cmd)"}, {"intent": "Removes the item with the index `i` from the array and returns it .", "snippet": "array.pop(i)"}, {"intent": "Cannot assign requested address", "snippet": "errno.EADDRNOTAVAIL"}, {"intent": "Control what happens when the cursor of a window is moved off the edge of the window or scrolling region , either as a result of a newline action on the bottom line , or typing the last character of the last line . If `flag` is False , the cursor is left on the bottom line .", "snippet": "window.scrollok(flag)"}, {"intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "snippet": "message.set_boundary(boundary)"}, {"intent": "Return the name of the Python source file in which an `object` was defined .", "snippet": "inspect.getsourcefile(object)"}, {"intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "snippet": "connection.row_factory"}, {"intent": "Flag indicating whether or not the global data structures have been initialized.", "snippet": "mimetypes.inited"}, {"intent": "Append the string `s` to the MIME header .", "snippet": "header.append(s)"}, {"intent": "Generate a SIGABRT signal to the current process .", "snippet": "os.abort()"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths)"}, {"intent": "Can not access a needed shared library", "snippet": "errno.ELIBACC"}, {"intent": "Execute the init line provided in the `string` argument .", "snippet": "readline.parse_and_bind(string)"}, {"intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "snippet": "NNTP.getcapabilities()"}, {"intent": "Release a lock , decrementing the recursion level .", "snippet": "r_lock.release()"}, {"intent": "A legacy wrapper around find_spec ( ) . With arguments `fullname`.", "snippet": "path_finder.find_module(fullname)"}, {"intent": "Raised when there is an authentication error.", "snippet": "multiprocessing.AuthenticationError"}, {"intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "snippet": "multiprocessing.Condition(lock)"}, {"intent": "This member is either None or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.", "snippet": "_c_data._objects"}, {"intent": "The UTC timezone, timezone(timedelta(0)).", "snippet": "timezone.utc"}, {"intent": "The reset_mock method resets all the call attributes on a mock object :", "snippet": "mock.reset_mock()"}, {"intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)"}, {"intent": "A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic SP for the space character.", "snippet": "curses.ascii.controlnames"}, {"intent": "These functions are described in Files and Directories .", "snippet": "os.getcwd()"}, {"intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "snippet": "binhex.hexbin(input, output)"}, {"intent": "Wait until it is appropriate to resume writing to the stream .", "snippet": "stream_writer.drain()"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "snippet": "modulefinder.ModuleFinder(debug=0)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "snippet": "os.execv(path, args)"}, {"intent": "Enum class decorator that ensures only one name is bound to any one value .", "snippet": "enum.unique()"}, {"intent": "True if the polling object is closed.", "snippet": "devpoll.closed"}, {"intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "snippet": "inspect.iscoroutinefunction(object)"}, {"intent": "Between 1 and the number of days in the given month of the given year.", "snippet": "date.day"}, {"intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "snippet": "webbrowser.open_new_tab(url)"}, {"intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "snippet": "@unittest.skipIf(condition, reason)"}, {"intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "snippet": "controller.open(url, new=0)"}, {"intent": "Tuple of strings listing the field names.", "snippet": "somenamedtuple._fields"}, {"intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "snippet": "dispatcher.listen(backlog)"}, {"intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "snippet": "Record.SetString(field, value)"}, {"intent": "Record `handler` as the function to call when an object of a type matching `typekey` is passed to set_content ( ) .", "snippet": "content_manager.add_set_handler(typekey, handler)"}, {"intent": "Raised when an operation on a child process failed.", "snippet": "ChildProcessError"}, {"intent": "Prepares a `record` for queuing .", "snippet": "queue_handler.prepare(record)"}, {"intent": "Set to the data directory within the test package.", "snippet": "test.support.TEST_DATA_DIR"}, {"intent": "Remove the handler for the `sig` signal .", "snippet": "loop.remove_signal_handler(sig)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "snippet": "pickletools.dis(pickle)"}, {"intent": "Display the syntax error that just occurred .", "snippet": "InteractiveInterpreter.showsyntaxerror()"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "snippet": "gettext.find(domain, languages=None)"}, {"intent": "Release a semaphore , incrementing the internal counter by one .", "snippet": "semaphore.release()"}, {"intent": "The format string used to construct this Struct object.", "snippet": "struct.format"}, {"intent": "Files and subdirectories only in a.", "snippet": "dircmp.left_only"}, {"intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "snippet": "SSLContext.sni_callback"}, {"intent": "Interact with process :", "snippet": "process.communicate()"}, {"intent": "Closely emulate the behavior of the interactive Python interpreter .", "snippet": "code.InteractiveConsole()"}, {"intent": "Exit status of the child process.", "snippet": "completed_process.returncode"}, {"intent": "Open `fullurl` using the appropriate protocol . The `data` argument has the same meaning as the data argument of urlopen ( ) .", "snippet": "ur_lopener.open(fullurl, data=None)"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "snippet": "urllib.parse.quote_plus(string, safe='')"}, {"intent": "A special class-level marker to specify absence of default values and annotations.", "snippet": "parameter.empty"}, {"intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "snippet": "os.path.split(path)"}, {"intent": "CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol.", "snippet": "socket.CAN_ISOTP"}, {"intent": "Stops the listening server which was created with a call to listen ( ) .", "snippet": "logging.config.stopListening()"}, {"intent": "Checks for an ASCII lower-case character . With arguments `c`.", "snippet": "curses.ascii.islower(c)"}, {"intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "snippet": "message.__delitem__(name)"}, {"intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "snippet": "mimetypes.guess_all_extensions(type)"}, {"intent": "An error raised when something is impossible because of Sun AU specs or implementation deficiency.", "snippet": "sunau.Error"}, {"intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "snippet": "HTTPConnection.putheader(header, argument)"}, {"intent": "Decorator to ensure the threads are cleaned up even if the test fails . With arguments `func`.", "snippet": "@test.support.reap_threads(func)"}, {"intent": "Stop when returning from the given `frame` .", "snippet": "bdb.set_return(frame)"}, {"intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "snippet": "platform.python_build()"}, {"intent": "Decorator to indicate that annotations are not type hints.", "snippet": "@typing.no_type_check"}, {"intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "snippet": "str.swapcase()"}, {"intent": "Flag message number `which` for deletion .", "snippet": "POP3.dele(which)"}, {"intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "snippet": "multiprocessing.Queue()"}, {"intent": "Close connection established in open .", "snippet": "IMAP4.shutdown()"}, {"intent": "Check if there is a breakpoint for `lineno` of `filename` .", "snippet": "bdb.get_break(filename, lineno)"}, {"intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "snippet": "encodings.idna.ToASCII(label)"}, {"intent": "If `value` is not None , this function prints repr ( value ) to sys.stdout , and saves value in builtins._ .", "snippet": "sys.displayhook(value)"}, {"intent": "Recursively yield all descendant nodes in the tree starting at `node` ( including node itself ) , in no specified order .", "snippet": "ast.walk(node)"}, {"intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "snippet": "window.touchline(start, count, changed)"}, {"intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "snippet": "importlib.util.find_spec(name)"}, {"intent": "Return an instance of the test result class that should be used for this test case class ( if no other result instance is provided to the run ( ) method ) .", "snippet": "test_case.defaultTestResult()"}, {"intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "snippet": "ArgumentParser.parse_args(args=None)"}, {"intent": "Send a QUIT command to the server and close the connection .", "snippet": "FTP.quit()"}, {"intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "snippet": "socket.recv_into(buffer, nbytes)"}, {"intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "snippet": "msilib.add_stream(database, name, path)"}, {"intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) . The optional `verbose` argument controls how detailed the summary is .", "snippet": "doc_test_runner.summarize(verbose=None)"}, {"intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "snippet": "base_server.serve_forever(poll_interval=0.5)"}, {"intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "snippet": "urllib.parse.urlencode(query, safe='')"}, {"intent": "The asynchronous output buffer size (default 4096).", "snippet": "ac_out_buffer_size"}, {"intent": "Kill the subprocess by calling the kill ( ) method .", "snippet": "SubprocessTransport.close()"}, {"intent": "Return a list of 3-element tuples , each describing a particular type of module .", "snippet": "imp.get_suffixes()"}, {"intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "snippet": "chr(i)"}, {"intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "snippet": "loop.call_at(when, callback, *args)"}, {"intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "snippet": "curses.ascii.iscntrl(c)"}, {"intent": "Invoke the built-in help system .", "snippet": "help()"}, {"intent": "Read exactly `n` bytes .", "snippet": "stream_reader.readexactly(n)"}, {"intent": "See the documentation for the functions explained above .", "snippet": "pdb.set_trace()"}, {"intent": "The error raised for bad ZIP files.", "snippet": "zipfile.BadZipFile"}, {"intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "snippet": "email.encoders.encode_base64(msg)"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "snippet": "doctest.DocTestRunner()"}, {"intent": "Put `obj` into the queue .", "snippet": "queue.put(obj)"}, {"intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "snippet": "profile.print_stats(sort=-1)"}, {"intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "snippet": "aifc.getmark(id)"}, {"intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "snippet": "csv.writer(csvfile, **fmtparams)"}, {"intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "snippet": "turtle.listen()"}, {"intent": "Unpacks a single-precision floating point number .", "snippet": "Unpacker.unpack_float()"}, {"intent": "Set to True when the execution of tests should stop by stop().", "snippet": "test_result.shouldStop"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) .", "snippet": "tempfile.TemporaryDirectory()"}, {"intent": "Return `num` cryptographically strong pseudo-random bytes .", "snippet": "ssl.RAND_bytes(num)"}, {"intent": "Provide `data` which should be formatted with collapsed whitespace .", "snippet": "formatter.add_flowing_data(data)"}, {"intent": "Whether writes are passed immediately to the underlying binary buffer.", "snippet": "text_io_wrapper.write_through"}, {"intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "snippet": "doctest.IGNORE_EXCEPTION_DETAIL"}, {"intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "snippet": "html_diff.__init__(wrapcolumn=None)"}, {"intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "snippet": "loop.getnameinfo(sockaddr)"}, {"intent": "A possibly empty tuple of Address objects representing the addresses in the group.", "snippet": "group.addresses"}, {"intent": "The UUID as a 128-bit integer.", "snippet": "UUID.int"}, {"intent": "Return the process group id of the process with process id `pid` .", "snippet": "os.getpgid(pid)"}, {"intent": "A string containing all ASCII characters that are considered whitespace.", "snippet": "string.whitespace"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "snippet": "datetime.datetime(year, month, day, hour=0, minute=0)"}, {"intent": "A tuple of five integers representing version information about the OpenSSL library:", "snippet": "ssl.OPENSSL_VERSION_INFO"}, {"intent": "The largest year number allowed in a date or datetime object.", "snippet": "datetime.MAXYEAR"}, {"intent": "Increments the progress bar \u2019 s value by `amount` .", "snippet": "widget.step()"}, {"intent": "The `record` is formatted , and then sent to the syslog server .", "snippet": "sys_log_handler.emit(record)"}, {"intent": "Load a set of default \u201c certification authority \u201d ( CA ) certificates from default locations . The `purpose` flag specifies what kind of CA certificates are loaded .", "snippet": "SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "snippet": "smtpd.SMTPChannel(server, conn, addr)"}, {"intent": "Create a new ArgumentParser object . With arguments `usage`.", "snippet": "argparse.ArgumentParser(usage=None)"}, {"intent": "Return the ASCII value corresponding to the low 7 bits of `c` .", "snippet": "curses.ascii.ascii(c)"}, {"intent": "The length in bytes of one array item in the internal representation.", "snippet": "array.itemsize"}, {"intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "snippet": "HTTPSHandler.https_open(req)"}, {"intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "snippet": "xml.dom.pulldom.parseString(string)"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 .", "snippet": "base64.a85encode(b, foldspaces=False)"}, {"intent": "Network dropped connection because of reset", "snippet": "errno.ENETRESET"}, {"intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "snippet": "socket.socketpair(family, type)"}, {"intent": "Close the transport immediately , without waiting for pending operations to complete .", "snippet": "WriteTransport.abort()"}, {"intent": "Subscribe to new `mailbox` .", "snippet": "IMAP4.subscribe(mailbox)"}, {"intent": "Create a new event loop object .", "snippet": "asyncio.new_event_loop()"}, {"intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "snippet": "subprocess.call(args, stdout=None)"}, {"intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "snippet": "Pattern.split(string)"}, {"intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "snippet": "lzma.LZMAFile(filename=None)"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein .", "snippet": "pickle.load(file)"}, {"intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "snippet": "scheduler.run(blocking=True)"}, {"intent": "32-bit number.", "snippet": "winreg.REG_DWORD"}, {"intent": "Receive notification of the beginning of a document .", "snippet": "ContentHandler.startDocument()"}, {"intent": "A list of Class objects which describe the immediate base classes of the class being described.", "snippet": "Class.super"}, {"intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "snippet": "time.gmtime(secs)"}, {"intent": "Returns the alignment requirements of a ctypes type . `obj_or_type` must be a ctypes type or instance .", "snippet": "ctypes.alignment(obj_or_type)"}, {"intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "snippet": "getopt.gnu_getopt(args)"}, {"intent": "(default: \"store\")", "snippet": "Option.action"}, {"intent": "Read a bytes object from the user , with primitive line editing capacity .", "snippet": "window.getstr()"}, {"intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "snippet": "wsgiref.handlers.IISCGIHandler"}, {"intent": "Print a table of contents to sys.stdout .", "snippet": "TarFile.list()"}, {"intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "snippet": "py_zip_file.writepy(pathname)"}, {"intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero .", "snippet": "time.gmtime()"}, {"intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "snippet": "asyncore.loop(timeout, use_poll, map, count)"}, {"intent": "This is a NamedNodeMap giving the definitions of external entities.", "snippet": "DocumentType.entities"}, {"intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "snippet": "os.path.relpath(path)"}, {"intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "snippet": "tempfile.TemporaryFile(mode='w+b')"}, {"intent": "Instructs writer objects to quote all non-numeric fields.", "snippet": "csv.QUOTE_NONNUMERIC"}, {"intent": "Returns a started SyncManager object which can be used for sharing objects between processes .", "snippet": "multiprocessing.Manager()"}, {"intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "snippet": "curses.getwin(file)"}, {"intent": "Get line `lineno` from file named `filename` .", "snippet": "linecache.getline(filename, lineno)"}, {"intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)"}, {"intent": "The string passed to match() or search().", "snippet": "Match.string"}, {"intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "snippet": "pool.apply_async(func, args)"}, {"intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "snippet": "crypt.crypt(word)"}, {"intent": "Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer.", "snippet": "os.SCHED_BATCH"}, {"intent": "Returns the data column identifier of the cell at position `x` .", "snippet": "widget.identify_column(x)"}, {"intent": "Connect a local manager object to a remote manager process :", "snippet": "base_manager.connect()"}, {"intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "snippet": "prototype(vtbl_index, name, paramflags, iid)"}, {"intent": "Receive up to `nbytes` from `sock` .", "snippet": "loop.sock_recv(sock, nbytes)"}, {"intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "snippet": "base_server.socket_type"}, {"intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "snippet": "exit_stack.callback(callback, *args, **kwds)"}, {"intent": "Return the TurtleScreen object the turtle is drawing on .", "snippet": "turtle.getscreen()"}, {"intent": "A dict of keyword arguments values.", "snippet": "bound_arguments.kwargs"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "snippet": "cmath.isclose(a, b, rel_tol=1e-09)"}, {"intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "snippet": "binascii.a2b_qp(data)"}, {"intent": "The base class for all built-in exceptions.", "snippet": "BaseException"}, {"intent": "Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters , false otherwise .", "snippet": "bytes.islower()"}, {"intent": "(default: '') String that will be prepended to the first line of wrapped output.", "snippet": "text_wrapper.initial_indent"}, {"intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "snippet": "str.translate(table)"}, {"intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "snippet": "watched_file_handler.emit(record)"}, {"intent": "This exception is raised when a foreign function call cannot convert one of the passed arguments.", "snippet": "ctypes.ArgumentError"}, {"intent": "True if the address is allocated for private networks.", "snippet": "i_pv4_address.is_private"}, {"intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "snippet": "somenamedtuple._replace(**kwargs)"}, {"intent": "Return the window contents as a string ; whether blanks in the window are included is affected by the stripspaces member .", "snippet": "textbox.gather()"}, {"intent": "Process objects represent activity that is run in a separate process .", "snippet": "multiprocessing.Process()"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, blocked=())"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . With arguments `\\t'`.", "snippet": "header.encode(\\t', splitchars=';)"}, {"intent": "Return the PEP 3147/PEP 488 `path` to the byte-compiled file associated with the source path . The `optimization` parameter is used to specify the optimization level of the bytecode file .", "snippet": "importlib.util.cache_from_source(path, optimization=None)"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `keyfile` is given , the KeyPath is left null in the Component table .", "snippet": "directory.start_component(keyfile=None)"}, {"intent": "String of ASCII characters which are considered printable.", "snippet": "string.printable"}, {"intent": "Unpack from the `buffer` buffer ( presumably packed by pack ( `format` , ... ) ) according to the format string format .", "snippet": "struct.unpack(format, buffer)"}, {"intent": "Wait till an object in `object_list` is ready .", "snippet": "multiprocessing.connection.wait(object_list)"}, {"intent": "Test that the multiline string `first` is equal to the string `second` .", "snippet": "test_case.assertMultiLineEqual(first, second)"}, {"intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "snippet": "maildir.add_folder(folder)"}, {"intent": "Return true if the `object` is a Python generator function .", "snippet": "inspect.isgeneratorfunction(object)"}, {"intent": "A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "snippet": "crypt.METHOD_SHA512"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "snippet": "email.utils.formatdate(localtime=False)"}, {"intent": "Permanently remove deleted items from selected mailbox .", "snippet": "IMAP4.expunge()"}, {"intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "snippet": "pprint.PrettyPrinter(compact=False)"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "snippet": "urllib.request.Request(url, headers={})"}, {"intent": "Return the group database entry for the given numeric group ID . With arguments `gid`.", "snippet": "grp.getgrgid(gid)"}, {"intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "snippet": "itertools.zip_longest(*iterables, fillvalue=None)"}, {"intent": "ABCs for mapping, items, keys, and values views.", "snippet": "collections.abc.MappingView"}, {"intent": "Write the contents of `buffers` to file descriptor `fd` .", "snippet": "os.writev(fd, buffers)"}, {"intent": "Return the floor of `x` , the largest integer less than or equal to x .", "snippet": "math.floor(x)"}, {"intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "snippet": "FileCookieJar.save(filename=None, ignore_discard=False)"}, {"intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "snippet": "CookieJar.extract_cookies(response, request)"}, {"intent": "Perform the equivalent of an lstat ( ) system call on the given `path` .", "snippet": "os.lstat(path)"}, {"intent": "Remove any unhandled source text from the input buffer .", "snippet": "InteractiveConsole.resetbuffer()"}, {"intent": "Update the set, keeping only elements found in it and all others.", "snippet": "set &= other & ..."}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(passwd='')"}, {"intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "snippet": "html.unescape(s)"}, {"intent": "The earliest representable date, date(MINYEAR, 1, 1).", "snippet": "date.min"}, {"intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "snippet": "text_io_base.encoding"}, {"intent": "A concrete implementation of importlib.abc.FileLoader which can import bytecode files ( i.e . With arguments `fullname`, `path`.", "snippet": "importlib.machinery.SourcelessFileLoader(fullname, path)"}, {"intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)"}, {"intent": "Undo ( repeatedly ) the last turtle action ( s ) .", "snippet": "turtle.undo()"}, {"intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)"}, {"intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)"}, {"intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "snippet": "ctypes.PyDLL(name)"}, {"intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "snippet": "BaseHandler.default_open(req)"}, {"intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` . With arguments `flags`.", "snippet": "re.finditer(pattern, string, flags=0)"}, {"intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "snippet": "turtle.tilt(angle)"}, {"intent": "Return a randomly-chosen element from a non-empty `sequence` .", "snippet": "secrets.choice(sequence)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "snippet": "difflib.unified_diff(a, b)"}, {"intent": "The factory method of SocketHandler is here overridden to create a UDP socket ( socket.SOCK_DGRAM ) .", "snippet": "datagram_handler.makeSocket()"}, {"intent": "Set parsing to not stop on the first non-option , allowing interspersing switches with command arguments .", "snippet": "OptionParser.enable_interspersed_args()"}, {"intent": "The named tuple flags exposes the status of command line flags.", "snippet": "sys.flags"}, {"intent": "Called after the handle ( ) method to perform any clean-up actions required .", "snippet": "base_request_handler.finish()"}, {"intent": "Return True if the block is a nested class or function .", "snippet": "symbol_table.is_nested()"}, {"intent": "Determine whether `code` is in tableC.7 ( Inappropriate for canonical representation ) .", "snippet": "stringprep.in_table_c7(code)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "snippet": "subprocess.Popen(args, cwd=None)"}, {"intent": "The canonical name of this hash, always lowercase and always suitable as a parameter to new() to create another hash of this type.", "snippet": "hash.name"}, {"intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "snippet": "turtle.shape()"}, {"intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "snippet": "exit_stack.push(exit)"}, {"intent": "When this namespace is specified, the name string is an X.500 DN in DER or a text output format.", "snippet": "uuid.NAMESPACE_X500"}, {"intent": "The number of bytes that can be allocated for POSIX message queues.", "snippet": "resource.RLIMIT_MSGQUEUE"}, {"intent": "Determine whether `code` is in tableC.1.1 ( ASCII space characters ) .", "snippet": "stringprep.in_table_c11(code)"}, {"intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "snippet": "curses.ascii.isdigit(c)"}, {"intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "snippet": "pstats.Stats(*filenames or profile)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display)"}, {"intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "snippet": "locale.YESEXPR"}, {"intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "snippet": "example.indent"}, {"intent": "Time of most recent access expressed in nanoseconds as an integer.", "snippet": "stat_result.st_atime_ns"}, {"intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "snippet": "module_finder.run_script(pathname)"}, {"intent": "Change the root directory of the current process to `path` .", "snippet": "os.chroot(path)"}, {"intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "snippet": "test_loader.testNamePatterns"}, {"intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "snippet": "test.support.get_attribute(obj, name)"}, {"intent": "Set `field` to the contents of the file named `value` , through MsiRecordSetStream ( ) .", "snippet": "Record.SetStream(field, value)"}, {"intent": "The http.cookiejar.CookieJar in which cookies are stored.", "snippet": "HTTPCookieProcessor.cookiejar"}, {"intent": "Write a row with the field names ( as specified in the constructor ) .", "snippet": "DictWriter.writeheader()"}, {"intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "snippet": "re.fullmatch(pattern, string)"}, {"intent": "Attach the watcher to an event `loop` .", "snippet": "windows_proactor_event_loop_policy.attach_loop(loop)"}, {"intent": "Enable stricter semantics for mixing floats and Decimals.", "snippet": "decimal.FloatOperation"}, {"intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "snippet": "ctypes.pythonapi"}, {"intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "snippet": "task.get_stack(limit=None)"}, {"intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "snippet": "email_policy.fold(name, value)"}, {"intent": "Which package a module belongs to.", "snippet": "module_type.__package__"}, {"intent": "Return date object with same year , month and day .", "snippet": "datetime.date()"}, {"intent": "Set parsing to stop on the first non-option .", "snippet": "OptionParser.disable_interspersed_args()"}, {"intent": "The ID of the integrity check used by the input stream.", "snippet": "lzma_decompressor.check"}, {"intent": "Pickles the record \u2019 s attribute dictionary and writes it to the socket in binary format .", "snippet": "socket_handler.emit()"}, {"intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "snippet": "random.Random(seed)"}, {"intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "snippet": "hex(x)"}, {"intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "snippet": "widget.enable_traversal()"}, {"intent": "This method always returns a list of values associated with form field `name` .", "snippet": "FieldStorage.getlist(name)"}, {"intent": "Make sure nframes is correct , and close the file .", "snippet": "AU_write.close()"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database .", "snippet": "shelve.open(filename)"}, {"intent": "Represents the C double datatype.", "snippet": "ctypes.c_double"}, {"intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "snippet": "sys.getrecursionlimit()"}, {"intent": "Decode a message `header` value without converting the character set .", "snippet": "email.header.decode_header(header)"}, {"intent": "Wait for the worker processes to exit .", "snippet": "pool.join()"}, {"intent": "Constants used in the mask arguments.", "snippet": "tkinter.READABLE"}, {"intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "snippet": "SMTP.sendmail(from_addr, to_addrs, msg)"}, {"intent": "There is really only one valid value for the MIME-Version header, and that is 1.0.", "snippet": "email.headerregistry.MIMEVersionHeader"}, {"intent": "Return a tuple containing names of parameters to this function .", "snippet": "function.get_parameters()"}, {"intent": "A stream implementation using an in-memory bytes buffer . The optional argument `initial_bytes` is a bytes-like object that contains initial data .", "snippet": "io.BytesIO(initial_bytes)"}, {"intent": "Create a new request handler instance.", "snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler"}, {"intent": "A dictionary of the various implementation-specific flags passed through the -X command-line option.", "snippet": "sys._xoptions"}, {"intent": "Install a timer that calls `fun` after `t` milliseconds .", "snippet": "turtle.ontimer(fun)"}, {"intent": "Close the event loop .", "snippet": "loop.close()"}, {"intent": "Represents the C signed int datatype.", "snippet": "ctypes.c_int"}, {"intent": "Print statistics during collection.", "snippet": "gc.DEBUG_STATS"}, {"intent": "Change system call restart behaviour : if `flag` is False , system calls will be restarted when interrupted by signal `signalnum` , otherwise system calls will be interrupted .", "snippet": "signal.siginterrupt(signalnum, flag)"}, {"intent": "Context manager to wait until all threads created in the with statement exit .", "snippet": "test.support.wait_threads_exit()"}, {"intent": "Send a pickled byte-string `packet` to the socket .", "snippet": "socket_handler.send(packet)"}, {"intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "snippet": "Packer.pack_array(list, pack_item)"}, {"intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "snippet": "cursor.executescript(sql_script)"}, {"intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "snippet": "binascii.a2b_base64(string)"}, {"intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "snippet": "contextlib.AbstractContextManager"}, {"intent": "Implements a mutex lock for asyncio tasks .", "snippet": "asyncio.Lock()"}, {"intent": "The base class for implementing protocols communicating with child processes ( unidirectional pipes ) . With arguments `BaseProtocol`.", "snippet": "asyncio.SubprocessProtocol(BaseProtocol)"}, {"intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "snippet": "str.find(sub, start, end)"}, {"intent": "Load a shared library into the process and return it . With arguments `name`.", "snippet": "library_loader.LoadLibrary(name)"}, {"intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "snippet": "queue_handler.emit(record)"}, {"intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type .", "snippet": "ctypes.byref(obj)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)"}, {"intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "snippet": "json.JSONEncoder(skipkeys=False)"}, {"intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "snippet": "sys.call_tracing(func, args)"}, {"intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "snippet": "null_translations.install(names=None)"}, {"intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "snippet": "dict.fromkeys(iterable, value)"}, {"intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "snippet": "FTP.transfercmd(cmd)"}, {"intent": "A string containing the copyright pertaining to the Python interpreter.", "snippet": "sys.copyright"}, {"intent": "Acquire the interpreter \u2019 s global import lock for the current thread .", "snippet": "imp.acquire_lock()"}, {"intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "snippet": "tarfile.ENCODING"}, {"intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "snippet": "typing.get_type_hints(obj, globals, locals)"}, {"intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "snippet": "text_wrapper.subsequent_indent"}, {"intent": "Join the background thread .", "snippet": "queue.join_thread()"}, {"intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "snippet": "time.strftime(format)"}, {"intent": "Represent an `address` as 16 packed bytes in network ( big-endian ) order .", "snippet": "ipaddress.v6_int_to_packed(address)"}, {"intent": "Return a deep copy of `x` .", "snippet": "copy.deepcopy(x)"}, {"intent": "Number of items allowed in the queue.", "snippet": "queue.maxsize"}, {"intent": "Describes how argument values are bound to the parameter.", "snippet": "parameter.kind"}, {"intent": "The maximum size (in bytes) of the call stack for the current process.", "snippet": "resource.RLIMIT_STACK"}, {"intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "snippet": "charset.__eq__(other)"}, {"intent": "Call the system call setpgid ( ) to set the process group id of the process with id `pid` to the process group with id `pgrp` .", "snippet": "os.setpgid(pid, pgrp)"}, {"intent": "Return the charset parameter of the Content-Type header , coerced to lower case . If there is no Content-Type header , or if that header has no charset parameter , `failobj` is returned .", "snippet": "message.get_content_charset(failobj=None)"}, {"intent": "Sets the public identifier of this InputSource . With arguments `id`.", "snippet": "InputSource.setPublicId(id)"}, {"intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "snippet": "NNTP.over(message_spec)"}, {"intent": "This is a straightforward interface to the Unix select ( ) system call . The optional `timeout` argument specifies a time-out as a floating point number in seconds . With arguments `rlist`, `wlist`, `xlist`.", "snippet": "select.select(rlist, wlist, xlist, timeout)"}, {"intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "snippet": "ast.fix_missing_locations(node)"}, {"intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "snippet": "fraction.__round__(ndigits)"}, {"intent": "Send the signal `signalnum` to the thread `thread_id` , another thread in the same process as the caller .", "snippet": "signal.pthread_kill(thread_id, signalnum)"}, {"intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`, `multiprocess`.", "snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "snippet": "TarFile.extract(member, path=\"\", set_attrs=True)"}, {"intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "snippet": "urllib.request.HTTPSHandler(debuglevel=0)"}, {"intent": "Return the error message corresponding to the error `code` in code .", "snippet": "os.strerror(code)"}, {"intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "snippet": "sys.setcheckinterval(interval)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "snippet": "pkgutil.walk_packages()"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "snippet": "difflib.context_diff(a, b)"}, {"intent": "Turn off the standout attribute .", "snippet": "window.standend()"}, {"intent": "Limits on the number of entries represented for the named object type.", "snippet": "Repr.maxdict"}, {"intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found . `namespaces` is an optional mapping from namespace prefix to full name .", "snippet": "element.findtext(match, default=None, namespaces=None)"}, {"intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "snippet": "tkinter.tix.Meter"}, {"intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "snippet": "io.BlockingIOError"}, {"intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "snippet": "decimal.radix()"}, {"intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "snippet": "faulthandler.disable()"}, {"intent": "Insert an `ms` millisecond pause in output .", "snippet": "curses.delay_output(ms)"}, {"intent": "Open local files.", "snippet": "urllib.request.FileHandler"}, {"intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "snippet": "Match.start(group)"}, {"intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "snippet": "cgitb.text(info)"}, {"intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "snippet": "Pattern.search(string)"}, {"intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "snippet": "ensurepip.bootstrap(upgrade=False)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "snippet": "smtplib.SMTP(source_address=None)"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')"}, {"intent": "Transfers the callback stack to a fresh ExitStack instance and returns it .", "snippet": "exit_stack.pop_all()"}, {"intent": "Rounding occurred though possibly no information was lost.", "snippet": "decimal.Rounded"}, {"intent": "Write the snapshot into a file . With arguments `filename`.", "snippet": "snapshot.dump(filename)"}, {"intent": "Save the current state of the terminal modes in a buffer , usable by resetty ( ) .", "snippet": "curses.savetty()"}, {"intent": "Stop all active patches .", "snippet": "patch.stopall()"}, {"intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "snippet": "msilib.Control(dlg, name)"}, {"intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "snippet": "ftplib.FTP_TLS(user='')"}, {"intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "snippet": "NNTP.list(group_pattern=None)"}, {"intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "snippet": "template.substitute(mapping, **kwds)"}, {"intent": "(default: 70) The maximum length of wrapped lines.", "snippet": "text_wrapper.width"}, {"intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "snippet": "xml.dom.InuseAttributeErr"}, {"intent": "Returns the name assigned to the character `chr` as a string . If no name is defined , `default` is returned , or , if not given , ValueError is raised .", "snippet": "unicodedata.name(chr, default)"}, {"intent": "Write audio frames , without correcting nframes . With arguments `data`.", "snippet": "AU_write.writeframesraw(data)"}, {"intent": "Computes the `network` definitions resulting from removing the given network from this one .", "snippet": "i_pv4_network.address_exclude(network)"}, {"intent": "Return a tuple containing names of free variables in this function .", "snippet": "function.get_frees()"}, {"intent": "A class method called after tests in an individual class have run .", "snippet": "test_case.tearDownClass()"}, {"intent": "For addresses that appear to be Teredo addresses (starting with 2001::/32) as defined by RFC 4380, this property will report the embedded (server, client) IP address pair.", "snippet": "i_pv6_address.teredo"}, {"intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "snippet": "csvwriter.writerows(rows)"}, {"intent": "Remove ( delete ) the directory `path` .", "snippet": "os.rmdir(path)"}, {"intent": "Sleep for `ms` milliseconds .", "snippet": "curses.napms(ms)"}, {"intent": "This constant is true if Python was not started with an -O option.", "snippet": "__debug__"}, {"intent": "Dictionary mapping filename extensions to MIME types.", "snippet": "mimetypes.types_map"}, {"intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "snippet": "counter.update(iterable-or-mapping)"}, {"intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "snippet": "radio_button_group.add(name, x, y, width, height, text)"}, {"intent": "Similar to monotonic ( ) , but return time as nanoseconds .", "snippet": "time.monotonic_ns()"}, {"intent": "Return the shadow password database entry for the given user `name` .", "snippet": "spwd.getspnam(name)"}, {"intent": "Gets the element attribute named `key` . Returns the attribute value , or `default` if the attribute was not found .", "snippet": "element.get(key, default=None)"}, {"intent": "Bind `fun` to mouse-click events on this turtle .", "snippet": "turtle.onclick(fun)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input .", "snippet": "turtle.numinput(title, prompt)"}, {"intent": "A string identifying what kind of data this element represents (the element type, in other words).", "snippet": "element.tag"}, {"intent": "Return True if the message \u2019 s payload is a list of sub-Message objects , otherwise return False .", "snippet": "message.is_multipart()"}, {"intent": "Return the message \u2019 s sub-content type .", "snippet": "message.get_content_subtype()"}, {"intent": "Return a shallow copy of `x` .", "snippet": "copy.copy(x)"}, {"intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "snippet": "asyncio.shield(aw)"}, {"intent": "Bad font file format", "snippet": "errno.EBFONT"}, {"intent": "A callable that takes two arguments, name and value, where name is a header field name and value is an unfolded header field value, and returns a string subclass that represents that header.", "snippet": "email_policy.header_factory"}, {"intent": "The annotation for the parameter.", "snippet": "parameter.annotation"}, {"intent": "Write all data associated with the window into the provided `file` object .", "snippet": "window.putwin(file)"}, {"intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "snippet": "io.StringIO(newline='\\n')"}, {"intent": "Return the beginning coordinates of this window relative to its parent window as a tuple ( y , x ) .", "snippet": "window.getparyx()"}, {"intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "snippet": "stat.filemode(mode)"}, {"intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "snippet": "winreg.SetValue(key, sub_key, type, value)"}, {"intent": "Load the key generation parameters for Diffie-Hellman ( DH ) key exchange . The `dhfile` parameter should be the path to a file containing DH parameters in PEM format .", "snippet": "SSLContext.load_dh_params(dhfile)"}, {"intent": "Define the URL of a dedicated HTTP server for the network tests.", "snippet": "test.support.TEST_HTTP_URL"}, {"intent": "Play the sound repeatedly.", "snippet": "winsound.SND_LOOP"}, {"intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "snippet": "cgihttp_request_handler.do_POST()"}, {"intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "snippet": "curses.textpad.Textbox(win)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, spec=None)"}, {"intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)"}, {"intent": "Add `prefix` to the beginning of selected lines in `text` .", "snippet": "textwrap.indent(text, prefix)"}, {"intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "snippet": "turtle.back(distance)"}, {"intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "snippet": "tkinter.tix.ComboBox"}, {"intent": "Touch the entire window , causing it to be completely redrawn on the next refresh ( ) call .", "snippet": "window.redrawwin()"}, {"intent": "Encoding used to encode method arguments (Unicode strings and characters).", "snippet": "window.encoding"}, {"intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "snippet": "os.pread(fd, n, offset)"}, {"intent": "Decorator to mark generator-based coroutines.", "snippet": "@asyncio.coroutine"}, {"intent": "A read-only property.", "snippet": "Token.var"}, {"intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "snippet": "tkinter.tix.tixCommand"}, {"intent": "The one and only root element of the document.", "snippet": "Document.documentElement"}, {"intent": "Create an epoll object from a given file descriptor . With arguments `fd`.", "snippet": "epoll.fromfd(fd)"}, {"intent": "Return immediately, allowing sounds to play asynchronously.", "snippet": "winsound.SND_ASYNC"}, {"intent": "This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.", "snippet": "difflib.Differ"}, {"intent": "Add `x` to the right side of the deque .", "snippet": "deque.append(x)"}, {"intent": "Return a duplicate of file descriptor `fd` .", "snippet": "os.dup(fd)"}, {"intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "snippet": "calendar.weekday(year, month, day)"}, {"intent": "A context manager that temporarily changes the current working directory to `path` and yields the directory .", "snippet": "test.support.change_cwd(path)"}, {"intent": "Robust test CGI script , usable as main program .", "snippet": "cgi.test()"}, {"intent": "Get the maximum number of frames stored in the traceback of a trace .", "snippet": "tracemalloc.get_traceback_limit()"}, {"intent": "Set the scrolling region from line `top` to line `bottom` .", "snippet": "window.setscrreg(top, bottom)"}, {"intent": "Force the malloc ( ) heap to clean itself up and return unused blocks to the operating system .", "snippet": "msvcrt.heapmin()"}, {"intent": "A subclass of ImportError which is raised by import when a module could not be located.", "snippet": "ModuleNotFoundError"}, {"intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "snippet": "binascii.crc32(data, value)"}, {"intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "snippet": "doc_test_parser.parse(string)"}, {"intent": "The flag is used to transform generators into generator-based coroutines.", "snippet": "inspect.CO_ITERABLE_COROUTINE"}, {"intent": "Replace special characters in `string` using the % xx escape .", "snippet": "urllib.parse.quote(string)"}, {"intent": "The standard output device.", "snippet": "subprocess.STD_OUTPUT_HANDLE"}, {"intent": "Return the product of `x` and `y` .", "snippet": "context.multiply(x, y)"}, {"intent": "Size in bytes.", "snippet": "TarInfo.size"}, {"intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "snippet": "locale.strcoll(string1, string2)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)"}, {"intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "snippet": "config_parser.read_file(f)"}, {"intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "snippet": "message.get_boundary()"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getint(section, option, fallback)"}, {"intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "snippet": "test_case.assertDictEqual(first, second)"}, {"intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme .", "snippet": "sysconfig.get_path(name, scheme)"}, {"intent": "Make the turtle invisible .", "snippet": "turtle.hideturtle()"}, {"intent": "The offset of the local DST timezone, in seconds west of UTC, if one is defined.", "snippet": "time.altzone"}, {"intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "socketserver.UnixStreamServer(server_address, RequestHandlerClass)"}, {"intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "snippet": "base_selector.register(fileobj, events, data=None)"}, {"intent": "Symbolic link.", "snippet": "stat.S_IFLNK"}, {"intent": "Move the window inside its parent window . With arguments `y`, `x`.", "snippet": "window.mvderwin(y, x)"}, {"intent": "The name of the module defining the class described.", "snippet": "Class.module"}, {"intent": "A list of queued input lines.", "snippet": "Cmd.cmdqueue"}, {"intent": "Return the name of the directory used for temporary files .", "snippet": "tempfile.gettempdir()"}, {"intent": "Return true if `s` is a Python keyword .", "snippet": "keyword.iskeyword(s)"}, {"intent": "Set all the above parameters at once . With arguments `nchannels`, `sampwidth`, `framerate`, `comptype`, `compname`.", "snippet": "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)"}, {"intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "snippet": "Element.setAttributeNode(newAttr)"}, {"intent": "Set the `flags` of `path` to the numeric flags .", "snippet": "os.chflags(path, flags)"}, {"intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "snippet": "argparse.Namespace"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)"}, {"intent": "De-initialize the library , and return terminal to normal status .", "snippet": "curses.endwin()"}, {"intent": "Return the character at the given position in the window . With arguments `y`, `x`.", "snippet": "window.inch(y, x)"}, {"intent": "A string of bytes read before the end of stream was reached.", "snippet": "abstract_event_loop.partial"}, {"intent": "Logs an accepted ( successful ) request .", "snippet": "base_http_request_handler.log_request()"}, {"intent": "A boolean indicating whether the memory BIO is current at the end-of-file position.", "snippet": "memory_bio.eof"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "snippet": "ArgumentParser.add_argument(name or flags..., action)"}, {"intent": "The cursor method accepts a single optional parameter `factory` .", "snippet": "connection.cursor()"}, {"intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "snippet": "parser.compilest(st)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "snippet": "urllib.parse.urlencode(query, doseq=False)"}, {"intent": "Add a ( possibly multi-valued ) header , with optional MIME parameters specified via keyword arguments . `name` is the header field to add . If the parameter `value` is a string , it is added to the header value parameters in the form name= '' value '' . With arguments `**_params`.", "snippet": "headers.add_header(name, value, **_params)"}, {"intent": "Method called when a processing instruction is encountered . The `data` parameter will contain the entire processing instruction .", "snippet": "HTMLParser.handle_pi(data)"}, {"intent": "Parses an XML document from a `sequence` of string fragments .", "snippet": "xml.etree.ElementTree.fromstringlist(sequence)"}, {"intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "snippet": "list(iterable)"}, {"intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "snippet": "secrets.token_urlsafe()"}, {"intent": "Create a hard link pointing to `src` named `dst` .", "snippet": "os.link(src, dst)"}, {"intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "snippet": "turtle.onclick(fun, add=None)"}, {"intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "snippet": "typing.NewType(typ)"}, {"intent": "Load a plist from a bytes object . With arguments `data`.", "snippet": "plistlib.loads(data)"}, {"intent": "True if other code jumps to here, otherwise False", "snippet": "is_jump_target"}, {"intent": "Altered an exponent to fit representation constraints.", "snippet": "decimal.Clamped"}, {"intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "snippet": "curses.start_color()"}, {"intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "snippet": "bytearray(source, encoding)"}, {"intent": "A class to handle HTTP Cookies .", "snippet": "urllib.request.HTTPCookieProcessor()"}, {"intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "snippet": "socket.shutdown(how)"}, {"intent": "When a BabylMessage instance \u2019 s original headers are modified , the visible headers are not automatically modified to correspond .", "snippet": "babyl_message.update_visible()"}, {"intent": "Set to a non-ASCII name for a temporary file.", "snippet": "test.support.TESTFN_UNICODE"}, {"intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "snippet": "base_selector.select()"}, {"intent": "Return the negation of the argument .", "snippet": "decimal.copy_negate()"}, {"intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "snippet": "config_parser.read(filenames, encoding=None)"}, {"intent": "Raised when an operation or function is applied to an object of inappropriate type.", "snippet": "TypeError"}, {"intent": "Mark all lines in the window as unchanged since the last call to refresh ( ) .", "snippet": "window.untouchwin()"}, {"intent": "Return an input stream object suitable for use as the wsgi.input of the request currently being processed .", "snippet": "base_handler.get_stdin()"}, {"intent": "Wait until the thread terminates .", "snippet": "thread.join()"}, {"intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "snippet": "config_parser.read_string(string, source='<string>')"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used .", "snippet": "warnings.warn(message)"}, {"intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "snippet": "Template.prepend(cmd, kind)"}, {"intent": "Class that implements the default pseudo-random number generator used by the random module .", "snippet": "random.Random()"}, {"intent": "Returns a normalized locale code for the given locale name . With arguments `localename`.", "snippet": "locale.normalize(localename)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "snippet": "urllib.request.urlopen(url, cadefault=False)"}, {"intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "snippet": "bisect.insort_left(a, x, lo=0)"}, {"intent": "All arguments are optional . With arguments `hour`.", "snippet": "datetime.time(hour=0)"}, {"intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "snippet": "math.isinf(x)"}, {"intent": "Whether `K` is a member of the set of keys of a Morsel .", "snippet": "Morsel.isReservedKey(K)"}, {"intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "snippet": "loop.sendfile(transport, file, offset=0, count=None)"}, {"intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "snippet": "inspect.getclasstree(classes, unique=False)"}, {"intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "snippet": "pdb.runeval(expression, globals=None)"}, {"intent": "Remove the file named `filename` from the server .", "snippet": "FTP.delete(filename)"}, {"intent": "Constructor for a priority queue .", "snippet": "queue.PriorityQueue()"}, {"intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "snippet": "stringprep.in_table_c4(code)"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' . With arguments `**kw`.", "snippet": "json.load(fp, **kw, parse_constant=None)"}, {"intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "snippet": "str.expandtabs(tabsize=8)"}, {"intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "snippet": "ctypes.create_unicode_buffer(init_or_size)"}, {"intent": "Used internally for PIL-style arrays.", "snippet": "memoryview.suboffsets"}, {"intent": "This method is called when a comment is encountered ( e.g . With arguments `data`.", "snippet": "HTMLParser.handle_comment(data)"}, {"intent": "Sequence of bytecodes that have a relative jump target.", "snippet": "dis.hasjrel"}, {"intent": "Return an item if one is immediately available , else raise QueueEmpty .", "snippet": "queue.get_nowait()"}, {"intent": "A decorator indicating abstract methods.", "snippet": "@abc.abstractmethod"}, {"intent": "Type variable.", "snippet": "typing.TypeVar"}, {"intent": "The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "snippet": "types.BuiltinFunctionType"}, {"intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "snippet": "logging.disable()"}, {"intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "snippet": "os.truncate(path, length)"}, {"intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` .", "snippet": "path_finder.find_spec(fullname)"}, {"intent": "Instances of the TestCase class represent the logical test units in the unittest universe .", "snippet": "unittest.TestCase()"}, {"intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "snippet": "dis.findlinestarts(code)"}, {"intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "snippet": "html.entities.html5"}, {"intent": "A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.", "snippet": "types.SimpleNamespace"}, {"intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "snippet": "View.GetColumnInfo(kind)"}, {"intent": "Called when the parser encounters an error it can not recover from ; parsing is expected to terminate when this method returns . With arguments `exception`.", "snippet": "ErrorHandler.fatalError(exception)"}, {"intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`, `stdin`, `stdout`.", "snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)"}, {"intent": "A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot).", "snippet": "importlib.machinery.BYTECODE_SUFFIXES"}, {"intent": "Acquire a lock , blocking or non-blocking .", "snippet": "lock.acquire()"}, {"intent": "Represents the C signed long long datatype.", "snippet": "ctypes.c_longlong"}, {"intent": "Return the value of `a` at index `b` .", "snippet": "operator.getitem(a, b)"}, {"intent": "Decorator to mark a class or function to be unavailable at runtime.", "snippet": "@typing.type_check_only"}, {"intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "snippet": "random.random()"}, {"intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "snippet": "pathlib.PureWindowsPath(*pathsegments)"}, {"intent": "Return either \u201c new \u201d ( if the message should be stored in the new subdirectory ) or \u201c cur \u201d ( if the message should be stored in the cur subdirectory ) .", "snippet": "maildir_message.get_subdir()"}, {"intent": "Modify the filename of a log file when rotating . With arguments `default_name`.", "snippet": "base_rotating_handler.rotation_filename(default_name)"}, {"intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "snippet": "widget.yview(*args)"}, {"intent": "Refer to the corresponding attribute documentation in IPv4Address.", "snippet": "i_pv4_network.max_prefixlen"}, {"intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "snippet": "resource.prlimit(pid, resource, limits)"}, {"intent": "The smallest year number allowed in a date or datetime object.", "snippet": "datetime.MINYEAR"}, {"intent": "Kill the subprocess .", "snippet": "SubprocessTransport.kill()"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "snippet": "HTTPConnection.request(method, url)"}, {"intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "snippet": "random.lognormvariate(mu, sigma)"}, {"intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "snippet": "math.log1p(x)"}, {"intent": "Each class keeps a list of weak references to its immediate subclasses .", "snippet": "class.__subclasses__()"}, {"intent": "Close currently selected mailbox .", "snippet": "IMAP4.close()"}, {"intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "snippet": "dbm.open(file, flag='r')"}, {"intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "snippet": "bdb.runeval(expr, globals=None)"}, {"intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "snippet": "re.finditer(pattern, string)"}, {"intent": "Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary.", "snippet": "configparser.DuplicateOptionError"}, {"intent": "String representing a port or a set of ports (eg.", "snippet": "Cookie.port"}, {"intent": "Return a list of all available password database entries , in arbitrary order .", "snippet": "pwd.getpwall()"}, {"intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "snippet": "counter.fromkeys(iterable)"}, {"intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "snippet": "turtle.position()"}, {"intent": "Return a task factory or None if the default one is in use .", "snippet": "loop.get_task_factory()"}, {"intent": ".lib section in a.out corrupted", "snippet": "errno.ELIBSCN"}, {"intent": "Compute a version of this path relative to the path represented by other . With arguments `*other`.", "snippet": "PurePath.relative_to(*other)"}, {"intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "snippet": "wsgiref.util.shift_path_info(environ)"}, {"intent": "Returns the numeric value assigned to the character `chr` as float .", "snippet": "unicodedata.numeric(chr)"}, {"intent": "A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "snippet": "Dialect.escapechar"}, {"intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "snippet": "inspect.getclasstree(classes)"}, {"intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "snippet": "decimal.ROUND_05UP"}, {"intent": "Create a file at this given path .", "snippet": "Path.touch()"}, {"intent": "Check if the fault handler is enabled .", "snippet": "faulthandler.is_enabled()"}, {"intent": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).", "snippet": "xml.parsers.expat.model.XML_CTYPE_CHOICE"}, {"intent": "Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force.", "snippet": "codeop.CommandCompiler"}, {"intent": "The return value from run(), representing a process that has finished.", "snippet": "subprocess.CompletedProcess"}, {"intent": "mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.", "snippet": "mock.mock_calls"}, {"intent": "Sequence of bytecodes that access a local variable.", "snippet": "dis.haslocal"}, {"intent": "Set `loop` as a current event loop for the current OS thread .", "snippet": "asyncio.set_event_loop(loop)"}, {"intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "snippet": "test_result.errors"}, {"intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "snippet": "_thread.start_new_thread(function, args, kwargs)"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 .", "snippet": "ftplib.FTP_TLS()"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . If `logRequests` is true ( the default ) , requests will be logged ; setting this parameter to false will turn off logging .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, logRequests=True)"}, {"intent": "Return the complex number x with polar coordinates `r` and `phi` .", "snippet": "cmath.rect(r, phi)"}, {"intent": "Returns the decimal value assigned to the character `chr` as integer .", "snippet": "unicodedata.decimal(chr)"}, {"intent": "Specify the number of channels in the audio file . With arguments `nchannels`.", "snippet": "aifc.setnchannels(nchannels)"}, {"intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "snippet": "decimal.to_eng_string(context=None)"}, {"intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `flags`.", "snippet": "loop.create_server(protocol_factory, flags=socket.AI_PASSIVE)"}, {"intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "snippet": "Template.append(cmd, kind)"}, {"intent": "Return list of `group` ids that `user` belongs to .", "snippet": "os.getgrouplist(user, group)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "snippet": "smtplib.SMTP(host='', source_address=None)"}, {"intent": "Send a `file` over a `transport` .", "snippet": "loop.sendfile(transport, file)"}, {"intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "snippet": "ordered_dict.popitem(last=True)"}, {"intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data .", "snippet": "xml.etree.ElementTree.iterparse(source)"}, {"intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "snippet": "header.__str__()"}, {"intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "snippet": "codeop.compile_command(source, filename=\"<input>\")"}, {"intent": "Make an iterator that returns `object` over and over again .", "snippet": "itertools.repeat(object)"}, {"intent": "Return list of supplemental group ids associated with the current process .", "snippet": "os.getgroups()"}, {"intent": "Set the `spacing` style for the writer .", "snippet": "formatter.set_spacing(spacing)"}, {"intent": "Allow simple extension commands notified by server in CAPABILITY response . With arguments `name`.", "snippet": "IMAP4.xatom(name)"}, {"intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `policy` argument defaults to compat32 .", "snippet": "email.mime.message.MIMEMessage(_msg, policy=compat32)"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "snippet": "cmd.Cmd(stdin=None)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear)"}, {"intent": "The debugging flags necessary for the collector to print information about a leaking program (equal to DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL).", "snippet": "gc.DEBUG_LEAK"}, {"intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "snippet": "email_message.clear_content()"}, {"intent": "Return True if there are maxsize items in the queue .", "snippet": "queue.full()"}, {"intent": "An alias for the built-in OSError exception.", "snippet": "os.error"}, {"intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "snippet": "msilib.schema"}, {"intent": "Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership.", "snippet": "enum.IntFlag"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . `context` , also optional , can contain a SSLContext and allows configuring various aspects of the secure connection .", "snippet": "smtplib.SMTP_SSL(context=None)"}, {"intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "snippet": "functools.partial(func, *args, **keywords)"}, {"intent": "A dictionary mapping numeric error codes to their string descriptions.", "snippet": "xml.parsers.expat.errors.codes"}, {"intent": "Take a snapshot of traces of memory blocks allocated by Python .", "snippet": "tracemalloc.take_snapshot()"}, {"intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)"}, {"intent": "A Popen creationflags parameter to specify that a new process is not associated with the job.", "snippet": "subprocess.CREATE_BREAKAWAY_FROM_JOB"}, {"intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "snippet": "Match.expand(template)"}, {"intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object . The `ancbufsize` and `flags` arguments have the same meaning as for recvmsg ( ) .", "snippet": "socket.recvmsg_into(buffers, ancbufsize, flags)"}, {"intent": "Outputs the `record` to the file .", "snippet": "file_handler.emit(record)"}, {"intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)"}, {"intent": "Error occurred during establishment of a connection  with the server.", "snippet": "smtplib.SMTPConnectError"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "snippet": "cgitb.enable(format=\"html\")"}, {"intent": "Enables workarounds for various bugs present in other SSL implementations.", "snippet": "ssl.OP_ALL"}, {"intent": "Remove all elements from the deque leaving it with length 0 .", "snippet": "deque.clear()"}, {"intent": "Return a new string which is an unquoted version of `str` .", "snippet": "email.utils.unquote(str)"}, {"intent": "Human-readable version of getcomptype ( ) .", "snippet": "AU_read.getcompname()"}, {"intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "snippet": "sys.exec_prefix"}, {"intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "snippet": "tracemalloc.get_traced_memory()"}, {"intent": "Create an asyncio.Future object attached to the event loop .", "snippet": "loop.create_future()"}, {"intent": "Prevents an SSLv3 connection.", "snippet": "ssl.OP_NO_SSLv3"}, {"intent": "The earliest representable time, time(0, 0, 0, 0).", "snippet": "time.min"}, {"intent": "Returns an iterator over the usable hosts in the network .", "snippet": "i_pv4_network.hosts()"}, {"intent": "Returns input_charset as a string coerced to lower case .", "snippet": "charset.__str__()"}, {"intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "snippet": "save_signals.match_value(self, k, dv, v)"}, {"intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number . With arguments `proto`.", "snippet": "socket.socketpair(family, type, proto)"}, {"intent": "Comment element factory . `text` is a string containing the comment string .", "snippet": "xml.etree.ElementTree.Comment(text=None)"}, {"intent": "Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"}, {"intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "snippet": "@functools.lru_cache(typed=False)"}, {"intent": "Clear all cookies and reload cookies from a saved file .", "snippet": "FileCookieJar.revert()"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, errtext='')"}, {"intent": "This exception is raised when a writable mailbox has its status changed by the server.", "snippet": "IMAP4.readonly"}, {"intent": "This function expands XInclude directives . `elem` is the root element .", "snippet": "xml.etree.ElementInclude.include(elem)"}, {"intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)"}, {"intent": "Raised when a sequence subscript is out of range.", "snippet": "IndexError"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, policy=compat32)"}, {"intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` .", "snippet": "shutil.copystat(src, dst)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `dir`.", "snippet": "tempfile.TemporaryDirectory(dir=None)"}, {"intent": "Called when the `test` case test is skipped . `reason` is the reason the test gave for skipping .", "snippet": "test_result.addSkip(test, reason)"}, {"intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "snippet": "itertools.accumulate(iterable, func)"}, {"intent": "Count the number of open file descriptors .", "snippet": "test.support.fd_count()"}, {"intent": "Base class for syntax errors related to incorrect indentation.", "snippet": "IndentationError"}, {"intent": "An array that represents the days of the week in the current locale.", "snippet": "calendar.day_name"}, {"intent": "This routine registers a callback . If you want to clear any previously installed progress `handler` , call the method with None for handler . The callback is invoked for every `n` instructions of the SQLite virtual machine .", "snippet": "connection.set_progress_handler(handler, n)"}, {"intent": "This class is used to manipulate the style database.", "snippet": "tkinter.ttk.Style"}, {"intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "snippet": "imghdr.what(filename)"}, {"intent": "This takes a binary `file` for writing a pickle data stream .", "snippet": "pickle.Pickler(file)"}, {"intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS"}, {"intent": "Return the nameprepped version of `label` .", "snippet": "encodings.idna.nameprep(label)"}, {"intent": "Return a repr of `dict` with keys sorted .", "snippet": "test.support.sortdict(dict)"}, {"intent": "Column number at which an error occurred.", "snippet": "xmlparser.ErrorColumnNumber"}, {"intent": "Open the URL `url` , which can be either a string or a Request object .", "snippet": "urllib.request.urlopen(url)"}, {"intent": "Rewind the file pointer to the beginning of the audio stream .", "snippet": "AU_read.rewind()"}, {"intent": "The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.", "snippet": "zipfile.LargeZipFile"}, {"intent": "Return a suite of all test cases contained in the given `module` .", "snippet": "test_loader.loadTestsFromModule(module)"}, {"intent": "Return the current contents of the line buffer ( rl_line_buffer in the underlying library ) .", "snippet": "readline.get_line_buffer()"}, {"intent": "Return True if the float instance is finite with integral value , and False otherwise :", "snippet": "float.is_integer()"}, {"intent": "Encodes `obj` using the codec registered for `encoding` .", "snippet": "codecs.encode(obj)"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "snippet": "parser.st2tuple(st)"}, {"intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "snippet": "type(name, bases, dict)"}, {"intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "snippet": "NNTP.list(file=None)"}, {"intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "snippet": "FTP.dir(argument)"}, {"intent": "The version number as a string, with any whitespace and/or comments removed.", "snippet": "mime_version_header.version"}, {"intent": "Create an application archive from `source` .", "snippet": "zipapp.create_archive(source)"}, {"intent": "Write the bytestring in `str` to file descriptor `fd` .", "snippet": "os.write(fd, str)"}, {"intent": "If  this  bit  is  set,  then  random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool.", "snippet": "os.GRND_RANDOM"}, {"intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "snippet": "BaseCookie.value_decode(val)"}, {"intent": "Enter echo mode .", "snippet": "curses.echo()"}, {"intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "snippet": "Node.normalize()"}, {"intent": "Stop serving : close listening sockets and set the sockets attribute to None .", "snippet": "server.close()"}, {"intent": "Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types.", "snippet": "mime_types.types_map"}, {"intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object . With arguments `msg`.", "snippet": "test_case.assertIs(first, second, msg=None)"}, {"intent": "Return True if the Turtle is shown , False if it \u2019 s hidden .", "snippet": "turtle.isvisible()"}, {"intent": "Executes an SQL statement . With arguments `sql`.", "snippet": "cursor.execute(sql)"}, {"intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "snippet": "formatter.push_style(*styles)"}, {"intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed .", "snippet": "asyncore.loop()"}, {"intent": "Get mailbox status .", "snippet": "POP3.stat()"}, {"intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)"}, {"intent": "Determine whether `code` is in tableC.2 ( Control characters , union of C.2.1 and C.2.2 ) .", "snippet": "stringprep.in_table_c21_c22(code)"}, {"intent": "System which created ZIP archive.", "snippet": "ZipInfo.create_system"}, {"intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "snippet": "nis.cat(mapname)"}, {"intent": "Exception raised on any errors.", "snippet": "IMAP4.error"}, {"intent": "Get a character . With arguments `y`, `x`.", "snippet": "window.getch(y, x)"}, {"intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "snippet": "shlex.split(s, posix=True)"}, {"intent": "A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019).", "snippet": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"}, {"intent": "A 32-bit number in big-endian format.", "snippet": "winreg.REG_DWORD_BIG_ENDIAN"}, {"intent": "Return the name of the current default string encoding used by the Unicode implementation .", "snippet": "sys.getdefaultencoding()"}, {"intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "snippet": "SMTP.auth(mechanism, authobject)"}, {"intent": "Return the directory name of pathname `path` .", "snippet": "os.path.dirname(path)"}, {"intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "snippet": "ctypes.memmove(dst, src, count)"}, {"intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "snippet": "Pattern.search(string, pos)"}, {"intent": "Display the panel ( which might have been hidden ) .", "snippet": "Panel.show()"}, {"intent": "Network is down", "snippet": "errno.ENETDOWN"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides .", "snippet": "profile.Profile()"}, {"intent": "Returns the current setting for the weekday to start each week .", "snippet": "calendar.firstweekday()"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "snippet": "tarfile.TarFile(encoding=ENCODING)"}, {"intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component .", "snippet": "directory.add_file(file)"}, {"intent": "The line corresponding to pos.", "snippet": "json_encoder.lineno"}, {"intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "snippet": "tkinter.tix.PanedWindow"}, {"intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "snippet": "mailcap.getcaps()"}, {"intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "snippet": "random.triangular(low, high, mode)"}, {"intent": "Reset the warnings filter .", "snippet": "warnings.resetwarnings()"}, {"intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "snippet": "audioop.bias(fragment, width, bias)"}, {"intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "snippet": "mimetypes.add_type(type, ext)"}, {"intent": "A bool indicating whether the memory is contiguous.", "snippet": "memoryview.contiguous"}, {"intent": "A marker object used by Token.old_value.", "snippet": "Token.MISSING"}, {"intent": "Line number (int) of the filter.", "snippet": "filter.lineno"}, {"intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "snippet": "sysconfig.parse_config_h(fp)"}, {"intent": "Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.", "snippet": "xmlparser.buffer_text"}, {"intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "snippet": "re.sub(pattern, repl, string, count=0, flags=0)"}, {"intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "snippet": "round(number, ndigits)"}, {"intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "snippet": "Node.writexml(writer, indent=\"\")"}, {"intent": "Difference of number of memory blocks between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot.", "snippet": "statistic_diff.count_diff"}, {"intent": "(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "snippet": "text_wrapper.drop_whitespace"}, {"intent": "Data found after the end of the compressed stream.", "snippet": "bz2_decompressor.unused_data"}, {"intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "snippet": "exec(object, globals)"}, {"intent": "The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal hardware source, and may give close to nanosecond resolution.", "snippet": "time.CLOCK_HIGHRES"}, {"intent": "Returns a copy of `x` with the sign set to 0 .", "snippet": "context.copy_abs(x)"}, {"intent": "An abstract base class for time zone information objects.", "snippet": "datetime.tzinfo"}, {"intent": "Return a list containing all global site-packages directories .", "snippet": "site.getsitepackages()"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb)"}, {"intent": "Encapsulation of the information needed by the XMLReader to read entities . With arguments `system_id`.", "snippet": "xml.sax.xmlreader.InputSource(system_id=None)"}, {"intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "snippet": "contextvars.ContextVar(name)"}, {"intent": "Telnet represents a connection to a Telnet server .", "snippet": "telnetlib.Telnet()"}, {"intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "snippet": "frozenset(iterable)"}, {"intent": "Flushes changes made to the in-memory copy of a file back to disk .", "snippet": "mmap.flush()"}, {"intent": "Reload a previously imported `module` .", "snippet": "imp.reload(module)"}, {"intent": "List mailbox names in `directory` matching `pattern` .", "snippet": "IMAP4.list(directory, pattern)"}, {"intent": "Return : If `obj` is neither of the above a TypeError is raised .", "snippet": "asyncio.ensure_future(obj)"}, {"intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "snippet": "stats.sort_stats(*keys)"}, {"intent": "The arguments used to launch the process.", "snippet": "completed_process.args"}, {"intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "snippet": "statistics.median(data)"}, {"intent": "Specifies the Content-Type HTTP header of error responses sent to the client.", "snippet": "base_http_request_handler.error_content_type"}, {"intent": "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure.", "snippet": "test_case.maxDiff"}, {"intent": "Context manager to start `threads` .", "snippet": "test.support.start_threads(threads)"}, {"intent": "Write `s` to the write method of the outfp passed to the Generator \u2019 s constructor .", "snippet": "generator.write(s)"}, {"intent": "Determine whether `code` is in tableB.1 ( Commonly mapped to nothing ) .", "snippet": "stringprep.in_table_b1(code)"}, {"intent": "Not a typewriter", "snippet": "errno.ENOTTY"}, {"intent": "Flag indicating whether to print verbose messages.", "snippet": "tabnanny.verbose"}, {"intent": "A list of logging.LogRecord objects of the matching log messages.", "snippet": "test_case.records"}, {"intent": "The C API version for this interpreter.", "snippet": "sys.api_version"}, {"intent": "The maximum amount of processor time (in seconds) that a process can use.", "snippet": "resource.RLIMIT_CPU"}, {"intent": "Read one value from the open `file` and return it .", "snippet": "marshal.load(file)"}, {"intent": "Implement Netscape protocol.", "snippet": "CookiePolicy.netscape"}, {"intent": "Call shutil.rmtree ( ) on `path` or call os.lstat ( ) and os.rmdir ( ) to remove a path and its contents .", "snippet": "test.support.rmtree(path)"}, {"intent": "Is the specified `record` to be logged ?", "snippet": "filter.filter(record)"}, {"intent": "Return true if the `object` is a coroutine created by an async def function .", "snippet": "inspect.iscoroutine(object)"}, {"intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "snippet": "DocXMLRPCServer.set_server_title(server_title)"}, {"intent": "Return True if either the real or the imaginary part of `x` is a NaN , and False otherwise .", "snippet": "cmath.isnan(x)"}, {"intent": "Return the line number in the current file .", "snippet": "fileinput.filelineno()"}, {"intent": "The UUID was generated by the platform in a multiprocessing-safe way.", "snippet": "robot_file_parser.safe"}, {"intent": "Strings specifying the primary and secondary prompt of the interpreter.", "snippet": "sys.ps1"}, {"intent": "Raised when the input() function hits an end-of-file condition (EOF) without reading any data.", "snippet": "EOFError"}, {"intent": "Packs a variable length byte stream , similarly to pack_string ( ) . With arguments `bytes`.", "snippet": "Packer.pack_bytes(bytes)"}, {"intent": "Specifies the type of each element in the array.", "snippet": "array._type_"}, {"intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "snippet": "base64.b64decode(s, validate=False)"}, {"intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . This operation is unaffected by `context` and is quiet : no flags are changed and no rounding is performed . With arguments `other`.", "snippet": "decimal.compare_total_mag(other, context=None)"}, {"intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "snippet": "urllib.parse.quote_from_bytes(bytes)"}, {"intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "snippet": "inspect.getinnerframes(traceback, context=1)"}, {"intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "snippet": "struct.pack(v1, v2)"}, {"intent": "Construct a PrettyPrinter instance .", "snippet": "pprint.PrettyPrinter()"}, {"intent": "Windows only: Represents a HRESULT value, which contains success or error information for a function or method call.", "snippet": "ctypes.HRESULT"}, {"intent": "String that uniquely identifies the type of the filesystem that contains the file.", "snippet": "stat_result.st_fstype"}, {"intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "snippet": "ArgumentParser.format_usage()"}, {"intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "snippet": "doctest.UnexpectedException(test, example, exc_info)"}, {"intent": "This method takes one parameter , the `name` of a method implemented by the XML-RPC server .", "snippet": "ServerProxy.system.methodSignature(name)"}, {"intent": "Return an object sent from the other end of the connection using send ( ) .", "snippet": "joinable_queue.recv()"}, {"intent": "This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected.", "snippet": "ReferenceError"}, {"intent": "Save the current terminal mode as the \u201c shell \u201d mode , the mode when the running program is not using curses .", "snippet": "curses.def_shell_mode()"}, {"intent": "A ProtocolError object describes a protocol error in the underlying transport layer (such as a 404 \u2018not found\u2019 error if the server named by the URI does not exist).", "snippet": "xmlrpc.client.ProtocolError"}, {"intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` . `name_in_zip` is the archive name .", "snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)"}, {"intent": "The regular expression pattern.", "snippet": "system_random.pattern"}, {"intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "snippet": "context.create_decimal_from_float(f)"}, {"intent": "Set the window \u2019 s background . With arguments `ch`.", "snippet": "window.bkgdset(ch)"}, {"intent": "Set d[key] to value.", "snippet": "d[key] = value"}, {"intent": "The first version returns the nearest int to self , rounding half to even .", "snippet": "fraction.__round__()"}, {"intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "snippet": "doc_test_runner.run(test, compileflags=None)"}, {"intent": "Cancel the callback .", "snippet": "handle.cancel()"}, {"intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "snippet": "semaphore.acquire(blocking=True)"}, {"intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "snippet": "loop.sock_sendfile(sock, file, offset=0)"}, {"intent": "Delete the message corresponding to `key` from the mailbox .", "snippet": "mailbox.remove(key)"}, {"intent": "The maximum area (in bytes) of address space which may be taken by the process.", "snippet": "resource.RLIMIT_AS"}, {"intent": "Details for a bytecode operation", "snippet": "dis.Instruction"}, {"intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "snippet": "joinable_queue.recv_bytes()"}, {"intent": "Called when some `data` is received .", "snippet": "Protocol.data_received(data)"}, {"intent": "The Dialect class is a container class relied on primarily for its attributes, which are used to define the parameters for a specific reader or writer instance.", "snippet": "csv.Dialect"}, {"intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "snippet": "locale.NOEXPR"}, {"intent": "Decode the string `s` according to RFC 2231 .", "snippet": "email.utils.decode_rfc2231(s)"}, {"intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "snippet": "loop.start_tls(transport, protocol, sslcontext)"}, {"intent": "Call the underlying MessageBeep ( ) function from the Platform API .", "snippet": "winsound.MessageBeep()"}, {"intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "snippet": "list.sort(key=None)"}, {"intent": "Protocol driver not attached", "snippet": "errno.EUNATCH"}, {"intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "snippet": "scheduler.enterabs(time, priority, action)"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem .", "snippet": "tkinter.Tcl()"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects .", "snippet": "asyncio.open_connection()"}, {"intent": "Indicates unpack completion .", "snippet": "Unpacker.done()"}, {"intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "snippet": "itertools.cycle(iterable)"}, {"intent": "Registry entries subordinate to this key allow you to access performance data.", "snippet": "winreg.HKEY_PERFORMANCE_DATA"}, {"intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "snippet": "asyncio.Future(loop=None)"}, {"intent": "Check for presence of docstrings.", "snippet": "test.support.HAVE_DOCSTRINGS"}, {"intent": "Creates a new Decimal instance from `num` but using self as context .", "snippet": "context.create_decimal(num)"}, {"intent": "Return the portion of the file \u2019 s `mode` that can be set by os.chmod ( ) \u2014that is , the file \u2019 s permission bits , plus the sticky bit , set-group-id , and set-user-id bits ( on systems that support them ) .", "snippet": "stat.S_IMODE(mode)"}, {"intent": "The base class for those built-in exceptions that are raised for various arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError.", "snippet": "ArithmeticError"}, {"intent": "Path to the user site-packages for the running Python.", "snippet": "site.USER_SITE"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "snippet": "gettext.find(domain, all=False)"}, {"intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "snippet": "time.clock_settime_ns(clk_id, time: int)"}, {"intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "snippet": "urllib.parse.urlunparse(parts)"}, {"intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`.", "snippet": "pool.apply_async(func)"}, {"intent": "Append items from the `list` .", "snippet": "array.fromlist(list)"}, {"intent": "Profile the `cmd` via exec ( ) .", "snippet": "profile.run(cmd)"}, {"intent": "Return the current process \u2019 s effective user id .", "snippet": "os.geteuid()"}, {"intent": "Change the current working directory to `path` .", "snippet": "os.chdir(path)"}, {"intent": "Return a new view of the dictionary \u2019 s keys .", "snippet": "dict.keys()"}, {"intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "snippet": "code.interact(local=None)"}, {"intent": "Wait until all output written to file descriptor `fd` has been transmitted .", "snippet": "termios.tcdrain(fd)"}, {"intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`.", "snippet": "Path.write_text(data, encoding=None)"}, {"intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value .", "snippet": "config_parser.get(section, option, fallback)"}, {"intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)"}, {"intent": "Get information about a `frame` or traceback object . With arguments `context`.", "snippet": "inspect.getframeinfo(frame, context=1)"}, {"intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "snippet": "urllib.request.Request(url)"}, {"intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "snippet": "audioop.reverse(fragment, width)"}, {"intent": "Exit code that means the input data was incorrect.", "snippet": "os.EX_DATAERR"}, {"intent": "Holds an instance of the class specified by the MessageClass class variable.", "snippet": "base_http_request_handler.headers"}, {"intent": "Return the size in bytes of individual samples .", "snippet": "aifc.getsampwidth()"}, {"intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "snippet": "struct.Struct(format)"}, {"intent": "The binary format for plist files", "snippet": "plistlib.FMT_BINARY"}, {"intent": "Cross-device link", "snippet": "errno.EXDEV"}, {"intent": "Create a mutually exclusive group .", "snippet": "ArgumentParser.add_mutually_exclusive_group()"}, {"intent": "A dictionary containing key-value pairs of pax global headers.", "snippet": "TarFile.pax_headers"}, {"intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "snippet": "auto.filename"}, {"intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "snippet": "colorsys.hls_to_rgb(h, l, s)"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . With arguments `after_in_parent`.", "snippet": "os.register_at_fork(after_in_parent=None)"}, {"intent": "Decode bytes-like object or ASCII string `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the decoded bytes .", "snippet": "base64.urlsafe_b64decode(s)"}, {"intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "snippet": "Unpacker.unpack_fstring(n)"}, {"intent": "The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees.", "snippet": "tkinter.tix.HList"}, {"intent": "Update the set , adding elements from all others . With arguments `*others`.", "snippet": "set.update(*others)"}, {"intent": "A numeric handle of a system object which will become \u201cready\u201d when the process ends.", "snippet": "process.sentinel"}, {"intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "snippet": "memoryview.ndim"}, {"intent": "Remove the first occurrence of `value` .", "snippet": "deque.remove(value)"}, {"intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "snippet": "ast.parse(source, filename='<unknown>')"}, {"intent": "Source line number (count of newlines seen so far plus one).", "snippet": "shlex.lineno"}, {"intent": "Return the cumulative line number of the line that has just been read .", "snippet": "fileinput.lineno()"}, {"intent": "Returns the natural ( base e ) logarithm of `x` .", "snippet": "context.ln(x)"}, {"intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "snippet": "ftplib.FTP(host='')"}, {"intent": "Closely emulate the interactive Python console . The optional `exitmsg` argument specifies an exit message printed when exiting .", "snippet": "InteractiveConsole.interact(exitmsg=None)"}, {"intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "snippet": "audioop.minmax(fragment, width)"}, {"intent": "Set the botframe , stopframe , returnframe and quitting attributes with values ready to start debugging .", "snippet": "bdb.reset()"}, {"intent": "The URI scheme.", "snippet": "Request.type"}, {"intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "snippet": "formatter.add_label_data(format, counter)"}, {"intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "snippet": "Panel.move(y, x)"}, {"intent": "Computes an Adler-32 checksum of `data` .", "snippet": "zlib.adler32(data)"}, {"intent": "Unix V7 synonym for S_IRUSR.", "snippet": "stat.S_IREAD"}, {"intent": "Set the current context for the active thread to `c` .", "snippet": "decimal.setcontext(c)"}, {"intent": "The document contains no elements (XML requires all documents to contain exactly one top-level element)..", "snippet": "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"}, {"intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) .", "snippet": "executor.map(func, *iterables, timeout=None)"}, {"intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "snippet": "decimal.max_mag(other)"}, {"intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "snippet": "email.utils.encode_rfc2231(s, charset=None)"}, {"intent": "The DirTree widget displays a tree view of a directory, its previous directories and its sub-directories.", "snippet": "tkinter.tix.DirTree"}, {"intent": "Apply , test or remove a POSIX lock on an open file descriptor . `fd` is an open file descriptor . `cmd` specifies the command to use - one of F_LOCK , F_TLOCK , F_ULOCK or F_TEST . `len` specifies the section of the file to lock .", "snippet": "os.lockf(fd, cmd, len)"}, {"intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "snippet": "formatter.push_alignment(align)"}, {"intent": "Set or return the drawing `delay` in milliseconds .", "snippet": "turtle.delay()"}, {"intent": "An attribute was used more than once in a start tag.", "snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"}, {"intent": "Loop over the `format_string` and return an iterable of tuples ( literal_text , field_name , format_spec , conversion ) .", "snippet": "formatter.parse(format_string)"}, {"intent": "If tzinfo is None , returns None , else returns self.tzinfo.tzname ( None ) , or raises an exception if the latter doesn \u2019 t return None or a string object .", "snippet": "time.tzname()"}, {"intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "snippet": "Template.open(file, mode)"}, {"intent": "Get the high and low watermarks for write flow control .", "snippet": "WriteTransport.get_write_buffer_limits()"}, {"intent": "The child\u2019s exit code.", "snippet": "process.exitcode"}, {"intent": "Print the stack or traceback for this Task . The `limit` argument is passed to get_stack ( ) directly . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "snippet": "task.print_stack(limit=None, file=None)"}, {"intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size .", "snippet": "os.get_terminal_size()"}, {"intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)"}, {"intent": "Compress the `data` , returning a bytes object containing the compressed data .", "snippet": "gzip.compress(data)"}, {"intent": "Called when Expat begins parsing the document type declaration ( < ! DOCTYPE ... ) . The `doctypeName` is provided exactly as presented . The `systemId` and `publicId` parameters give the system and public identifiers if specified , or None if omitted . `has_internal_subset` will be true if the document contains and internal document declaration subset .", "snippet": "xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)"}, {"intent": "Round towards zero.", "snippet": "decimal.ROUND_DOWN"}, {"intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "snippet": "loader.create_module(spec)"}, {"intent": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol.", "snippet": "socket.CAN_BCM"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "snippet": "message.get_params(failobj=None)"}, {"intent": "An alias to collections.abc.Hashable", "snippet": "typing.Hashable"}, {"intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "snippet": "configparser.InterpolationSyntaxError"}, {"intent": "Represents the C PyObject * datatype.", "snippet": "ctypes.py_object"}, {"intent": "A numeric error code from the C variable errno.", "snippet": "auto.errno"}, {"intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "snippet": "locale.str(float)"}, {"intent": "Returns the name ( ID ) of the chunk .", "snippet": "chunk.getname()"}, {"intent": "Clear the cache .", "snippet": "linecache.clearcache()"}, {"intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())"}, {"intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "snippet": "Dialect.quotechar"}, {"intent": "This attribute is None by default.", "snippet": "shlex.source"}, {"intent": "Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.", "snippet": "crypt.METHOD_MD5"}, {"intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "snippet": "textwrap.wrap(text, **kwargs)"}, {"intent": "Invert all the digits in `x` .", "snippet": "context.logical_invert(x)"}, {"intent": "A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "snippet": "http.HTTPStatus"}, {"intent": "PI element factory . `target` is a string containing the PI target .", "snippet": "xml.etree.ElementTree.ProcessingInstruction(target)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "snippet": "tempfile.mkstemp(text=False)"}, {"intent": "The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.", "snippet": "LookupError"}, {"intent": "Return a message object structure tree from an open file object . This is equivalent to Parser ( ) .parse ( `fp` ) .", "snippet": "email.message_from_file(fp)"}, {"intent": "When set to a value other than None, this variable defines the default value for the dir argument to the functions defined in this module.", "snippet": "tempfile.tempdir"}, {"intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "snippet": "json.JSONDecoder(object_pairs_hook=None)"}, {"intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the namespaceURI and localName attributes match . If `newAttr` is already in use , InuseAttributeErr will be raised .", "snippet": "Element.setAttributeNodeNS(newAttr)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "snippet": "csv.DictReader(f, *args, **kwds, restkey=None)"}, {"intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) .", "snippet": "marshal.dumps(value)"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "snippet": "codecs.CodecInfo(encode, decode)"}, {"intent": "Return a new path with the `name` changed .", "snippet": "PurePath.with_name(name)"}, {"intent": "Return the canonical `path` of the specified filename , eliminating any symbolic links encountered in the path ( if they are supported by the operating system ) .", "snippet": "os.path.realpath(path)"}, {"intent": "The level of debug output to use.", "snippet": "ZipFile.debug"}, {"intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)"}, {"intent": "The flag is set when the code object is a nested function.", "snippet": "inspect.CO_NESTED"}, {"intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "snippet": "functools.reduce(function, iterable)"}, {"intent": "Write a string to the standard error stream ( sys.stderr ) . With arguments `data`.", "snippet": "InteractiveInterpreter.write(data)"}, {"intent": "In BytesIO , this is the same as read ( ) .", "snippet": "bytes_io.read1()"}, {"intent": "The sound parameter is a sound association name from the registry.", "snippet": "winsound.SND_ALIAS"}, {"intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "snippet": "multiprocessing.Process(daemon=None)"}, {"intent": "Create a new debugging server . With arguments `localaddr`, `remoteaddr`.", "snippet": "smtpd.DebuggingServer(localaddr, remoteaddr)"}, {"intent": "Raised when the parser encounters a syntax error.", "snippet": "SyntaxError"}, {"intent": "Delete all drawings and all turtles from the TurtleScreen .", "snippet": "turtle.clear()"}, {"intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "snippet": "plistlib.dump(value, fp, sort_keys=True)"}, {"intent": "Return the arc cosine of `x` , in radians .", "snippet": "math.acos(x)"}, {"intent": "Accept a base64 `bytes` object and decode it as the instance \u2019 s new data .", "snippet": "binary.decode(bytes)"}, {"intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict .", "snippet": "json.JSONDecoder(object_hook=None)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`.", "snippet": "unittest.mock.Mock(**kwargs)"}, {"intent": "Return a list of frame records for the caller \u2019 s stack .", "snippet": "inspect.stack()"}, {"intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "snippet": "base_http_request_handler.handle_expect_100()"}, {"intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "snippet": "dataclasses.replace(instance, **changes)"}, {"intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "snippet": "widget.index(item)"}, {"intent": "This method will parse and dispatch the request to the appropriate do_* ( ) method .", "snippet": "base_http_request_handler.handle_one_request()"}, {"intent": "Retrieve whole message number `which` , and set its seen flag .", "snippet": "POP3.retr(which)"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets .", "snippet": "email.header.Header()"}, {"intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "snippet": "json.JSONEncoder(sort_keys=False)"}, {"intent": "Set the access and modified `times` of the file specified by `path` .", "snippet": "os.utime(path)"}, {"intent": "Derived from RuntimeError, this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks.", "snippet": "concurrent.futures.BrokenExecutor"}, {"intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "snippet": "socket.getservbyport(port)"}, {"intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "snippet": "locale.getlocale()"}, {"intent": "A factory function for constructing a new empty message object.", "snippet": "policy.message_factory"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "snippet": "test.support.check_syntax_error(testcase, statement)"}, {"intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "snippet": "os.sched_getaffinity(pid)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "snippet": "profile.Profile(timer=None)"}, {"intent": "Writes the element tree to a `file` , as XML . The keyword-only `short_empty_elements` parameter controls the formatting of elements that contain no content .", "snippet": "element_tree.write(file, short_empty_elements=True)"}, {"intent": "Discard queued data on file descriptor `fd` . The `queue` selector specifies which queue : TCIFLUSH for the input queue , TCOFLUSH for the output queue , or TCIOFLUSH for both queues .", "snippet": "termios.tcflush(fd, queue)"}, {"intent": "Wait for child process to terminate .", "snippet": "Popen.wait()"}, {"intent": "Return an OpenerDirector instance , which chains the handlers in the order given .", "snippet": "urllib.request.build_opener()"}, {"intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "snippet": "traceback.format_list(extracted_list)"}, {"intent": "Capture enough detail about a non-file-based module to permit getting its lines later via getline ( ) even if `module_globals` is None in the later call . With arguments `filename`.", "snippet": "linecache.lazycache(filename, module_globals)"}, {"intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "snippet": "loop.default_exception_handler(context)"}, {"intent": "Return the sampling rate ( number of audio frames per second ) .", "snippet": "aifc.getframerate()"}, {"intent": "Return True if the stream supports writing .", "snippet": "io_base.writable()"}, {"intent": "An importer for built-in modules.", "snippet": "importlib.machinery.BuiltinImporter"}, {"intent": "Disable compression on the SSL channel.", "snippet": "ssl.OP_NO_COMPRESSION"}, {"intent": "Provide a per-write equivalent of the O_DSYNC open(2) flag.", "snippet": "os.RWF_DSYNC"}, {"intent": "Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart .", "snippet": "bytes.lower()"}, {"intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "snippet": "memory_handler.flush()"}, {"intent": "Delete all existing breakpoints .", "snippet": "bdb.clear_all_breaks()"}, {"intent": "This exception is raised if source and destination in copyfile() are the same file.", "snippet": "shutil.SameFileError"}, {"intent": "Set the turtle \u2019 s first coordinate to `x` , leave second coordinate unchanged .", "snippet": "turtle.setx(x)"}, {"intent": "The constant string used by the operating system to refer to the parent directory.", "snippet": "os.pardir"}, {"intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection .", "snippet": "urllib.request.HTTPSHandler(context=None)"}, {"intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "snippet": "window.vline(ch, n)"}, {"intent": "If WIFEXITED ( `status` ) is true , return the integer parameter to the exit ( 2 ) system call .", "snippet": "os.WEXITSTATUS(status)"}, {"intent": "Show my ACLs for a `mailbox` ( i.e .", "snippet": "IMAP4.myrights(mailbox)"}, {"intent": "Return local time as an aware datetime object .", "snippet": "email.utils.localtime()"}, {"intent": "Return a random int in the range [ 0 , `n` ) .", "snippet": "secrets.randbelow(n)"}, {"intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "snippet": "winreg.EnumValue(key, index)"}, {"intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "snippet": "text_wrapper.expand_tabs"}, {"intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "snippet": "quit()"}, {"intent": "Wait until notified or until a `timeout` occurs .", "snippet": "condition.wait()"}, {"intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "snippet": "turtle.onclick(fun, btn=1)"}, {"intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "snippet": "os.supports_fd"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params)"}, {"intent": "Called at the start of a CDATA section .", "snippet": "xmlparser.StartCdataSectionHandler()"}, {"intent": "Height of the terminal window in characters.", "snippet": "terminal_size.lines"}, {"intent": "Return the encoding used for text data , according to user preferences .", "snippet": "locale.getpreferredencoding()"}, {"intent": "No record locks available", "snippet": "errno.ENOLCK"}, {"intent": "Return list of all live children of the current process .", "snippet": "multiprocessing.active_children()"}, {"intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "snippet": "Request.add_header(key, val)"}, {"intent": "Raised when a directory operation (such as os.listdir()) is requested on something which is not a directory.", "snippet": "NotADirectoryError"}, {"intent": "This class implements condition variable objects .", "snippet": "threading.Condition()"}, {"intent": "Hostname of the server: str type, or None for server-side socket or if the hostname was not specified in the constructor.", "snippet": "SSLSocket.server_hostname"}, {"intent": "For top-level functions, None.", "snippet": "Function.parent"}, {"intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) . If `which` is set , it is the message to list .", "snippet": "POP3.list(which)"}, {"intent": "Exception raised when the relational integrity of the database is affected, e.g.", "snippet": "sqlite3.IntegrityError"}, {"intent": "Remove .pyc files on uninstall .", "snippet": "directory.remove_pyc()"}, {"intent": "Move cursor to ( `new_y` , `new_x` ) .", "snippet": "window.move(new_y, new_x)"}, {"intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "snippet": "decimal.adjusted()"}, {"intent": "Return the list of stack frames for this Task .", "snippet": "task.get_stack()"}, {"intent": "Returns the object to which to pointer points.", "snippet": "_pointer.contents"}, {"intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "snippet": "gc.set_threshold(threshold0)"}, {"intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "snippet": "bytes.isalnum()"}, {"intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "snippet": "timeit.Timer(globals=None)"}, {"intent": "Shutdown connection to server .", "snippet": "IMAP4.logout()"}, {"intent": "By default , wake up one thread waiting on this condition , if any .", "snippet": "condition.notify()"}, {"intent": "Adds all the standard site-specific directories to the module search path .", "snippet": "site.main()"}, {"intent": "In protocols 2 and newer , classes that implements the __getnewargs_ex__ ( ) method can dictate the values passed to the __new__ ( ) method upon unpickling .", "snippet": "object.__getnewargs_ex__()"}, {"intent": "Unregister an unpack format . `name` is the name of the format .", "snippet": "shutil.unregister_unpack_format(name)"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . To allow setting the `fallback` , copy.copy ( ) is used to clone each translation object from the cache ; the actual instance data is still shared with the cache .", "snippet": "gettext.translation(domain, fallback=False)"}, {"intent": "This is one of two standard signal handling options; it will simply perform the default function for the signal.", "snippet": "signal.SIG_DFL"}, {"intent": "The month\u2019s head CSS class (used by formatmonthname()).", "snippet": "html_calendar.cssclass_month_head"}, {"intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "snippet": "time.timezone"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, cafile=None)"}, {"intent": "Checks to see if this logger has any handlers configured .", "snippet": "queue_listener.hasHandlers()"}, {"intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "snippet": "termios.tcsendbreak(fd, duration)"}, {"intent": "Return True if the argument has a negative sign and False otherwise .", "snippet": "decimal.is_signed()"}, {"intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "snippet": "base_http_request_handler.log_message(format)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')"}, {"intent": "Integer expiry date in seconds since epoch, or None.", "snippet": "Cookie.expires"}, {"intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "snippet": "DefaultCookiePolicy.strict_ns_domain"}, {"intent": "Send data to the socket . Return the number of `bytes` sent . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "snippet": "socket.sendto(bytes, address)"}, {"intent": "A UserWarning subclass issued when password input may be echoed.", "snippet": "getpass.GetPassWarning"}, {"intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "snippet": "bisect.bisect_left(a, x, lo=0)"}, {"intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "snippet": "fractions.Fraction()"}, {"intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "snippet": "random.SystemRandom()"}, {"intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "snippet": "asyncio.SubprocessTransport(BaseTransport)"}, {"intent": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.", "snippet": "test.support.SuppressCrashReport"}, {"intent": "Called when the incoming data stream matches the termination condition set by set_terminator ( ) .", "snippet": "async_chat.found_terminator()"}, {"intent": "Create a turtle . With arguments `canvas`.", "snippet": "turtle.RawTurtle(canvas)"}, {"intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "snippet": "zipfile.is_zipfile(filename)"}, {"intent": "Base class for C callable foreign functions.", "snippet": "ctypes._FuncPtr"}, {"intent": "Specifies the UUID layout given in RFC 4122.", "snippet": "uuid.RFC_4122"}, {"intent": "Put an `item` into the queue .", "snippet": "queue.put(item)"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "snippet": "json.loads(s, **kw, encoding=None)"}, {"intent": "Return any data available in the cooked queue ( very lazy ) .", "snippet": "Telnet.read_very_lazy()"}, {"intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "snippet": "OptionParser.print_usage()"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, name_of_module=None, extra=())"}, {"intent": "A semaphore object : a close analog of threading.Semaphore .", "snippet": "multiprocessing.Semaphore()"}, {"intent": "This class can be used to generate HTML calendars . With arguments `firstweekday`.", "snippet": "calendar.HTMLCalendar(firstweekday=0)"}, {"intent": "Represents the C signed char datatype, and interprets the value as small integer.", "snippet": "ctypes.c_byte"}, {"intent": "Create an AIFF-C file .", "snippet": "aifc.aifc()"}, {"intent": "Return a weak reference to `object` .", "snippet": "weakref.ref(object)"}, {"intent": "Make sure nframes is correct , and close the file if it was opened by wave .", "snippet": "Wave_write.close()"}, {"intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "snippet": "FTP.connect(source_address=None)"}, {"intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "snippet": "difflib.get_close_matches(word, possibilities)"}, {"intent": "Too many links", "snippet": "errno.EMLINK"}, {"intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "snippet": "trace.run(cmd)"}, {"intent": "Create a Unix connection . `path` is the name of a Unix domain socket and is required , unless a `sock` parameter is specified . With arguments `protocol_factory`.", "snippet": "loop.create_unix_connection(protocol_factory, path=None)"}, {"intent": "Match this path against the provided glob-style `pattern` .", "snippet": "PurePath.match(pattern)"}, {"intent": "Encapsulates the asynchronous execution of a callable.", "snippet": "concurrent.futures.Future"}, {"intent": "This method transforms `option` names on every read , get , or set operation .", "snippet": "ConfigParser.optionxform(option)"}, {"intent": "This exception is raised on all errors, such as unknown number of bytes per sample, etc.", "snippet": "audioop.error"}, {"intent": "Group ID of the user who originally stored this member.", "snippet": "TarInfo.gid"}, {"intent": "Too many references: cannot splice", "snippet": "errno.ETOOMANYREFS"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "snippet": "parser.st2list(st)"}, {"intent": "Exception raised on any errors from this module (errors from socket module are not caught).", "snippet": "poplib.error_proto"}, {"intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})"}, {"intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "snippet": "CookiePolicy.hide_cookie2"}, {"intent": "Add `label` to the list of labels on the message .", "snippet": "babyl_message.add_label(label)"}, {"intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "snippet": "sysconfig.get_paths(scheme, vars, expand)"}, {"intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "snippet": "FileCookieJar.save(filename=None, ignore_expires=False)"}, {"intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "snippet": "types.ClassMethodDescriptorType"}, {"intent": "Add the file `name` to the archive .", "snippet": "TarFile.add(name)"}, {"intent": "The dispatcher class is a thin wrapper around a low-level socket object.", "snippet": "asyncore.dispatcher"}, {"intent": "call ( ) is a helper object for making simpler assertions , for comparing with call_args , call_args_list , mock_calls and method_calls . With arguments `*args`, `**kwargs`.", "snippet": "unittest.mock.call(*args, **kwargs)"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used .", "snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO)"}, {"intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "snippet": "profile.runctx(command, globals, locals, sort=-1)"}, {"intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "snippet": "sunau.open(file, mode)"}, {"intent": "Disable automatic garbage collection .", "snippet": "gc.disable()"}, {"intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "snippet": "RuntimeError"}, {"intent": "These methods immediately delete the message . With arguments `key`.", "snippet": "mh.remove(key)"}, {"intent": "Reserved for Microsoft compatibility.", "snippet": "uuid.RESERVED_MICROSOFT"}, {"intent": "Close a socket file descriptor . With arguments `fd`.", "snippet": "socket.close(fd)"}, {"intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "snippet": "xmlrpc.client.dumps(params, methodresponse=None)"}, {"intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "snippet": "datetime.ctime()"}, {"intent": "Return the name of the user logged in on the controlling terminal of the process .", "snippet": "os.getlogin()"}, {"intent": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).", "snippet": "ssl.HAS_SNI"}, {"intent": "Convert a binary file with filename `input` to binhex file `output` .", "snippet": "binhex.binhex(input, output)"}, {"intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "snippet": "ctypes.set_errno(value)"}, {"intent": "Test whether the `filename` string matches the `pattern` string , returning True or False .", "snippet": "fnmatch.fnmatch(filename, pattern)"}, {"intent": "Force write of everything to disk .", "snippet": "os.sync()"}, {"intent": "The HTTP response headers for the HTTP request that caused the HTTPError.", "snippet": "non_callable_magic_mock.headers"}, {"intent": "Portable popen ( ) interface . With arguments `cmd`.", "snippet": "platform.popen(cmd)"}, {"intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path .", "snippet": "pkgutil.iter_modules()"}, {"intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination .", "snippet": "shutil.move(src, dst)"}, {"intent": "Return `digest` of `msg` for given secret `key` and digest .", "snippet": "hmac.digest(key, msg, digest)"}, {"intent": "Get current state of a `coroutine` object .", "snippet": "inspect.getcoroutinestate(coroutine)"}, {"intent": "Make the turtle visible .", "snippet": "turtle.showturtle()"}, {"intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "snippet": "importlib.util.resolve_name(name, package)"}, {"intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "snippet": "window.timeout(delay)"}, {"intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "snippet": "time.mktime(t)"}, {"intent": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "snippet": "row.reason"}, {"intent": "The base class of all multiprocessing exceptions.", "snippet": "multiprocessing.ProcessError"}, {"intent": "Only available on Windows.", "snippet": "WindowsError"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "snippet": "importlib.__import__(name)"}, {"intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "snippet": "dialog.bitmap(name, x, y, width, height, text)"}, {"intent": "Level 3 reset", "snippet": "errno.EL3RST"}, {"intent": "The maximum depth for recursive interpolation for get() when the raw parameter is false.", "snippet": "configparser.MAX_INTERPOLATION_DEPTH"}, {"intent": "This is the superclass of all request handler objects.", "snippet": "socketserver.BaseRequestHandler"}, {"intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "snippet": "pkgutil.extend_path(path, name)"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "snippet": "shelve.open(filename, writeback=False)"}, {"intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "snippet": "config_parser.write(fileobject, space_around_delimiters=True)"}, {"intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "snippet": "IMAP4.rename(oldmailbox, newmailbox)"}, {"intent": "Remove named `header` from the request instance ( both from regular and unredirected headers ) .", "snippet": "Request.remove_header(header)"}, {"intent": "An array that represents the months of the year in the current locale.", "snippet": "calendar.month_name"}, {"intent": "Execute the `command` ( a string ) in a subshell .", "snippet": "os.system(command)"}, {"intent": "Rotate the deque `n` steps to the right .", "snippet": "deque.rotate()"}, {"intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "snippet": "test_case.assertRaisesRegex(exception, regex)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "snippet": "pickletools.dis(pickle, memo=None)"}, {"intent": "Set up user-defined coordinate system and switch to mode \u201c world \u201d if necessary . With arguments `llx`, `lly`, `urx`, `ury`.", "snippet": "turtle.setworldcoordinates(llx, lly, urx, ury)"}, {"intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "snippet": "json.JSONEncoder(check_circular=True)"}, {"intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "snippet": "logging.config.fileConfig(fname, defaults=None)"}, {"intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)"}, {"intent": "Called to allocate a new receive buffer . `sizehint` is the recommended minimum size for the returned buffer .", "snippet": "BufferedProtocol.get_buffer(sizehint)"}, {"intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "snippet": "str.rpartition(sep)"}, {"intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "snippet": "urllib.parse.unquote(string, encoding='utf-8')"}, {"intent": "Create and return an attribute node . With arguments `name`.", "snippet": "Document.createAttribute(name)"}, {"intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "snippet": "loop.sendfile(transport, file, count=None)"}, {"intent": "Process a chunk of `data` .", "snippet": "IncrementalParser.feed(data)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extractall(numeric_owner=False)"}, {"intent": "Open the database `file` file and return a corresponding object .", "snippet": "dbm.open(file)"}, {"intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "snippet": "audioop.getsample(fragment, width, index)"}, {"intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "snippet": "@reprlib.recursive_repr()"}, {"intent": "The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "snippet": "tkinter.tix.DirList"}, {"intent": "Return `x` divided by `y` , truncated to an integer .", "snippet": "context.divide_int(x, y)"}, {"intent": "Method called immediately after the test method has been called and the result recorded .", "snippet": "test_case.tearDown()"}, {"intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "snippet": "bdb.runeval(expr)"}, {"intent": "Represents a writer object that provides APIs to write data to the IO stream.", "snippet": "asyncio.StreamWriter"}, {"intent": "Return the sample standard deviation ( the square root of the sample variance ) . With arguments `data`.", "snippet": "statistics.stdev(data)"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid .", "snippet": "os.access(path, mode, effective_ids=False)"}, {"intent": "Bind the `domain` to the locale directory `localedir` .", "snippet": "gettext.bindtextdomain(domain)"}, {"intent": "Raise a URLError exception .", "snippet": "UnknownHandler.unknown_open()"}, {"intent": "Return a string representation suitable to be sent as HTTP headers .", "snippet": "BaseCookie.output()"}, {"intent": "Exception raised when an error occurs while attempting to compile the file.", "snippet": "py_compile.PyCompileError"}, {"intent": "A Future-like object that runs a Python coroutine . With arguments `coro`.", "snippet": "asyncio.Task(coro)"}, {"intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "snippet": "PurePath.joinpath(*other)"}, {"intent": "Exit from Python . The optional argument `arg` can be an integer giving the exit status ( defaulting to zero ) , or another type of object .", "snippet": "sys.exit(arg)"}, {"intent": "Return POSIX timestamp corresponding to the datetime instance .", "snippet": "datetime.timestamp()"}, {"intent": "Some character sets must be converted before they can be used in email headers or bodies.", "snippet": "charset.output_charset"}, {"intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "snippet": "date.fromisoformat(date_string)"}, {"intent": "An XML declaration was found somewhere other than the start of the input data.", "snippet": "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"}, {"intent": "Create a kqueue object from a given file descriptor . With arguments `fd`.", "snippet": "kqueue.fromfd(fd)"}, {"intent": "The maximum size (in bytes) of a core file that the current process can create.", "snippet": "resource.RLIMIT_CORE"}, {"intent": "Query or modify the configuration options of the Tix application context . With arguments `**kw`.", "snippet": "tixCommand.tix_configure(**kw)"}, {"intent": "This function is used to turn the `capture` of warnings by logging on and off .", "snippet": "logging.captureWarnings(capture)"}, {"intent": "The `year` , `month` and `day` arguments are required .", "snippet": "datetime.datetime(year, month, day)"}, {"intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "snippet": "email_message.get_body('html', 'plain'))"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "snippet": "gettext.install(domain, names=None)"}, {"intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "snippet": "message.get_all(name, failobj=None)"}, {"intent": "FancyURLopener subclasses URLopener providing default handling for the following HTTP response codes : 301 , 302 , 303 , 307 and 401 .", "snippet": "urllib.request.FancyURLopener()"}, {"intent": "Write some `data` bytes to the transport .", "snippet": "WriteTransport.write(data)"}, {"intent": "ABC for sized iterable container classes.", "snippet": "collections.abc.Collection"}, {"intent": "The most recent supported protocol in the CAPABILITY response from the server.", "snippet": "IMAP4.PROTOCOL_VERSION"}, {"intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "snippet": "Node.toxml(encoding=None)"}, {"intent": "Abstract base class for arrays . With arguments `*args`.", "snippet": "ctypes.Array(*args)"}, {"intent": "Lookup `name` in the table and return a Symbol instance .", "snippet": "symbol_table.lookup(name)"}, {"intent": "Return the number of elements in set `s` ( cardinality of s ) .", "snippet": "len(s)"}, {"intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "snippet": "os.major(device)"}, {"intent": "statespec will usually be a list or a tuple.", "snippet": "tkinter.ttk.Widget"}, {"intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "snippet": "stat.ST_SIZE"}, {"intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "snippet": "inspect.getattr_static(obj, attr)"}, {"intent": "Registers `trace_callback` to be called for each SQL statement that is actually executed by the SQLite backend .", "snippet": "connection.set_trace_callback(trace_callback)"}, {"intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "snippet": "asyncio.Queue(maxsize=0, loop=None)"}, {"intent": "This method sorts the list in place , using only < comparisons between items .", "snippet": "list.sort()"}, {"intent": "Create a directory named `pkg_dir` containing an __init__ file with `init_source` as its contents .", "snippet": "test.support.script_helper.make_pkg(pkg_dir)"}, {"intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "snippet": "controller.open(url, new=0, autoraise=True)"}, {"intent": "Return an arbitrary ( key , message ) pair , where key is a key and message is a message representation , and delete the corresponding message .", "snippet": "mailbox.popitem()"}, {"intent": "Called for character `data` .", "snippet": "xmlparser.CharacterDataHandler(data)"}, {"intent": "File locking deadlock error", "snippet": "errno.EDEADLOCK"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "snippet": "bdb.Breakpoint(self, file, line, funcname=None)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "snippet": "csv.DictReader(f, *args, **kwds)"}, {"intent": "Set default values for several option destinations at once . With arguments `dest`.", "snippet": "OptionParser.set_defaults(dest=value)"}, {"intent": "Holds the name of the client peer as returned by conn.getpeername() where conn is conn.", "snippet": "smtp_channel.peer"}, {"intent": "Returns True if `x` is a zero ; otherwise returns False .", "snippet": "context.is_zero(x)"}, {"intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "snippet": "unicodedata.decomposition(chr)"}, {"intent": "Return a tuple ( y , x ) of the height and width of the window .", "snippet": "window.getmaxyx()"}, {"intent": "Return buffered data without advancing the file position .", "snippet": "bz2_file.peek()"}, {"intent": "The code object has a variable positional parameter (*args-like).", "snippet": "inspect.CO_VARARGS"}, {"intent": "Attempt to cancel the call .", "snippet": "future.cancel()"}, {"intent": "Return a tuple ( y , x ) of current cursor position relative to the window \u2019 s upper-left corner .", "snippet": "window.getyx()"}, {"intent": "Run command with arguments . With arguments `args`.", "snippet": "subprocess.check_call(args)"}, {"intent": "A string giving the complete internal subset from the document.", "snippet": "DocumentType.internalSubset"}, {"intent": "This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.", "snippet": "mock.side_effect"}, {"intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "snippet": "Match.groups()"}, {"intent": "Load MIME information from a file named `filename` .", "snippet": "mime_types.read(filename)"}, {"intent": "Cancel the Future and schedule callbacks .", "snippet": "future.cancel()"}, {"intent": "Represents the C 32-bit unsigned int datatype.", "snippet": "ctypes.c_uint32"}, {"intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "snippet": "range(start, stop)"}, {"intent": "This is the repr ( ) method of aRepr . With arguments `obj`.", "snippet": "reprlib.repr(obj)"}, {"intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)"}, {"intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "snippet": "FutureWarning"}, {"intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "snippet": "DOMImplementation.hasFeature(feature, version)"}, {"intent": "Return a list of all the message \u2019 s header field names .", "snippet": "message.keys()"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number .", "snippet": "config_parser.getfloat(section, option)"}, {"intent": "Set the size and position of the main window . With arguments `width`, `height`.", "snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")"}, {"intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "snippet": "logging.Formatter(style='%')"}, {"intent": "Sets the path of the Python interpreter to use when starting a child process .", "snippet": "multiprocessing.set_executable()"}, {"intent": "Pull the pen down \u2013 drawing when moving .", "snippet": "turtle.pendown()"}, {"intent": "Get a list of `frame` records for a frame and all outer frames .", "snippet": "inspect.getouterframes(frame)"}, {"intent": "Write XML to the `writer` object . The `newl` parameter specifies the string to use to terminate newlines .", "snippet": "Node.writexml(writer, newl=\"\")"}, {"intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "snippet": "operator.itemgetter(item)"}, {"intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "snippet": "random.expovariate(lambd)"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list .", "snippet": "message.get_params()"}, {"intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")"}, {"intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "snippet": "curses.resetty()"}, {"intent": "Instantiate a socket from `data` obtained from the socket.share ( ) method .", "snippet": "socket.fromshare(data)"}, {"intent": "This class is the low-level building block of the module .", "snippet": "xml.etree.ElementTree.XMLParser()"}, {"intent": "Return a Boolean value , i.e .", "snippet": "bool()"}, {"intent": "Return a Signature object for the given `callable` :", "snippet": "inspect.signature(callable)"}, {"intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "snippet": "context.divmod(x, y)"}, {"intent": "Return the data in the buffer as a list of elements .", "snippet": "memoryview.tolist()"}, {"intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)"}, {"intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "snippet": "imaplib.IMAP4_stream(command)"}, {"intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "snippet": "bdb.do_clear(arg)"}, {"intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "snippet": "textwrap.shorten(text, width, **kwargs)"}, {"intent": "Return the name of the encoding used to convert between Unicode filenames and bytes filenames .", "snippet": "sys.getfilesystemencoding()"}, {"intent": "Raised on thread-specific errors.", "snippet": "_thread.error"}, {"intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "snippet": "fileinput.hook_compressed(filename, mode)"}, {"intent": "Platform dependent, but if non-zero, uniquely identifies the file for a given value of st_dev.", "snippet": "stat_result.st_ino"}, {"intent": "For syntax errors - the offset into the text where the error occurred.", "snippet": "traceback_exception.offset"}, {"intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "snippet": "xml.sax.SAXParseException(msg, exception, locator)"}, {"intent": "Store the value from `stdout` .", "snippet": "test.support.record_original_stdout(stdout)"}, {"intent": "Keep a database of  (realm, uri) -> (user, password) mappings.", "snippet": "urllib.request.HTTPPasswordMgr"}, {"intent": "Set the character set of the payload to `charset` , which can either be a Charset instance ( see email.charset ) , a string naming a character set , or None .", "snippet": "message.set_charset(charset)"}, {"intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "snippet": "sys.version"}, {"intent": "A static method which returns a callable that creates a lazy `loader` .", "snippet": "lazy_loader.factory(loader)"}, {"intent": "Route attribute access on a class to __getattr__ . With arguments `fget`.", "snippet": "types.DynamicClassAttribute(fget=None)"}, {"intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')"}, {"intent": "Return a new array of bytes .", "snippet": "bytearray()"}, {"intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "snippet": "threading.BoundedSemaphore(value=1)"}, {"intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "snippet": "decimal.next_toward(other)"}, {"intent": "A sequence of null-terminated strings, terminated by two null characters.", "snippet": "winreg.REG_MULTI_SZ"}, {"intent": "Return the data in the buffer as a bytestring .", "snippet": "memoryview.tobytes()"}, {"intent": "This is an abstract base class for running WSGI applications.", "snippet": "wsgiref.handlers.BaseHandler"}, {"intent": "Set `handler` as the new event loop exception handler .", "snippet": "loop.set_exception_handler(handler)"}, {"intent": "Set the background property of the window to the character `ch` , with attributes `attr` .", "snippet": "window.bkgd(ch, attr)"}, {"intent": "Unpack an archive . `filename` is the full path of the archive .", "snippet": "shutil.unpack_archive(filename)"}, {"intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "snippet": "audioop.lin2adpcm(fragment, width, state)"}, {"intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "snippet": "time.process_time()"}, {"intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "snippet": "test.support.modules_cleanup(oldmodules)"}, {"intent": "Return information needed to authenticate the user at the given `host` in the specified security `realm` .", "snippet": "fancy_ur_lopener.prompt_user_passwd(host, realm)"}, {"intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "snippet": "inspect.getcomments(object)"}, {"intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "snippet": "compileall.compile_path(skip_curdir=True)"}, {"intent": "\u201c Byteswap \u201d all items of the array .", "snippet": "array.byteswap()"}, {"intent": "Reads one line from the remote server .", "snippet": "IMAP4.readline()"}, {"intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "snippet": "re.search(pattern, string, flags=0)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "snippet": "tempfile.mkstemp(suffix=None, dir=None)"}, {"intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "snippet": "nntplib.NNTPProtocolError"}, {"intent": "Context manager to start `threads` . With arguments `unlock`.", "snippet": "test.support.start_threads(threads, unlock=None)"}, {"intent": "Returns the digit value assigned to the character `chr` as integer .", "snippet": "unicodedata.digit(chr)"}, {"intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "snippet": "UUID.version"}, {"intent": "Get or set the current default isolation level.", "snippet": "connection.isolation_level"}, {"intent": "Return the password database entry for the given user `name` .", "snippet": "pwd.getpwnam(name)"}, {"intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code .", "snippet": "ctypes.WinError(code=None)"}, {"intent": "Returns the name of the element at position `x` `y` , or the empty string if the point does not lie within any element .", "snippet": "widget.identify(x, y)"}, {"intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "snippet": "memoryview(obj)"}, {"intent": "Scheduling policy for extremely low priority background tasks.", "snippet": "os.SCHED_IDLE"}, {"intent": "Platform dependent:", "snippet": "stat_result.st_ctime"}, {"intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line .", "snippet": "email.generator.Generator(outfp, mangle_from_=None)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "snippet": "pickletools.dis(pickle, annotate=0)"}, {"intent": "Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:", "snippet": "tokenize.TokenError"}, {"intent": "A bool indicating whether the memory is C-contiguous.", "snippet": "memoryview.c_contiguous"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `checker` specifies the OutputChecker object ( or drop-in replacement ) that should be used to compare the expected outputs to the actual outputs of doctest examples . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "snippet": "doctest.DocTestRunner(checker=None, optionflags=0)"}, {"intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "snippet": "SSLContext.set_ecdh_curve(curve_name)"}, {"intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "snippet": "multiprocessing.connection.answer_challenge(connection, authkey)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` .", "snippet": "unittest.TextTestRunner()"}, {"intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "snippet": "dbm.gnu.error"}, {"intent": "The HTTP status used for error responses.", "snippet": "base_handler.error_status"}, {"intent": "Change the window associated with the panel to the window `win` .", "snippet": "Panel.replace(win)"}, {"intent": "Equivalent to put ( `obj` , False ) .", "snippet": "queue.put_nowait(obj)"}, {"intent": "The UUID as a 32-character hexadecimal string.", "snippet": "UUID.hex"}, {"intent": "If `themename` is not given , returns the theme in use .", "snippet": "style.theme_use()"}, {"intent": "Close the database object , through MsiCloseHandle ( ) .", "snippet": "Database.Close()"}, {"intent": "Time of last modification.", "snippet": "stat.ST_MTIME"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "snippet": "dataclasses.make_dataclass(cls_name, fields)"}, {"intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "snippet": "base_header.defects"}, {"intent": "Return a copy of the string with trailing characters removed .", "snippet": "str.rstrip()"}, {"intent": "Return True if `name` is in the set of SMTP service extensions returned by the server , False otherwise .", "snippet": "SMTP.has_extn(name)"}, {"intent": "Base class for creating enumerated constants that can be combined using the bitwise operations without losing their Flag membership.", "snippet": "enum.Flag"}, {"intent": "Protocol wrong type for socket", "snippet": "errno.EPROTOTYPE"}, {"intent": "A bool indicating whether the memory is Fortran contiguous.", "snippet": "memoryview.f_contiguous"}, {"intent": "Returns None as extension modules do not have source code . With arguments `fullname`.", "snippet": "extension_file_loader.get_source(fullname)"}, {"intent": "A bitmask or\u2019ing together all the comparison flags above.", "snippet": "doctest.COMPARISON_FLAGS"}, {"intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "snippet": "coverage_results.write_results(show_missing=True)"}, {"intent": "A subclass of OSError, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout() (or implicitly through setdefaulttimeout()).", "snippet": "socket.timeout"}, {"intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "snippet": "ssl.create_default_context(cafile=None)"}, {"intent": "This exception is raised on certain errors.", "snippet": "ossaudiodev.OSSAudioError"}, {"intent": "Just returns 10 , as this is Decimal , : )", "snippet": "context.radix()"}, {"intent": "Perform the equivalent of an lstat ( ) system call on the given `path` . With arguments `dir_fd`.", "snippet": "os.lstat(path, dir_fd=None)"}, {"intent": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "snippet": "test_case.longMessage"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "snippet": "@dataclasses.dataclass(init=True)"}, {"intent": "The minimum or maximum supported SSL or TLS version.", "snippet": "TLSVersion.MAXIMUM_SUPPORTED"}, {"intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "snippet": "bytes.translate(table)"}, {"intent": "Return True if the stream is closed or in the process of being closed .", "snippet": "stream_writer.is_closing()"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "snippet": "urllib.parse.quote_plus(string, encoding=None)"}, {"intent": "Called for every processing instruction . With arguments `target`, `data`.", "snippet": "xmlparser.ProcessingInstructionHandler(target, data)"}, {"intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "snippet": "concurrent.futures.wait(fs, timeout=None)"}, {"intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "snippet": "sys.set_coroutine_wrapper(wrapper)"}, {"intent": "Takes a `producer` object and adds it to the producer queue associated with the channel .", "snippet": "async_chat.push_with_producer(producer)"}, {"intent": "Extract the raw traceback from the current stack frame .", "snippet": "traceback.extract_stack()"}, {"intent": "True if the address is allocated for public networks.", "snippet": "i_pv4_address.is_global"}, {"intent": "Write all items ( as machine values ) to the file object `f` .", "snippet": "array.tofile(f)"}, {"intent": "Return the currently running Task instance , or None if no task is running .", "snippet": "asyncio.current_task()"}, {"intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "snippet": "audioop.cross(fragment, width)"}, {"intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "snippet": "next(iterator)"}, {"intent": "Special type indicating that a function never returns.", "snippet": "typing.NoReturn"}, {"intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "snippet": "logging.basicConfig(**kwargs)"}, {"intent": "human readable name for operation", "snippet": "opname"}, {"intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "snippet": "defaultdict.__missing__(key)"}, {"intent": "Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "snippet": "dis.hasfree"}, {"intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "snippet": "message.replace_header(_name, _value)"}, {"intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "snippet": "queue_handler.enqueue(record)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . `format` controls the archive format .", "snippet": "tarfile.TarFile(format=DEFAULT_FORMAT)"}, {"intent": "Compare two operands using their abstract representation rather than their numerical value . This operation is unaffected by `context` and is quiet : no flags are changed and no rounding is performed . With arguments `other`.", "snippet": "decimal.compare_total(other, context=None)"}, {"intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "snippet": "gettext.gettext(message)"}, {"intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "snippet": "os.path.commonpath(paths)"}, {"intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "snippet": "logging.LoggerAdapter(logger, extra)"}, {"intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)"}, {"intent": "Return True if it is a character device .", "snippet": "TarInfo.ischr()"}, {"intent": "Dictionary mapping host names to (login, account, password) tuples.", "snippet": "netrc.hosts"}, {"intent": "Compares two operands using their abstract representation , ignoring sign . With arguments `x`, `y`.", "snippet": "context.compare_total_mag(x, y)"}, {"intent": "Copies the sign from `y` to `x` .", "snippet": "context.copy_sign(x, y)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')"}, {"intent": "The tuple of arguments given to the exception constructor.", "snippet": "auto.args"}, {"intent": "Returns the identifier of `item` \u2019 s previous sibling , or \u2018 \u2019 if item is the first child of its parent .", "snippet": "widget.prev(item)"}, {"intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "snippet": "faulthandler.enable(file=sys.stderr)"}, {"intent": "Temporarily unset the environment variable `envvar` .", "snippet": "EnvironmentVarGuard.unset(envvar)"}, {"intent": "Return a weak reference to `object` . If `callback` is provided and not None , and the returned weakref object is still alive , the callback will be called when the object is about to be finalized ; the weak reference object will be passed as the only parameter to the callback ; the referent will no longer be available .", "snippet": "weakref.ref(object, callback)"}, {"intent": "If the header value can be recognized as a valid date of one form or another, this attribute will contain a datetime instance representing that date.", "snippet": "date_header.datetime"}, {"intent": "A dictionary mapping method names to line numbers.", "snippet": "Class.methods"}, {"intent": "Possible values for the mode parameter to the spawn* family of functions.", "snippet": "os.P_NOWAIT"}, {"intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function .", "snippet": "warnings.catch_warnings()"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "snippet": "ArgumentParser.add_subparsers()"}, {"intent": "Cast a value to a type . With arguments `typ`, `val`.", "snippet": "typing.cast(typ, val)"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "snippet": "tempfile.NamedTemporaryFile(delete=True)"}, {"intent": "Returns sampling frequency .", "snippet": "AU_read.getframerate()"}, {"intent": "( Only supported on Linux 2.5.44 and newer . )", "snippet": "select.epoll()"}, {"intent": "Return the value of the ( natural ) exponential function e**x at the given number .", "snippet": "decimal.exp()"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `verbose` prints lots of stuff if true , and prints only failures if false ; by default , or if None , it \u2019 s true if and only if '-v ' is in sys.argv .", "snippet": "doctest.testfile(filename, verbose=None)"}, {"intent": "Expands all children of `node` into node .", "snippet": "sax2_dom.expandNode(node)"}, {"intent": "Return the remainder from dividing self by `other` .", "snippet": "decimal.remainder_near(other)"}, {"intent": "Return the OptionGroup to which the short or long option string `opt_str` ( e.g .", "snippet": "OptionParser.get_option_group(opt_str)"}, {"intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "snippet": "random.normalvariate(mu, sigma)"}, {"intent": "Returns a single line , starting at the current file position and up to the next newline .", "snippet": "mmap.readline()"}, {"intent": "An in-memory stream for text I/O .", "snippet": "io.StringIO()"}, {"intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "snippet": "breakpoint(*args, **kws)"}, {"intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "snippet": "divmod(a, b)"}, {"intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "snippet": "test_case.assertWarnsRegex(warning, regex)"}, {"intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "snippet": "curses.has_il()"}, {"intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings .", "snippet": "doc_test_finder.find(obj)"}, {"intent": "Escape all special characters ( ' ? With arguments `pathname`.", "snippet": "glob.escape(pathname)"}, {"intent": "Write XML to the `writer` object .", "snippet": "Node.writexml(writer)"}, {"intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "snippet": "datetime.resolution"}, {"intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "snippet": "env_builder.install_scripts(context, path)"}, {"intent": "All arguments are optional . With arguments `hour`, `minute`.", "snippet": "datetime.time(hour=0, minute=0)"}, {"intent": "The username@domain portion of the address, correctly quoted for use as a bare address (the second form shown above).", "snippet": "address.addr_spec"}, {"intent": "Register a `fd` descriptor with the epoll object .", "snippet": "epoll.register(fd)"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "snippet": "locale.currency(val, grouping=False)"}, {"intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods .", "snippet": "oss_audio_device.setparameters(format, nchannels, samplerate)"}, {"intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "snippet": "all(iterable)"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "snippet": "base64.a85encode(b, wrapcol=0, pad=False)"}, {"intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "snippet": "sunau.AUDIO_FILE_MAGIC"}, {"intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extractall(path=None, pwd=None)"}, {"intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "snippet": "window.is_linetouched(line)"}, {"intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "snippet": "NNTP.ihave(message_id, data)"}, {"intent": "A real list object used to store the contents of the UserList class.", "snippet": "user_list.data"}, {"intent": "A Semaphore object . With arguments `loop`.", "snippet": "asyncio.Semaphore(loop=None)"}, {"intent": "Hide the panel .", "snippet": "Panel.hide()"}, {"intent": "Return True if the set has no elements in common with `other` .", "snippet": "set.isdisjoint(other)"}, {"intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "snippet": "bytes_parser.parsebytes(bytes)"}, {"intent": "Install an OpenerDirector instance as the default global `opener` .", "snippet": "urllib.request.install_opener(opener)"}, {"intent": "Identical to copy ( ) except that copy2 ( ) also attempts to preserve file metadata . When `follow_symlinks` is false , and `src` is a symbolic link , copy2 ( ) attempts to copy all metadata from the src symbolic link to the newly-created `dst` symbolic link .", "snippet": "shutil.copy2(src, dst)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` .", "snippet": "NNTP.login()"}, {"intent": "Generate a stereo `fragment` from a mono fragment . Each pair of samples in the stereo fragment are computed from the mono sample , whereby left channel samples are multiplied by `lfactor` and right channel samples by `rfactor` . With arguments `width`.", "snippet": "audioop.tostereo(fragment, width, lfactor, rfactor)"}, {"intent": "Revert control channel back to plaintext .", "snippet": "FTP_TLS.ccc()"}, {"intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "snippet": "bdb.clear_bpbynumber(arg)"}, {"intent": "Class derived from Error.", "snippet": "xdrlib.ConversionError"}, {"intent": "Parse the `source` into an AST node .", "snippet": "ast.parse(source)"}, {"intent": "As well as tracking calls to themselves, mocks also track calls to methods and attributes, and their methods and attributes:", "snippet": "mock.method_calls"}, {"intent": "Set UID bit.", "snippet": "stat.S_ISUID"}, {"intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "snippet": "re.fullmatch(pattern, string, flags=0)"}, {"intent": "Returns True if `year` is a leap year , otherwise False .", "snippet": "calendar.isleap(year)"}, {"intent": "Return the table \u2019 s identifier .", "snippet": "symbol_table.get_id()"}, {"intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "snippet": "element.append(subelement)"}, {"intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "snippet": "xmlrpc.client.dumps(params, encoding=None)"}, {"intent": "The maximum number of frames to include in tracebacks output by the default log_exception() method.", "snippet": "base_handler.traceback_limit"}, {"intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "snippet": "ZipFile.extract(member)"}, {"intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "snippet": "BaseCookie.value_encode(val)"}, {"intent": "The address (IPv4Address) without network information.", "snippet": "i_pv4_interface.ip"}, {"intent": "If `flag` is True , escape sequences will not be timed out .", "snippet": "window.notimeout(flag)"}, {"intent": "Return the current contents of history item at `index` .", "snippet": "readline.get_history_item(index)"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "snippet": "fileinput.FileInput(inplace=False)"}, {"intent": "Transform a method into a static method.", "snippet": "@staticmethod"}, {"intent": "Return the subprocess process id as an integer .", "snippet": "SubprocessTransport.get_pid()"}, {"intent": "Process a single command keystroke . With arguments `ch`.", "snippet": "textbox.do_command(ch)"}, {"intent": "Return the parent \u2019 s process id .", "snippet": "os.getppid()"}, {"intent": "Discard all session cookies .", "snippet": "CookieJar.clear_session_cookies()"}, {"intent": "Force buffered data to be transmitted to the client .", "snippet": "base_handler._flush()"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "snippet": "gettext.translation(domain)"}, {"intent": "Class that simulates a `list` .", "snippet": "collections.UserList(list)"}, {"intent": "The OpenerDirector class opens URLs via BaseHandlers chained together.", "snippet": "urllib.request.OpenerDirector"}, {"intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "snippet": "widget.tag_bind(tagname)"}, {"intent": "Return an int with `k` random bits .", "snippet": "secrets.randbits(k)"}, {"intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument . Optional argument `pm` has the same meaning as in function debug ( ) above .", "snippet": "doctest.debug_src(src, pm=False)"}, {"intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "snippet": "email.utils.decode_params(params)"}, {"intent": "This is the base class for all exceptions that the email package can raise.", "snippet": "email.errors.MessageError"}, {"intent": "The content of the processing instruction up to the first whitespace character.", "snippet": "ProcessingInstruction.target"}, {"intent": "The Control widget is also known as the SpinBox widget.", "snippet": "tkinter.tix.Control"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "snippet": "json.dumps(obj, **kw, separators=None)"}, {"intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "snippet": "getpass.getpass(stream=None)"}, {"intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "snippet": "path_entry_finder.find_loader(fullname)"}, {"intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "snippet": "xmlrpc.client.MultiCall(server)"}, {"intent": "Encode the string `s` according to RFC 2231 .", "snippet": "email.utils.encode_rfc2231(s)"}, {"intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "snippet": "mailbox.mbox(path, factory=None)"}, {"intent": "Set to the top level directory for the test package.", "snippet": "test.support.TEST_HOME_DIR"}, {"intent": "When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs.", "snippet": "sys.tracebacklimit"}, {"intent": "Returns the top panel in the panel stack .", "snippet": "curses.panel.top_panel()"}, {"intent": "Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).", "snippet": "MemoryError"}, {"intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)"}, {"intent": "Fetches the next set of rows of a query result , returning a list .", "snippet": "cursor.fetchmany()"}, {"intent": "Add a header to the message with field `name` name and value `val` .", "snippet": "message.__setitem__(name, val)"}, {"intent": "Feed some text to the parser . It is processed insofar as it consists of complete elements ; incomplete `data` is buffered until more data is fed or close ( ) is called .", "snippet": "HTMLParser.feed(data)"}, {"intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "snippet": "Morsel.update(values)"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "snippet": "cmd.Cmd(completekey='tab', stdin=None)"}, {"intent": "Write `data` to the output file .", "snippet": "aifc.writeframes(data)"}, {"intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`.", "snippet": "urllib.parse.urlsplit(urlstring)"}, {"intent": "Size of the uncompressed file.", "snippet": "ZipInfo.file_size"}, {"intent": "Return a new dict which maps field names to their corresponding values :", "snippet": "somenamedtuple._asdict()"}, {"intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "snippet": "ssl.OP_SINGLE_DH_USE"}, {"intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "snippet": "difflib.SequenceMatcher"}, {"intent": "The asynchronous input buffer size (default 4096).", "snippet": "ac_in_buffer_size"}, {"intent": "Equivalent to as_string ( ) .", "snippet": "message.__str__()"}, {"intent": "Class for creating ZIP archives containing Python libraries.", "snippet": "zipfile.PyZipFile"}, {"intent": "Set resizemode to one of the values : \u201c auto \u201d , \u201c user \u201d , \u201c noresize \u201d .", "snippet": "turtle.resizemode()"}, {"intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "snippet": "NNTP.xover(start, end, file=None)"}, {"intent": "Returns the list of `elementname` \u2019 s options .", "snippet": "style.element_options(elementname)"}, {"intent": "Define the widget layout for given `style` .", "snippet": "style.layout(style)"}, {"intent": "Call timeit ( ) a few times .", "snippet": "timer.repeat()"}, {"intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "snippet": "curses.resizeterm(nlines, ncols)"}, {"intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "queue_listener.info(msg, *args, **kwargs)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "snippet": "message.del_param(param)"}, {"intent": "Changes the default filesystem encoding and errors mode to \u2018 mbcs \u2019 and \u2018 replace \u2019 respectively , for consistency with versions of Python prior to 3.6 .", "snippet": "sys._enablelegacywindowsfsencoding()"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `checker` specifies the OutputChecker object ( or drop-in replacement ) that should be used to compare the expected outputs to the actual outputs of doctest examples . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "snippet": "doctest.DocTestRunner(checker=None, verbose=None, optionflags=0)"}, {"intent": "Set or remove the completion display `function` .", "snippet": "readline.set_completion_display_matches_hook(function)"}, {"intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "snippet": "compileall.compile_path(optimize=-1)"}, {"intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "snippet": "tree_builder.doctype(name, pubid, system)"}, {"intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "snippet": "datetime.combine(date, time)"}, {"intent": "Set the panel \u2019 s user pointer to `obj` .", "snippet": "Panel.set_userptr(obj)"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) .", "snippet": "shutil.make_archive(base_name, format)"}, {"intent": "Write the `value` on the open `file` .", "snippet": "marshal.dump(value, file)"}, {"intent": "Set default values for missing arguments .", "snippet": "bound_arguments.apply_defaults()"}, {"intent": "The latest representable date, date(MAXYEAR, 12, 31).", "snippet": "date.max"}, {"intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)"}, {"intent": "The content of the processing instruction following the first whitespace character.", "snippet": "ProcessingInstruction.data"}, {"intent": "Retrieves the message header plus `howmuch` lines of the message after the header of message number `which` .", "snippet": "POP3.top(which, howmuch)"}, {"intent": "Get the current event loop .", "snippet": "asyncio.get_event_loop()"}, {"intent": "A pickler object\u2019s dispatch table is a registry of reduction functions of the kind which can be declared using copyreg.pickle().", "snippet": "pickler.dispatch_table"}, {"intent": "Similar to CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments.", "snippet": "time.CLOCK_MONOTONIC_RAW"}, {"intent": "Remove and return `oldAttr` from the attribute list , if present .", "snippet": "Element.removeAttributeNode(oldAttr)"}, {"intent": "Controls the type of Content Transfer Encodings that may be or are required to be used.", "snippet": "policy.cte_type"}, {"intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "snippet": "struct.unpack(buffer)"}, {"intent": "Prepare for object destruction .", "snippet": "io_base.__del__()"}, {"intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "snippet": "datetime.timedelta"}, {"intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "snippet": "HTMLParser.handle_startendtag(tag, attrs)"}, {"intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "snippet": "datetime.fromtimestamp(timestamp, tz=None)"}, {"intent": "Start the process \u2019 s activity .", "snippet": "process.start()"}, {"intent": "Replaces the root `element` for this tree .", "snippet": "element_tree._setroot(element)"}, {"intent": "Return a property attribute .", "snippet": "property()"}, {"intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line .", "snippet": "email.iterators.body_line_iterator(msg)"}, {"intent": "Value which can be used in the font specification passed to the push_font() method described below, or as the new value to any other push_property() method.", "snippet": "formatter.AS_IS"}, {"intent": "If `flag` is True , allow 8-bit characters to be input .", "snippet": "curses.meta(flag)"}, {"intent": "Called when the asynchronous loop detects that a read ( ) call on the channel \u2019 s socket will succeed .", "snippet": "dispatcher.handle_read()"}, {"intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "snippet": "formatter.vformat(format_string, args, kwargs)"}, {"intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "snippet": "hash.hexdigest()"}, {"intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "snippet": "subprocess.check_output(args, shell=False)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, strict_parsing=False)"}, {"intent": "This method allows you to compare two Charset instances for inequality . With arguments `other`.", "snippet": "charset.__ne__(other)"}, {"intent": "Return a dictionary of sequence names mapped to key lists .", "snippet": "mh.get_sequences()"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "snippet": "shlex.shlex(instream=None, punctuation_chars=False)"}, {"intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "snippet": "example.options"}, {"intent": "Set or return the current transformation matrix of the turtle shape .", "snippet": "turtle.shapetransform()"}, {"intent": "The exit status or error message that is passed to the constructor.", "snippet": "auto.code"}, {"intent": "A dictionary mapping names to descriptors for nested functions and classes.", "snippet": "Function.children"}, {"intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "snippet": "timedelta.resolution"}, {"intent": "True if the address is reserved for link-local usage.", "snippet": "i_pv4_address.is_link_local"}, {"intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "snippet": "quit(code=None)"}, {"intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "snippet": "formatter.format(record)"}, {"intent": "Helper to print a traceback from the timed code . The optional `file` argument directs where the traceback is sent ; it defaults to sys.stderr .", "snippet": "timer.print_exc(file=None)"}, {"intent": "To be called just before drawing a shape to be filled .", "snippet": "turtle.begin_fill()"}, {"intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "snippet": "typing.FrozenSet(frozenset)"}, {"intent": "A helper codec that decodes newlines for universal newlines mode.", "snippet": "io.IncrementalNewlineDecoder"}, {"intent": "Dictionary mapping operation names to bytecodes.", "snippet": "dis.opmap"}, {"intent": "Required to enumerate the subkeys of a registry key.", "snippet": "winreg.KEY_ENUMERATE_SUB_KEYS"}, {"intent": "Return a list of labels on the message .", "snippet": "babyl_message.get_labels()"}, {"intent": "The element named by the model name was declared to have a content model of ANY.", "snippet": "xml.parsers.expat.model.XML_CTYPE_ANY"}, {"intent": "Sends `data` to the remote server .", "snippet": "IMAP4.send(data)"}, {"intent": "Read and return one line from the stream .", "snippet": "io_base.readline()"}, {"intent": "Exception failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc.", "snippet": "http.cookies.CookieError"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "snippet": "zipfile.ZipFile(file, allowZip64=True)"}, {"intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "snippet": "oct(x)"}, {"intent": "Finishes feeding data to the parser .", "snippet": "xml_parser.close()"}, {"intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"}, {"intent": "This is a straightforward interface to the Unix select ( ) system call . With arguments `rlist`, `wlist`, `xlist`.", "snippet": "select.select(rlist, wlist, xlist)"}, {"intent": "Send a GROUP command , where `name` is the group name .", "snippet": "NNTP.group(name)"}, {"intent": "Restore the previous alignment .", "snippet": "formatter.pop_alignment()"}, {"intent": "Bind the socket to `address` .", "snippet": "dispatcher.bind(address)"}, {"intent": "The numeric constant for the BZIP2 compression method.", "snippet": "zipfile.ZIP_BZIP2"}, {"intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "snippet": "formatter.format(format_string, *args, **kwargs)"}, {"intent": "The size of the resulting hash in bytes.", "snippet": "hash.digest_size"}, {"intent": "The docstring of the module.", "snippet": "module_type.__doc__"}, {"intent": "Closes the socket to the remote host .", "snippet": "sys_log_handler.close()"}, {"intent": "This method does an unregister ( ) followed by a register ( ) . With arguments `fd`.", "snippet": "devpoll.modify(fd)"}, {"intent": "The keyword arguments that will be supplied when the partial object is called.", "snippet": "partial.keywords"}, {"intent": "This function transforms a generator function into a coroutine function which returns a generator-based coroutine . If `gen_func` is a generator function , it will be modified in-place .", "snippet": "types.coroutine(gen_func)"}, {"intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "snippet": "mock.reset_mock(side_effect=False)"}, {"intent": "A container for coverage results, created by Trace.results().", "snippet": "trace.CoverageResults"}, {"intent": "Controls when quotes should be generated by the writer and recognised by the reader.", "snippet": "Dialect.quoting"}, {"intent": "Stderr output of the child process if it was captured by run().", "snippet": "completed_process.stderr"}, {"intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "snippet": "decimal.to_integral_value(rounding=None)"}, {"intent": "If `flag` is True , then syncup ( ) is called automatically whenever there is a change in the window .", "snippet": "window.syncok(flag)"}, {"intent": "Try to set the audio sampling rate to `samplerate` samples per second .", "snippet": "oss_audio_device.speed(samplerate)"}, {"intent": "Characters were found in the public id that are not allowed.", "snippet": "xml.parsers.expat.errors.XML_ERROR_PUBLICID"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "snippet": "zipfile.ZipFile(file, compresslevel=None)"}, {"intent": "Handle requests until an explicit shutdown ( ) request .", "snippet": "base_server.serve_forever()"}, {"intent": "Return the low median of numeric `data` .", "snippet": "statistics.median_low(data)"}, {"intent": "Commit the changes pending in the current transaction , by calling MSIDatabaseCommit ( ) .", "snippet": "Database.Commit()"}, {"intent": "Duplicate file descriptor `fd` to `fd2` , closing the latter first if necessary . The new file descriptor is `inheritable` by default or non-inheritable if inheritable is False .", "snippet": "os.dup2(fd, fd2, inheritable=True)"}, {"intent": "If this attribute is numeric and 1 or more, a shlex instance will print verbose progress output on its behavior.", "snippet": "shlex.debug"}, {"intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "snippet": "xml.etree.ElementInclude.default_loader(href, parse)"}, {"intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "snippet": "email.headerregistry.Group(display_name=None)"}, {"intent": "Represents the C char datatype, and interprets the value as a single character.", "snippet": "ctypes.c_char"}, {"intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "snippet": "formatter.push_font((size, italic, bold, teletype))"}, {"intent": "Enter the runtime context and return either this object or another object related to the runtime context .", "snippet": "contextmanager.__enter__()"}, {"intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "snippet": "ContentHandler.setDocumentLocator(locator)"}, {"intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries .", "snippet": "bytes.splitlines()"}, {"intent": "Save the history list to a readline history file , overwriting any existing file . The default `filename` is ~/.history .", "snippet": "readline.write_history_file(filename)"}, {"intent": "A base class for connection-related issues.", "snippet": "ConnectionError"}, {"intent": "Raised when an attempt is made to use an object that is not defined or is no longer usable.", "snippet": "xml.dom.InvalidStateErr"}, {"intent": "Return True if `x` is neither an infinity nor a NaN , and False otherwise .", "snippet": "math.isfinite(x)"}, {"intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "snippet": "msilib.RadioButtonGroup(dlg, name, property)"}, {"intent": "Logs a message with level INFO on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "logging.info(msg, *args, **kwargs)"}, {"intent": "Exception raised on various occasions; argument is a string describing what is wrong.", "snippet": "struct.error"}, {"intent": "Class for timing execution speed of small code snippets .", "snippet": "timeit.Timer()"}, {"intent": "A 64-bit number in little-endian format.", "snippet": "winreg.REG_QWORD_LITTLE_ENDIAN"}, {"intent": "The same as RawArray ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes array . With arguments `typecode_or_type`, `size_or_initializer`.", "snippet": "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "snippet": "faulthandler.dump_traceback_later(timeout)"}, {"intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "snippet": "test.support.MISSING_C_DOCSTRINGS"}, {"intent": "Set the value of `a` at index `b` to `c` .", "snippet": "operator.setitem(a, b, c)"}, {"intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "snippet": "xml.etree.ElementTree.XMLID(text)"}, {"intent": "Filter specific data.", "snippet": "kevent.data"}, {"intent": "If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file.", "snippet": "csvreader.fieldnames"}, {"intent": "If `flag` is True , escape sequences generated by some keys ( keypad , function keys ) will be interpreted by curses .", "snippet": "window.keypad(flag)"}, {"intent": "Return the current UTC date and time , with tzinfo None .", "snippet": "datetime.utcnow()"}, {"intent": "The __suppress_context__ value from the original exception.", "snippet": "traceback_exception.__suppress_context__"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extract(member, set_attrs=True, numeric_owner=False)"}, {"intent": "Checks for ASCII any printable character except space . With arguments `c`.", "snippet": "curses.ascii.isgraph(c)"}, {"intent": "Unfreeze the objects in the permanent generation , put them back into the oldest generation .", "snippet": "gc.unfreeze()"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "snippet": "date.replace(year=self.year)"}, {"intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "snippet": "doc_test.examples"}, {"intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "snippet": "ssl.SSLObject"}, {"intent": "Return the currently running Task instance , or None if no task is running . If `loop` is None get_running_loop ( ) is used to get the current loop .", "snippet": "asyncio.current_task(loop=None)"}, {"intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object .", "snippet": "shelve.DbfilenameShelf(filename)"}, {"intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "snippet": "webbrowser.open(url, new=0)"}, {"intent": "Clears the local variables of all the stack frames in a traceback `tb` by calling the clear ( ) method of each frame object .", "snippet": "traceback.clear_frames(tb)"}, {"intent": "Returns the volume of a given mixer `control` .", "snippet": "oss_mixer_device.get(control)"}, {"intent": "The mathematical constant \u03c0, as a float.", "snippet": "cmath.pi"}, {"intent": "The requested read operation did not complete fully.", "snippet": "asyncio.IncompleteReadError"}, {"intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "snippet": "urllib.request.urlcleanup()"}, {"intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "snippet": "test_case.assertWarns(warning)"}, {"intent": "Cause requests to go through a proxy .", "snippet": "urllib.request.ProxyHandler()"}, {"intent": "Update the set, adding elements from all others.", "snippet": "set |= other | ..."}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "snippet": "lzma.open(filename, check=-1)"}, {"intent": "Identify the client using a plaintext `password` . With arguments `user`.", "snippet": "IMAP4.login(user, password)"}, {"intent": "The process ID of the child process.", "snippet": "Popen.pid"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "snippet": "io.TextIOWrapper(buffer, encoding=None, errors=None)"}, {"intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "snippet": "aifc.getnchannels()"}, {"intent": "The root of the numeric hierarchy.", "snippet": "numbers.Number"}, {"intent": "Display the exception that just occurred .", "snippet": "InteractiveInterpreter.showtraceback()"}, {"intent": "The file extension of the final component, if any:", "snippet": "PurePath.suffix"}, {"intent": "Push an input source stream onto the input stack . With arguments `newstream`.", "snippet": "shlex.push_source(newstream)"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "snippet": "os.sendfile(out, in, offset, count, flags=0)"}, {"intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "snippet": "collections.OrderedDict()"}, {"intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_exc()"}, {"intent": "Return a string representing the date , controlled by an explicit `format` string .", "snippet": "date.strftime(format)"}, {"intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "snippet": "xml.sax.xmlreader.IncrementalParser"}, {"intent": "Same as article ( ) , but sends a HEAD command . The lines returned ( or written to `file` ) will only contain the message headers , not the body . With arguments `message_spec`.", "snippet": "NNTP.head(message_spec=None, file=None)"}, {"intent": "Creates a collation with the specified `name` and `callable` .", "snippet": "connection.create_collation(name, callable)"}, {"intent": "Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "snippet": "PermissionError"}, {"intent": "Line number (int).", "snippet": "frame.lineno"}, {"intent": "Raised to signal an error from the underlying SSL implementation (currently provided by the OpenSSL library).", "snippet": "ssl.SSLError"}, {"intent": "Mark the breakpoint as disabled .", "snippet": "breakpoint.disable()"}, {"intent": "Connect to a remote socket at `address` .", "snippet": "socket.connect(address)"}, {"intent": "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.", "snippet": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"}, {"intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)"}, {"intent": "Convert binhex4 formatted ASCII data to binary , without doing RLE-decompression . The `string` should contain a complete number of binary bytes , or ( in case of the last portion of the binhex4 data ) have the remaining bits zero .", "snippet": "binascii.a2b_hqx(string)"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "snippet": "compileall.compile_dir(dir, optimize=-1)"}, {"intent": "Updates the virtual screen after changes in the panel stack .", "snippet": "curses.panel.update_panels()"}, {"intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "snippet": "gnu_translations.ngettext(singular, plural, n)"}, {"intent": "Traces of all memory blocks allocated by Python: sequence of Trace instances.", "snippet": "snapshot.traces"}, {"intent": "The minimum number of bytes which can be written without blocking to a pipe when the pipe has been reported as ready for writing by select(), poll() or another interface in this module.", "snippet": "select.PIPE_BUF"}, {"intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "snippet": "turtle.textinput(title, prompt)"}, {"intent": "Close the Process object , releasing all resources associated with it .", "snippet": "process.close()"}, {"intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "snippet": "curses.init_pair(pair_number, fg, bg)"}, {"intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "snippet": "os.RTLD_LAZY"}, {"intent": "High priority read/write.", "snippet": "os.RWF_HIPRI"}, {"intent": "Return a tuple containing names of locals in this function .", "snippet": "function.get_locals()"}, {"intent": "Capture an exception for later rendering . With arguments `exc`.", "snippet": "traceback_exception.from_exception(exc)"}, {"intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "snippet": "SSLSocket.verify_client_post_handshake()"}, {"intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "snippet": "importlib.util.spec_from_file_location(name, location, loader=None)"}, {"intent": "Do not dump the file.", "snippet": "stat.UF_NODUMP"}, {"intent": "where With arguments `parser`, `title`.", "snippet": "optparse.OptionGroup(parser, title)"}, {"intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "snippet": "io.DEFAULT_BUFFER_SIZE"}, {"intent": "The socket object on which the server will listen for incoming requests.", "snippet": "base_server.socket"}, {"intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "snippet": "set(iterable)"}, {"intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "snippet": "maildir_message.set_date(date)"}, {"intent": "Files which are in both a and b, but could not be compared.", "snippet": "dircmp.funny_files"}, {"intent": "Stop playing all instances of the specified sound.", "snippet": "winsound.SND_PURGE"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "snippet": "unittest.main(defaultTest=None)"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "snippet": "io.FileIO(name, opener=None)"}, {"intent": "Create an instance of the FileInput class . With arguments `inplace`.", "snippet": "fileinput.input(inplace=False)"}, {"intent": "Checks for any printable ASCII character which is not a space or an alphanumeric character . With arguments `c`.", "snippet": "curses.ascii.ispunct(c)"}, {"intent": "A legacy method for loading a module . With arguments `fullname`.", "snippet": "loader.load_module(fullname)"}, {"intent": "Decorator for invoking check_impl_detail ( ) on guards . With arguments `**guards`.", "snippet": "@test.support.impl_detail(**guards)"}, {"intent": "A type that can register with SyncManager.", "snippet": "multiprocessing.managers.Namespace"}, {"intent": "Return an iterator `object` . If the second argument , `sentinel` , is given , then object must be a callable object .", "snippet": "iter(object, sentinel)"}, {"intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "snippet": "Unpacker.unpack_list(unpack_item)"}, {"intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "snippet": "http.cookies.BaseCookie()"}, {"intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "snippet": "Node.unlink()"}, {"intent": "Replace the `message` corresponding to `key` with message .", "snippet": "mailbox.__setitem__(key, message)"}, {"intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "snippet": "style.theme_create(themename, parent=None)"}, {"intent": "Special type indicating an unconstrained type.", "snippet": "typing.Any"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "snippet": "fileinput.FileInput(files=None, inplace=False)"}, {"intent": "Equivalent to not key in d.", "snippet": "key not in d"}, {"intent": "Sets the callable `application` as the WSGI application that will receive requests .", "snippet": "wsgi_server.set_app(application)"}, {"intent": "Send the string `message` to the system logger .", "snippet": "syslog.syslog(message)"}, {"intent": "Force processing of all buffered data as if it were followed by an end-of-file mark .", "snippet": "HTMLParser.close()"}, {"intent": "Called when the `test` case test succeeds .", "snippet": "test_result.addSuccess(test)"}, {"intent": "PKZIP version needed to extract archive.", "snippet": "ZipInfo.extract_version"}, {"intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "snippet": "statistics.mean(data)"}, {"intent": "Create an instance of the FileInput class . With arguments `files`.", "snippet": "fileinput.input(files=None)"}, {"intent": "Stop the subprocess .", "snippet": "SubprocessTransport.terminate()"}, {"intent": "Get a list of enabled ciphers .", "snippet": "SSLContext.get_ciphers()"}, {"intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "snippet": "inspect.getattr_static(obj, attr, default=None)"}, {"intent": "Called when the child process has exited .", "snippet": "SubprocessProtocol.process_exited()"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "snippet": "gettext.translation(domain, class_=None)"}, {"intent": "Return a list of namespaces bound to this name .", "snippet": "symbol.get_namespaces()"}, {"intent": "Sets the character `encoding` of this InputSource .", "snippet": "InputSource.setEncoding(encoding)"}, {"intent": "Remove element `elem` from the set .", "snippet": "set.remove(elem)"}, {"intent": "Invalid argument", "snippet": "errno.EINVAL"}, {"intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "snippet": "nis.cat(mapname, domain=default_domain)"}, {"intent": "Sender address refused.", "snippet": "smtplib.SMTPSenderRefused"}, {"intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "snippet": "logging.config.listen()"}, {"intent": "The time and date of the last modification to the archive member.", "snippet": "ZipInfo.date_time"}, {"intent": "Return a list of all Thread objects currently alive .", "snippet": "threading.enumerate()"}, {"intent": "Print the version message for the current program ( self.version ) to `file` ( default stdout ) .", "snippet": "OptionParser.print_version()"}, {"intent": "Read a plist `data` from a bytes object .", "snippet": "plistlib.readPlistFromBytes(data)"}, {"intent": "Return true if all characters in the string are alphabetic and there is at least one character , false otherwise .", "snippet": "str.isalpha()"}, {"intent": "Copy `infile` to `outfile` through the pipe .", "snippet": "Template.copy(infile, outfile)"}, {"intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "snippet": "pdb.pm()"}, {"intent": "Returns the file selection dialog that may be shared among different calls from this application . An optional `dlgclass` parameter can be passed as a string to specified what type of file selection dialog widget is desired .", "snippet": "tixCommand.tix_filedialog(dlgclass)"}, {"intent": "Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "snippet": "ssl.OP_CIPHER_SERVER_PREFERENCE"}, {"intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "snippet": "base64.urlsafe_b64encode(s)"}, {"intent": "Return a representation of the message corresponding to `key` and delete the message .", "snippet": "mailbox.pop(key)"}, {"intent": "Create a shared threading.BoundedSemaphore object and return a proxy for it .", "snippet": "sync_manager.BoundedSemaphore()"}, {"intent": "This class provides methods to read , parse and answer questions about the robots.txt file at `url` .", "snippet": "urllib.robotparser.RobotFileParser()"}, {"intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "snippet": "deque.index(x, start, stop)"}, {"intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "snippet": "email.utils.mktime_tz(tuple)"}, {"intent": "An abstract base class which inherits from InspectLoader that, when implemented, helps a module to be executed as a script.", "snippet": "importlib.abc.ExecutionLoader"}, {"intent": "Print ( to sys.stdout ) a comparison between a and b .", "snippet": "dircmp.report()"}, {"intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "snippet": "memoryview.__eq__(exporter)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "snippet": "doctest.DocTestSuite(globs=None)"}, {"intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "snippet": "compileall.compile_file(fullname, legacy=False)"}, {"intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "snippet": "shutil.copyfile(src, dst, follow_symlinks=True)"}, {"intent": "File exists", "snippet": "errno.EEXIST"}, {"intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "snippet": "difflib.restore(sequence, which)"}, {"intent": "The document attempted to remove the namespace declaration associated with a prefix.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"}, {"intent": "Emit a short attention sound .", "snippet": "curses.beep()"}, {"intent": "Return True if string starts with the `prefix` , otherwise return False .", "snippet": "str.startswith(prefix)"}, {"intent": "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.", "snippet": "symbol.sym_name"}, {"intent": "Returns an unused port that should be suitable for binding .", "snippet": "test.support.find_unused_port()"}, {"intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "snippet": "DatagramProtocol.error_received(exc)"}, {"intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "snippet": "bdb.effective(file, line, frame)"}, {"intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "snippet": "loop.run_in_executor(executor, func, *args)"}, {"intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object .", "snippet": "wave.open(file)"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes .", "snippet": "gettext.find(domain)"}, {"intent": "The default implementation used by ConfigParser.", "snippet": "configparser.BasicInterpolation"}, {"intent": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.", "snippet": "ssl.VERIFY_X509_STRICT"}, {"intent": "Return a named tuple representation of the number : DecimalTuple ( sign , digits , exponent ) .", "snippet": "decimal.as_tuple()"}, {"intent": "Base class for all other exceptions from this module.", "snippet": "subprocess.SubprocessError"}, {"intent": "Files which are in both a and b, whose contents differ according to the class\u2019s file comparison operator.", "snippet": "dircmp.diff_files"}, {"intent": "Don\u2019t allow sites to set two-component domains with country-code top-level domains like .co.uk, .gov.uk, .co.nz.etc.", "snippet": "DefaultCookiePolicy.strict_domain"}, {"intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) .", "snippet": "shutil.rmtree(path)"}, {"intent": "Return the turtle \u2019 s current heading ( value depends on the turtle mode , see mode ( ) ) .", "snippet": "turtle.heading()"}, {"intent": "assert the mock has been called with the specified `calls` .", "snippet": "mock.assert_has_calls(calls)"}, {"intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "snippet": "codecs.BOM"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `force` is true , modules are re-compiled even if the timestamps are up to date .", "snippet": "compileall.compile_dir(dir, force=False)"}, {"intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)"}, {"intent": "Returns a named tuple with paths to OpenSSL \u2019 s default cafile and capath .", "snippet": "ssl.get_default_verify_paths()"}, {"intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "snippet": "re.sub(pattern, repl, string, count=0)"}, {"intent": "Sends the `signal` signal to the child process .", "snippet": "process.send_signal(signal)"}, {"intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "snippet": "pty.spawn(argv)"}, {"intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "snippet": "BaseCookie.load(rawdata)"}, {"intent": "Test that `expr` is true ( or false ) .", "snippet": "test_case.assertTrue(expr)"}, {"intent": "Get statistics about quantities of loaded X.509 certificates , count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary .", "snippet": "SSLContext.cert_store_stats()"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "snippet": "SSLContext.wrap_socket(sock)"}, {"intent": "Represents the C char * datatype when it points to a zero-terminated string.", "snippet": "ctypes.c_char_p"}, {"intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "snippet": "random.gammavariate(alpha, beta)"}, {"intent": "Add a TestCase or TestSuite to the suite . With arguments `test`.", "snippet": "test_suite.addTest(test)"}, {"intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "snippet": "math.pi"}, {"intent": "A CDATA marked section was not closed.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"}, {"intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "snippet": "IMAP4.authenticate(mechanism, authobject)"}, {"intent": "The version number of the run-time SQLite library, as a string.", "snippet": "sqlite3.sqlite_version"}, {"intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "snippet": "cab.append(full, file, logical)"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "snippet": "base64.a85encode(b, wrapcol=0)"}, {"intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "snippet": "timedelta.max"}, {"intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "snippet": "connection.execute(sql, parameters)"}, {"intent": "An integer, the highest protocol version available.", "snippet": "pickle.HIGHEST_PROTOCOL"}, {"intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "snippet": "subprocess.check_call(args, stdin=None, stdout=None)"}, {"intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "snippet": "gc.get_referents(*objs)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, format=FORMAT_XZ)"}, {"intent": "Suitable for serializing headers with for use in HTTP traffic.", "snippet": "email.policy.HTTP"}, {"intent": "The header to issue if the help output has a section for documented commands.", "snippet": "Cmd.doc_header"}, {"intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "snippet": "shutil.copyfileobj(fsrc, fdst)"}, {"intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "snippet": "asyncio.ProactorEventLoop"}, {"intent": "Search for a module specified by `fullname` .", "snippet": "zipimporter.find_module(fullname)"}, {"intent": "Generic element structure builder .", "snippet": "xml.etree.ElementTree.TreeBuilder()"}, {"intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`.", "snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info)"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "snippet": "doctest.testmod()"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "snippet": "gettext.install(domain)"}, {"intent": "Delete the `folder` whose name is folder .", "snippet": "maildir.remove_folder(folder)"}, {"intent": "Reduces `x` to its simplest form .", "snippet": "context.normalize(x)"}, {"intent": "A base transport for write-only connections . With arguments `BaseTransport`.", "snippet": "asyncio.WriteTransport(BaseTransport)"}, {"intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "snippet": "uuid.uuid1(node=None)"}, {"intent": "Print the stack or traceback for this Task .", "snippet": "task.print_stack()"}, {"intent": "Extensible JSON encoder for Python data structures .", "snippet": "json.JSONEncoder()"}, {"intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "snippet": "headers.get_all(name)"}, {"intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, spec=None, create=False)"}, {"intent": "Selects SSL version 3 as the channel encryption protocol.", "snippet": "ssl.PROTOCOL_SSLv3"}, {"intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "snippet": "max(arg1, arg2, *args)"}, {"intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "snippet": "itertools.product(*iterables, repeat=1)"}, {"intent": "Open the file pointed to by the path , like the built-in open ( ) function does :", "snippet": "Path.open()"}, {"intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "snippet": "os.waitpid(pid, options)"}, {"intent": "Return true if all bytes in the sequence are ASCII whitespace and the sequence is not empty , false otherwise .", "snippet": "bytes.isspace()"}, {"intent": "Delete stamp with given `stampid` .", "snippet": "turtle.clearstamp(stampid)"}, {"intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "snippet": "resource.RLIMIT_RTTIME"}, {"intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string .", "snippet": "Decompress.decompress(data)"}, {"intent": "Set the number of frames . With arguments `n`.", "snippet": "AU_write.setnframes(n)"}, {"intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "snippet": "range(start, stop)"}, {"intent": "An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "snippet": "os.altsep"}, {"intent": "This exception is raised to skip a test . With arguments `reason`.", "snippet": "unittest.SkipTest(reason)"}, {"intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "snippet": "os.POSIX_FADV_NORMAL"}, {"intent": "Create a symbolic link pointing to `src` named `dst` . With arguments `dir_fd`.", "snippet": "os.symlink(src, dst, dir_fd=None)"}, {"intent": "Exception raised when something can\u2019t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.", "snippet": "binhex.Error"}, {"intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "snippet": "winsound.SND_MEMORY"}, {"intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "snippet": "Path.symlink_to(target, target_is_directory=False)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "snippet": "TarFile.extract(member, set_attrs=True)"}, {"intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "snippet": "collections.abc.AsyncGenerator"}, {"intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . `rest` means the same thing as in the transfercmd ( ) method .", "snippet": "FTP.storbinary(cmd, fp, rest=None)"}, {"intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "snippet": "shelve.BsdDbShelf(dict)"}, {"intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "snippet": "os.getpriority(which, who)"}, {"intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "snippet": "ArgumentParser.exit()"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())"}, {"intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "snippet": "Popen.wait(timeout=None)"}, {"intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)"}, {"intent": "Between 1 and 12 inclusive.", "snippet": "date.month"}, {"intent": "This exception is raised when a string parameter contains a character that is not permitted in the context it\u2019s being used in by the XML 1.0 recommendation.", "snippet": "xml.dom.InvalidCharacterErr"}, {"intent": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "snippet": "ssl.SSLSyscallError"}, {"intent": "The path to the bytecode file.", "snippet": "sourceless_file_loader.path"}, {"intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent .", "snippet": "BaseCookie.js_output()"}, {"intent": "Return True if the server is accepting new connections .", "snippet": "server.is_serving()"}, {"intent": "Inform the formatter that data has been added to the current paragraph out-of-band .", "snippet": "formatter.assert_line_data()"}, {"intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "snippet": "os.F_OK"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`.", "snippet": "ctypes.CDLL(name)"}, {"intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "snippet": "FieldStorage.getfirst(name, default=None)"}, {"intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "snippet": "traceback.format(limit=None)"}, {"intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "snippet": "dbm.whichdb(filename)"}, {"intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "snippet": "differ.compare(a, b)"}, {"intent": "Change or query the current global `domain` .", "snippet": "gettext.textdomain()"}, {"intent": "Owner has read permission.", "snippet": "stat.S_IRUSR"}, {"intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "snippet": "open(file, closefd=True)"}, {"intent": "A variant of Queue that retrieves most recently added entries first (last in, first out).", "snippet": "asyncio.LifoQueue"}, {"intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "snippet": "shake.digest(length)"}, {"intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "snippet": "unittest.registerResult(result)"}, {"intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "snippet": "cursor.execute(sql, parameters)"}, {"intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "snippet": "HTMLParser.handle_decl(decl)"}, {"intent": "Exception raised when the put_nowait() method is called on a queue that has reached its maxsize.", "snippet": "asyncio.QueueFull"}, {"intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "snippet": "prototype(vtbl_index, name)"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver()"}, {"intent": "Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open().", "snippet": "typing.IO"}, {"intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "snippet": "window.attron(attr)"}, {"intent": "This content manager provides only a minimum interface beyond that provided by Message itself:  it deals only with text, raw byte strings, and Message objects.", "snippet": "email.contentmanager.raw_data_manager"}, {"intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "snippet": "int.to_bytes(length, byteorder)"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . With arguments `col_info`.", "snippet": "parser.st2list(st, col_info=False)"}, {"intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "snippet": "socket.create_connection(address)"}, {"intent": "Handle an XML-RPC request .", "snippet": "CGIXMLRPCRequestHandler.handle_request()"}, {"intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "snippet": "test.support.set_memlimit(limit)"}, {"intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds` With arguments `bases`.", "snippet": "types.prepare_class(name, bases=(), kwds=None)"}, {"intent": "Specifies an email.message.Message-like class to parse HTTP headers.", "snippet": "base_http_request_handler.MessageClass"}, {"intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "snippet": "fnmatch.fnmatchcase(filename, pattern)"}, {"intent": "Set the `key` , `value` and `coded_value` attributes .", "snippet": "Morsel.set(key, value, coded_value)"}, {"intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "snippet": "stream_writer.writelines(list)"}, {"intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "snippet": "POP3.rpop(user)"}, {"intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "snippet": "test_case.subTest(**params)"}, {"intent": "Size of the compressed data.", "snippet": "ZipInfo.compress_size"}, {"intent": "Bootstraps pip into the current or designated environment .", "snippet": "ensurepip.bootstrap()"}, {"intent": "Clear traces of memory blocks allocated by Python .", "snippet": "tracemalloc.clear_traces()"}, {"intent": "The concatenation of the drive and root:", "snippet": "PurePath.anchor"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, name_of_module=None)"}, {"intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "snippet": "winreg.HKEY_CLASSES_ROOT"}, {"intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "snippet": "base64.b32decode(s, casefold=False, map01=None)"}, {"intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "snippet": "csv.unix_dialect"}, {"intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "snippet": "profile.run(command)"}, {"intent": "Read one line from the input stream and return the decoded data .", "snippet": "stream_reader.readline()"}, {"intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "snippet": "output_checker.output_difference(example, got, optionflags)"}, {"intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "snippet": "os.defpath"}, {"intent": "Specifies a format string that should be used by send_error() method for building an error response to the client.", "snippet": "base_http_request_handler.error_message_format"}, {"intent": "Create a compressor object , which can be used to compress data incrementally .", "snippet": "lzma.LZMACompressor()"}, {"intent": "For common and simple use cases , no other functionality is required .", "snippet": "dataclasses.field()"}, {"intent": "Returns an instance of the Filter class . If `name` is specified , it names a logger which , together with its children , will have its events allowed through the filter .", "snippet": "logging.Filter(name='')"}, {"intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "snippet": "turtle.forward(distance)"}, {"intent": "Base class for warnings about dubious runtime behavior.", "snippet": "RuntimeWarning"}, {"intent": "Returns True if `x` is negative ; otherwise returns False .", "snippet": "context.is_signed(x)"}, {"intent": "Return the tangent of `x` .", "snippet": "cmath.tan(x)"}, {"intent": "Register a `defect` on `obj` .", "snippet": "policy.register_defect(obj, defect)"}, {"intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE .", "snippet": "SSLContext.load_verify_locations()"}, {"intent": "Pop the last `n` style specifications passed to push_style ( ) .", "snippet": "formatter.pop_style()"}, {"intent": "An event object . With arguments `loop`.", "snippet": "asyncio.Event(loop=None)"}, {"intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "snippet": "list.sort(key=None, reverse=False)"}, {"intent": "Feed the given bytes `data` to the parser .", "snippet": "xml_pull_parser.feed(data)"}, {"intent": "Method called when an empty line is entered in response to the prompt .", "snippet": "Cmd.emptyline()"}, {"intent": "Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI.", "snippet": "DefaultCookiePolicy.strict_ns_set_path"}, {"intent": "Signals the division of a non-infinite number by zero.", "snippet": "decimal.DivisionByZero"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable .", "snippet": "unittest.main()"}, {"intent": "Return a list of the names of all user-defined labels used in the mailbox .", "snippet": "babyl.get_labels()"}, {"intent": "Closely emulate the interactive Python console .", "snippet": "InteractiveConsole.interact()"}, {"intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "snippet": "async_chat.push(data)"}, {"intent": "Get a character . With arguments `y`.", "snippet": "window.getch(y)"}, {"intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "snippet": "cursor.arraysize"}, {"intent": "Return True if the transport is closing or is closed .", "snippet": "BaseTransport.is_closing()"}, {"intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "snippet": "CookieJar.set_cookie(cookie)"}, {"intent": "Characters that will be considered string quotes.", "snippet": "shlex.quotes"}, {"intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "snippet": "winreg.HKEY_USERS"}, {"intent": "Clear ( unset ) the event .", "snippet": "event.clear()"}, {"intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "snippet": "test.support.temp_cwd(quiet=False)"}, {"intent": "The type of asynchronous generator-iterator objects, created by asynchronous generator functions.", "snippet": "types.AsyncGeneratorType"}, {"intent": "Disable all renegotiation in TLSv1.2 and earlier.", "snippet": "ssl.OP_NO_RENEGOTIATION"}, {"intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "snippet": "subprocess.PIPE"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)"}, {"intent": "Nonzero if a DST timezone is defined.", "snippet": "time.daylight"}, {"intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)"}, {"intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executescript ( ) method with the given `sql_script` , and returns the cursor .", "snippet": "connection.executescript(sql_script)"}, {"intent": "Returns the current value of the ctypes-private copy of the system errno variable in the calling thread .", "snippet": "ctypes.get_errno()"}, {"intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "snippet": "wsgiref.util.request_uri(environ, include_query=True)"}, {"intent": "User ID of the user who originally stored this member.", "snippet": "TarInfo.uid"}, {"intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "snippet": "Document.createProcessingInstruction(target, data)"}, {"intent": "Timer expired", "snippet": "errno.ETIME"}, {"intent": "Return the build time API version of Android as an integer .", "snippet": "sys.getandroidapilevel()"}, {"intent": "Like erase ( ) , but also cause the whole window to be repainted upon next call to refresh ( ) .", "snippet": "window.clear()"}, {"intent": "Get the traceback where the Python object `obj` was allocated .", "snippet": "tracemalloc.get_object_traceback(obj)"}, {"intent": "Return a string representation of the path with forward slashes ( / ) :", "snippet": "PurePath.as_posix()"}, {"intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "snippet": "sndhdr.what(filename)"}, {"intent": "Dump the class data as a string in the format of a netrc file .", "snippet": "netrc.__repr__()"}, {"intent": "A first in , first out ( FIFO ) queue .", "snippet": "asyncio.Queue()"}, {"intent": "Get a wide character . With arguments `y`.", "snippet": "window.get_wch(y)"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `module_relative` specifies how the filename should be interpreted :", "snippet": "doctest.testfile(filename, module_relative=True)"}, {"intent": "The response of the server if available, as a str object.", "snippet": "nntp_ssl.response"}, {"intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "snippet": "ensurepip.bootstrap(root=None)"}, {"intent": "Read up to `n` bytes from the memory buffer .", "snippet": "memory_bio.read()"}, {"intent": "Return the number of items in the dictionary `d` .", "snippet": "len(d)"}, {"intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "snippet": "email_message.make_related()"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "snippet": "difflib.ndiff(a, b)"}, {"intent": "The defects attribute contains a list of all the problems found when parsing this message.", "snippet": "message.defects"}, {"intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed .", "snippet": "CookieJar.clear(domain)"}, {"intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object . Passing the optional `timeout` parameter will set the timeout on the socket instance before attempting to connect .", "snippet": "socket.create_connection(address, timeout)"}, {"intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "snippet": "json_encoder.default(o)"}, {"intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "snippet": "FTP.set_pasv(val)"}, {"intent": "Return True if name binding introduces new namespace .", "snippet": "symbol.is_namespace()"}, {"intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "snippet": "sysconfig.is_python_build()"}, {"intent": "Reverse the order of the items in the array .", "snippet": "array.reverse()"}, {"intent": "Numerical underflow with result rounded to zero.", "snippet": "decimal.Underflow"}, {"intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "snippet": "loop.create_server(protocol_factory, ssl=None)"}, {"intent": "Remove this directory .", "snippet": "Path.rmdir()"}, {"intent": "Selects the highest protocol version that both the client and server support.", "snippet": "ssl.PROTOCOL_TLS"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, sort_keys=False)"}, {"intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "snippet": "iter(d)"}, {"intent": "Depending upon the host platform , it may not be possible to modify or remove the underlying message while the returned file remains open . With arguments `key`.", "snippet": "maildir.get_file(key)"}, {"intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "snippet": "ast.iter_child_nodes(node)"}, {"intent": "Return bytes from the stream without advancing the position .", "snippet": "buffered_reader.peek()"}, {"intent": "Receive notification of ignorable `whitespace` in element content .", "snippet": "ContentHandler.ignorableWhitespace(whitespace)"}, {"intent": "( Only supported on Solaris and derivatives . )", "snippet": "select.devpoll()"}, {"intent": "Return a list of all valid maps .", "snippet": "nis.maps()"}, {"intent": "Return a list of all variables in the context object .", "snippet": "context.keys()"}, {"intent": "Mark the test as an expected failure.", "snippet": "@unittest.expectedFailure"}, {"intent": "Structure needs cleaning", "snippet": "errno.EUCLEAN"}, {"intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "snippet": "datetime.__str__()"}, {"intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `bg`.", "snippet": "turtle.screensize(bg=None)"}, {"intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "snippet": "message.set_type(type, header='Content-Type', requote=True)"}, {"intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "snippet": "isinstance(object, classinfo)"}, {"intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "snippet": "TarFile.list(members=None)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "snippet": "timeit.timeit(timer=<default timer>)"}, {"intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "snippet": "Widget.tk.createfilehandler(file, mask, func)"}, {"intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "snippet": "filecmp.cmp(f1, f2, shallow=True)"}, {"intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "snippet": "stream_reader.read(size)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "snippet": "os.execve(path, args, env)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "snippet": "compile(source, filename, mode)"}, {"intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "snippet": "datetime.timedelta(milliseconds=0)"}, {"intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "snippet": "curses.mouseinterval(interval)"}, {"intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "snippet": "webbrowser.register(name, constructor, preferred=False)"}, {"intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)"}, {"intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "snippet": "colorsys.hsv_to_rgb(h, s, v)"}, {"intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "snippet": "complex()"}, {"intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "snippet": "os.renames(old, new)"}, {"intent": "Return a Document that represents the `string` . With arguments `parser`.", "snippet": "xml.dom.minidom.parseString(string, parser=None)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "snippet": "pickletools.dis(pickle, out=None, indentlevel=4)"}, {"intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "snippet": "tuple(iterable)"}, {"intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "snippet": "concurrent.futures.wait(fs)"}, {"intent": "Delete any character at ( `y` , `x` ) .", "snippet": "window.delch(y)"}, {"intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "snippet": "OSError(errno, strerror, filename)"}, {"intent": "Returns `x` multiplied by `y` , plus `z` .", "snippet": "context.fma(x, y, z)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "snippet": "calendar.prcal(year, w=0)"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "snippet": "http.client.HTTPResponse(sock, url=None)"}, {"intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "snippet": "ArgumentParser.error(message)"}, {"intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "snippet": "Telnet.read_until(expected)"}, {"intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "snippet": "eval(expression)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, len=0)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "snippet": "xmlrpc.client.ServerProxy(uri)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "snippet": "test_case.assertAlmostEqual(first, second, places=7)"}, {"intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "snippet": "traceback_exception.from_exception(exc, lookup_lines=True)"}, {"intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "snippet": "doc_test_finder.find(obj, name, module)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "snippet": "mailcap.findmatch(caps)"}, {"intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "snippet": "base64.b64encode(s, altchars=None)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "snippet": "text_calendar.formatyear(theyear, w=2, m=3)"}, {"intent": "Integer value to control debugging output.", "snippet": "IMAP4.debug"}, {"intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "snippet": "os.wait3(options)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "gzip.open(filename, newline=None)"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)"}, {"intent": "Enable `capability` ( see RFC 5161 ) .", "snippet": "IMAP4.enable(capability)"}, {"intent": "Return True if `obj` is either of :", "snippet": "asyncio.isfuture(obj)"}, {"intent": "Return an iterator over the variables stored in the `context` object .", "snippet": "iter(context)"}, {"intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "snippet": "select.kevent(ident, udata=0)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "snippet": "platform.libc_ver(executable=sys.executable, lib='')"}, {"intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "snippet": "shutil.rmtree(path, onerror=None)"}, {"intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "snippet": "ctypes.byref(obj, offset)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "snippet": "message.set_param(param, value, replace=False)"}, {"intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "snippet": "pdb.set_trace(header=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)"}, {"intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "snippet": "str(encoding='utf-8', errors='strict')"}, {"intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "snippet": "bisect.bisect_left(a, x, hi=len(a))"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "snippet": "shelve.Shelf(dict, writeback=False)"}, {"intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "snippet": "vars()"}, {"intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "snippet": "slice(start, stop)"}, {"intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "snippet": "widget.set(item, value=None)"}, {"intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "snippet": "mmap.flush(offset, size)"}, {"intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "snippet": "ContentHandler.characters(content)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, w=2, c=6)"}, {"intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "snippet": "deque.index(x, start)"}, {"intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "snippet": "KeyboardInterrupt"}, {"intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "snippet": "glob.glob(pathname, recursive=False)"}, {"intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "snippet": "code.interact(banner=None, local=None)"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "snippet": "modulefinder.ModuleFinder(path=None, debug=0)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "snippet": "calendar.calendar(year, l=1, m=3)"}, {"intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "snippet": "Request.add_unredirected_header(key, header)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(suffix='', dir=None)"}, {"intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "snippet": "random.seed(a=None, version=2)"}, {"intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)"}, {"intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "snippet": "open(file, mode='r')"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "snippet": "cgitb.enable(display=1, context=5)"}, {"intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "snippet": "CookieJar.clear(domain, path)"}, {"intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "snippet": "FTP.mlsd(path=\"\")"}, {"intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)"}, {"intent": "Raised when a system function timed out at the system level.", "snippet": "TimeoutError"}, {"intent": "Seek to the specified frame number . With arguments `pos`.", "snippet": "aifc.setpos(pos)"}, {"intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "snippet": "socket.sendmsg_afalg(msg, op, iv)"}, {"intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')"}, {"intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "snippet": "test_case.addCleanup(function, *args, **kwargs)"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "snippet": "urllib.request.urlretrieve(url, filename=None, data=None)"}, {"intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "snippet": "multiprocessing.Queue(maxsize)"}, {"intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "snippet": "loop.create_server(protocol_factory, backlog=100)"}, {"intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "snippet": "chunk.read(size=-1)"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)"}, {"intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "snippet": "null_importer.find_module(fullname, path)"}, {"intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "snippet": "wsgiref.util.FileWrapper(filelike)"}, {"intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "snippet": "super()"}, {"intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "snippet": "min(iterable, key)"}, {"intent": "Write a `prompt` and read a line .", "snippet": "InteractiveConsole.raw_input(prompt=\"\")"}, {"intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "snippet": "callable(result, func, arguments)"}, {"intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "snippet": "queue_listener.__init__(level=NOTSET)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "snippet": "urllib.request.urlopen(url, data=None, context=None)"}, {"intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "snippet": "getattr(object, name, default)"}, {"intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "snippet": "message.set_type(type, requote=True)"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation)"}, {"intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "snippet": "element.find(match, namespaces=None)"}, {"intent": "Open `file` and return a corresponding file object .", "snippet": "open(file)"}, {"intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)"}, {"intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "snippet": "compileall.compile_path(skip_curdir=True, force=False)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "snippet": "test_case.assertAlmostEqual(first, second, delta=None)"}, {"intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "snippet": "abc_meta.register(subclass)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "snippet": "doctest.DocTestFinder(parser=DocTestParser())"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "snippet": "doctest.DocTestSuite(setUp=None)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "snippet": "bz2.open(filename, mode='r')"}, {"intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "snippet": "os.path.samefile(path1, path2)"}, {"intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "snippet": "email.charset.add_alias(alias, canonical)"}, {"intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "snippet": "logging.Formatter(fmt=None)"}, {"intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "snippet": "plistlib.dumps(value, sort_keys=True)"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "snippet": "bdb.Breakpoint(self, file, line, temporary=0)"}, {"intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "snippet": "control.event(event, argument, ordering=None)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "snippet": "bz2.open(filename, mode='r', compresslevel=9)"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "snippet": "shelve.open(filename, flag='c')"}, {"intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "snippet": "exit_stack.enter_context(cm)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "snippet": "os.execl(path, arg0, arg1)"}, {"intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "snippet": "open(file, encoding=None)"}, {"intent": "Returns the greeting string sent by the POP3 server .", "snippet": "POP3.getwelcome()"}, {"intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "snippet": "Pattern.sub(repl, string, count=0)"}, {"intent": "Returns current value of a given interval timer specified by `which` .", "snippet": "signal.getitimer(which)"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "snippet": "urllib.request.Request(url, data=None, headers={})"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "snippet": "http.client.HTTPConnection(host, timeout)"}, {"intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "snippet": "plistlib.loads(data, dict_type=dict)"}, {"intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "snippet": "Pattern.split(string, maxsplit=0)"}, {"intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "snippet": "IMAP4.store(message_set, command, flag_list)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "snippet": "window.border(ls, rs)"}, {"intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(host='', user='')"}, {"intent": "numeric argument to operation (if any), otherwise None", "snippet": "arg"}, {"intent": "All arguments are optional . With arguments `minute`.", "snippet": "datetime.time(minute=0)"}, {"intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "snippet": "sniffer.sniff(sample)"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "snippet": "os.walk(top, topdown=True)"}, {"intent": "Disassemble the `x` object .", "snippet": "dis.dis(x=None)"}, {"intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "snippet": "open(file, mode='r', encoding=None)"}, {"intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "snippet": "logging.FileHandler(filename, mode='a')"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "snippet": "asyncio.open_connection(ssl=None)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "snippet": "ZipFile.open(name, mode='r', pwd=None)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "snippet": "profile.Profile(builtins=True)"}, {"intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "snippet": "tixCommand.tix_getimage(self, name)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "snippet": "calendar.calendar(year, w=2, m=3)"}, {"intent": "Execute a `code` object .", "snippet": "InteractiveInterpreter.runcode(code)"}, {"intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "snippet": "base64.encodestring(s)"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs, create=False)"}, {"intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "snippet": "crypt.crypt(word, salt=None)"}, {"intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "snippet": "loop.set_task_factory(factory)"}, {"intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "snippet": "SSLContext.wrap_bio(incoming, outgoing)"}, {"intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addstr(str, attr)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display, level=1)"}, {"intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "snippet": "sync_manager.dict(mapping)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "snippet": "@dataclasses.dataclass(init=True, order=False)"}, {"intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "snippet": "email.contentmanager.get_content(msg, errors='replace')"}, {"intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "snippet": "bz2_decompressor.decompress(data, max_length=-1)"}, {"intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "snippet": "ensurepip.bootstrap(root=None, upgrade=False)"}, {"intent": "Remove the directory named `dirname` on the server .", "snippet": "FTP.rmd(dirname)"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "snippet": "shutil.copytree(src, dst, copy_function=copy2)"}, {"intent": "Push an input source stream onto the input stack . With arguments `newstream`, `newfile`.", "snippet": "shlex.push_source(newstream, newfile=None)"}, {"intent": "Test x for non-membership in s.", "snippet": "x not in s"}, {"intent": "Create an instance of the FileInput class . With arguments `backup`.", "snippet": "fileinput.input(backup='')"}, {"intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "snippet": "control.event(event, argument, condition=1)"}, {"intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "snippet": "os.waitid(idtype, id, options)"}, {"intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "snippet": "aifc.setcomptype(type, name)"}, {"intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "snippet": "time.ctime(secs)"}, {"intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "snippet": "os.seteuid(euid)"}, {"intent": "Set `pwd` as default password to extract encrypted files .", "snippet": "ZipFile.setpassword(pwd)"}, {"intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "snippet": "turtle.clearstamps(n=None)"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)"}, {"intent": "Compile the file with path `fullname` .", "snippet": "compileall.compile_file(fullname)"}, {"intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "snippet": "fraction.from_float(flt)"}, {"intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "snippet": "wsgiref.simple_server.make_server(host, port, app)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "snippet": "connection.backup(target, name=\"main\")"}, {"intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "snippet": "ArgumentParser.set_defaults(**kwargs)"}, {"intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "snippet": "content_manager.set_content(msg, obj, *args, **kw)"}, {"intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "snippet": "datetime.isoformat(sep='T')"}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(user='anonymous', passwd='')"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "snippet": "ArgumentParser.add_subparsers(title, description)"}, {"intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "snippet": "DatagramTransport.sendto(data, addr=None)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "snippet": "argparse.FileType(bufsize=-1, errors=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "snippet": "zlib.compressobj(level=-1)"}, {"intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "snippet": "os.umask(mask)"}, {"intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "snippet": "decimal.localcontext(ctx=None)"}, {"intent": "Return True if `func` is a coroutine function .", "snippet": "asyncio.iscoroutinefunction(func)"}, {"intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)"}, {"intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "snippet": "curses.setupterm(term=None, fd=-1)"}, {"intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "snippet": "SummaryInformation.GetProperty(field)"}, {"intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "snippet": "max(iterable, key, default)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, w=2, l=1)"}, {"intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "snippet": "open(file, mode='r', buffering=-1)"}, {"intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "snippet": "round(number)"}, {"intent": "Clear the internal type cache .", "snippet": "sys._clear_type_cache()"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "snippet": "compileall.compile_dir(dir, quiet=0)"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "snippet": "os.walk(top, followlinks=False)"}, {"intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "snippet": "window.chgat(y, x, attr)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "snippet": "calendar.prcal(year, w=0, c=6)"}, {"intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)"}, {"intent": "Add a `section` named section to the instance .", "snippet": "config_parser.add_section(section)"}, {"intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "snippet": "bytes.maketrans(from, to)"}, {"intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)"}, {"intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "snippet": "SSLSocket.read(len=1024)"}, {"intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "snippet": "io.BufferedReader(raw)"}, {"intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "snippet": "dispatcher.handle_accepted(sock, addr)"}, {"intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "snippet": "dis.show_code(x, file=None)"}, {"intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "snippet": "platform.system_alias(system, release, version)"}, {"intent": "Install a timer that calls `fun` after `t` milliseconds .", "snippet": "turtle.ontimer(fun, t=0)"}, {"intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "snippet": "config_parser.read_file(f, source=None)"}, {"intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "snippet": "asyncore.loop(timeout)"}, {"intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "snippet": "test_case.run(result=None)"}, {"intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "snippet": "SSLSocket.read(len=1024, buffer=None)"}, {"intent": "Create an object to `trace` execution of a single statement or expression .", "snippet": "trace.Trace(trace=1)"}, {"intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "snippet": "ArgumentParser.add_argument_group(title=None)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, l=1)"}, {"intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "snippet": "xml.etree.ElementTree.XMLParser(html=0)"}, {"intent": "Create a new ArgumentParser object . With arguments `epilog`.", "snippet": "argparse.ArgumentParser(epilog=None)"}, {"intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "snippet": "socket.socketpair(family)"}, {"intent": "Return a str version of `object` . With arguments `encoding`.", "snippet": "str(encoding='utf-8')"}, {"intent": "Encodes `obj` using the codec registered for `encoding` .", "snippet": "codecs.encode(obj, encoding='utf-8')"}, {"intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "snippet": "executor.submit(fn, *args, **kwargs)"}, {"intent": "This function takes an input `source` and an optional `base` URL and returns a fully resolved InputSource object ready for reading .", "snippet": "xml.sax.saxutils.prepare_input_source(source, base='')"}, {"intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "snippet": "control.mapping(event, attribute)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)"}, {"intent": "Set the main `type` and subtype for the Content-Type `header` .", "snippet": "message.set_type(type, header='Content-Type')"}, {"intent": "Add a `director` as parent .", "snippet": "BaseHandler.add_parent(director)"}, {"intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "snippet": "ArgumentParser.exit(status=0)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "snippet": "calendar.prcal(year, w=0, l=0)"}, {"intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "snippet": "ossaudiodev.open(mode)"}, {"intent": "These methods immediately delete the message . With arguments `key`.", "snippet": "mh.__delitem__(key)"}, {"intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "snippet": "chain_map.new_child(m=None)"}, {"intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "snippet": "window.hline(y, x, ch, n)"}, {"intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "snippet": "code.InteractiveConsole(filename=\"<console>\")"}, {"intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "snippet": "input()"}, {"intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "snippet": "CookiePolicy.path_return_ok(path, request)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)"}, {"intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "snippet": "pprint.PrettyPrinter(indent=1, width=80)"}, {"intent": "If a formatter is specified , it is used to format the `record` .", "snippet": "stream_handler.emit(record)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "snippet": "connection.backup(target, sleep=0.250)"}, {"intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)"}, {"intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')"}, {"intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "snippet": "collections.OrderedDict(items)"}, {"intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "snippet": "@functools.lru_cache(maxsize=128)"}, {"intent": "Return a str version of `object` .", "snippet": "str()"}, {"intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "snippet": "incremental_encoder.encode(object, final)"}, {"intent": "Return a new set object , optionally with elements taken from `iterable` .", "snippet": "set()"}, {"intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "snippet": "code.compile_command(source, filename=\"<input>\")"}, {"intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "snippet": "os.get_exec_path(env=None)"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')"}, {"intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "snippet": "config_parser.readfp(fp, filename=None)"}, {"intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "snippet": "winsound.PlaySound(sound, flags)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)"}, {"intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "snippet": "json.JSONDecodeError(msg, doc, pos)"}, {"intent": "Returns the logarithm of `x` to the given `base` .", "snippet": "cmath.log(x, base)"}, {"intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "snippet": "aifc.setmark(id, pos, name)"}, {"intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "snippet": "ssl.get_server_certificate(addr)"}, {"intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "snippet": "mmap.find(sub)"}, {"intent": "If `selop` is not specified , returns selected `items` .", "snippet": "widget.selection(items=None)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "snippet": "urllib.request.urlopen(url, data=None)"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "snippet": "directory.start_component(uuid=None)"}, {"intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "snippet": "compileall.compile_path(quiet=0)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "snippet": "pickletools.dis(pickle, out=None)"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver(version='')"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "snippet": "date.replace(day=self.day)"}, {"intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)"}, {"intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "snippet": "os.spawnlp(mode, file)"}, {"intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)"}, {"intent": "Run the command described by `args` . With arguments `cwd`.", "snippet": "subprocess.run(args, cwd=None)"}, {"intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "snippet": "msvcrt.setmode(fd, flags)"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "snippet": "asyncio.open_connection(family=0)"}, {"intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "snippet": "loop.connect_read_pipe(protocol_factory, pipe)"}, {"intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "snippet": "struct.unpack_from(format, buffer, offset=0)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "snippet": "tarfile.TarFile(tarinfo=TarInfo)"}, {"intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "snippet": "widget.set(item, column=None, value=None)"}, {"intent": "Return a new set object , optionally with elements taken from `iterable` .", "snippet": "set(iterable)"}, {"intent": "Return the absolute value of a number . With arguments `x`.", "snippet": "abs(x)"}, {"intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "snippet": "operator.methodcaller(name, args...)"}, {"intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "snippet": "mmap.write_byte(byte)"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "snippet": "cgitb.enable(display=1, format=\"html\")"}, {"intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "snippet": "test_result.addError(test, err)"}, {"intent": "Create new `mailbox` named mailbox .", "snippet": "IMAP4.create(mailbox)"}, {"intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "snippet": "fraction.from_decimal(dec)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)"}, {"intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "snippet": "operator.length_hint(obj, default=0)"}, {"intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "snippet": "OSError()"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "snippet": "cgitb.enable(context=5)"}, {"intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "snippet": "collections.UserString(seq)"}, {"intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "snippet": "FTP.nlst(argument)"}, {"intent": "Opens socket to `port` at `host` .", "snippet": "IMAP4.open(host, port)"}, {"intent": "Return the number of the color-pair set by the attribute value `attr` .", "snippet": "curses.pair_number(attr)"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "snippet": "cmd.Cmd(stdin=None, stdout=None)"}, {"intent": "This exception is raised by the sys.exit() function.", "snippet": "SystemExit"}, {"intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "snippet": "pprint.PrettyPrinter(width=80)"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "snippet": "unittest.main(argv=None)"}, {"intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "snippet": "fcntl.fcntl(fd, cmd, arg=0)"}, {"intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "snippet": "pyclbr.readmodule(module, path=None)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "snippet": "ArgumentParser.add_subparsers(title)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "snippet": "compile(source, filename, mode, flags=0)"}, {"intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "snippet": "async_chat.set_terminator(term)"}, {"intent": "IMAP4 server errors cause this exception to be raised.", "snippet": "IMAP4.abort"}, {"intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "snippet": "range(start, stop, step)"}, {"intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "snippet": "logging.handlers.QueueListener(queue, *handlers)"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "snippet": "header.encode(\\t')"}, {"intent": "Return the stateth completion for `text` . With arguments `state`.", "snippet": "Completer.complete(text, state)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "snippet": "timeit.timeit(globals=None)"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.open(filename, format=None)"}, {"intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "snippet": "Cookie.is_expired(now=None)"}, {"intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "snippet": "int(x)"}, {"intent": "Return `n` independent iterators from a single `iterable` .", "snippet": "itertools.tee(iterable, n=2)"}, {"intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "snippet": "bdb.dispatch_call(frame, arg)"}, {"intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(passwd='')"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "snippet": "subprocess.Popen(args, close_fds=True)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)"}, {"intent": "Return a new set with elements from the set and all others . With arguments `*others`.", "snippet": "set.union(*others)"}, {"intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)"}, {"intent": "Return True if the underlying mapping has a key key, else False.", "snippet": "key in proxy"}, {"intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "snippet": "executor.shutdown(wait=True)"}, {"intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "snippet": "os.set_blocking(fd, blocking)"}, {"intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "snippet": "dis.dis(x=None, file=None, depth=None)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)"}, {"intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "snippet": "difflib.SequenceMatcher(a='')"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "snippet": "urllib.request.urlretrieve(url, filename=None)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "snippet": "timeit.timeit(stmt='pass', globals=None)"}, {"intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "snippet": "subprocess.call(args, stdin=None, shell=False)"}, {"intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "snippet": "shutil.ignore_patterns(*patterns)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "snippet": "urllib.request.urlopen(url, timeout)"}, {"intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "snippet": "config_parser.readfp(fp)"}, {"intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "snippet": "typing.MutableMapping(MappingKT, VT)"}, {"intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "snippet": "message.set_default_type(ctype)"}, {"intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "snippet": "base_http_request_handler.send_header(keyword, value)"}, {"intent": "The Tk class is instantiated without arguments . With arguments `className`.", "snippet": "tkinter.Tk(className='Tk')"}, {"intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "snippet": "traceback.print_stack(f=None, file=None)"}, {"intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "snippet": "zipapp.get_interpreter(archive)"}, {"intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)"}, {"intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "snippet": "ipaddress.collapse_addresses(addresses)"}, {"intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "snippet": "BaseTransport.get_extra_info(name)"}, {"intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "snippet": "curses.ungetmouse(id, x, y, z, bstate)"}, {"intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "snippet": "itertools.count(start=0)"}, {"intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "snippet": "test.support.checksizeof(test, o, size)"}, {"intent": "Return a str version of `object` . With arguments `encoding`.", "snippet": "str(object=b'', encoding='utf-8')"}, {"intent": "Read up to `n` bytes .", "snippet": "stream_reader.read(n=-1)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, check=-1)"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)"}, {"intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "snippet": "ast.parse(source, filename='<unknown>', mode='exec')"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "snippet": "gzip.open(filename, mode='rb', compresslevel=9)"}, {"intent": "Test that `first` and `second` are equal . With arguments `msg`.", "snippet": "test_case.assertEqual(first, second, msg=None)"}, {"intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "snippet": "os.popen(cmd, mode='r')"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "snippet": "connection.backup(target, pages=0, name=\"main\")"}, {"intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "snippet": "lock.acquire(blocking=True, timeout=-1)"}, {"intent": "The tuple of base classes of a class object.", "snippet": "class.__bases__"}, {"intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "snippet": "scheduler.enterabs(time, priority, action, argument=())"}, {"intent": "Associate `dialect` with `name` .", "snippet": "csv.register_dialect(name, dialect)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, c=6)"}, {"intent": "Log in as the given `user` .", "snippet": "FTP.login(user='anonymous')"}, {"intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "snippet": "select.kevent(ident, data=0)"}, {"intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "snippet": "pickle.dump(obj, file)"}, {"intent": "All arguments are optional . With arguments `microsecond`.", "snippet": "datetime.time(microsecond=0)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "snippet": "text_calendar.formatyear(theyear, l=1, m=3)"}, {"intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_exc(limit=None, chain=True)"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "snippet": "json.dumps(obj, **kw, cls=None)"}, {"intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "snippet": "turtle.speed(speed=None)"}, {"intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "snippet": "aifc.open(file)"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)"}, {"intent": "A Cursor instance has the following attributes and methods.", "snippet": "sqlite3.Cursor"}, {"intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "snippet": "io.TextIOWrapper(buffer)"}, {"intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "snippet": "warnings.filterwarnings(action, append=False)"}, {"intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "snippet": "doctest.testmod(verbose=None)"}, {"intent": "Returns an explanatory string for a given error number `errno` .", "snippet": "xml.parsers.expat.ErrorString(errno)"}, {"intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, method='GET')"}, {"intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "snippet": "credits"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "snippet": "message.set_param(param, value)"}, {"intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "snippet": "fraction.limit_denominator(max_denominator=1000000)"}, {"intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "snippet": "traceback.print_stack(f=None)"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "snippet": "types.new_class(name, bases=())"}, {"intent": "Return the outcome of not `obj` .", "snippet": "operator.__not__(obj)"}, {"intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "snippet": "Cmd.cmdloop(intro=None)"}, {"intent": "Set a new `protocol` .", "snippet": "BaseTransport.set_protocol(protocol)"}, {"intent": "Example : With arguments `poly`, `fill`, `outline`.", "snippet": "shape.addcomponent(poly, fill, outline=None)"}, {"intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "snippet": "itertools.repeat(object, times)"}, {"intent": "Sets the `target` handler for this handler .", "snippet": "memory_handler.setTarget(target)"}, {"intent": "Return a copy of the Decimal instance `num` .", "snippet": "context.copy_decimal(num)"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "snippet": "email.header.Header(s=None)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "snippet": "argparse.FileType(bufsize=-1)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "snippet": "bz2.open(filename)"}, {"intent": "All built-in, non-system-exiting exceptions are derived from this class.", "snippet": "Exception"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')"}, {"intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "snippet": "textwrap.wrap(text, **kwargs, width=70)"}, {"intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "snippet": "pdb.run(statement)"}, {"intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "snippet": "locale.setlocale(category)"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "snippet": "loop.getaddrinfo(host, port, family=0, type=0)"}, {"intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)"}, {"intent": "Record the function `handler` as the handler for `key` .", "snippet": "content_manager.add_get_handler(key, handler)"}, {"intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "snippet": "dict(iterable, **kwarg)"}, {"intent": "Update and return a dictionary representing the current local symbol table .", "snippet": "locals()"}, {"intent": "Return a str version of `object` .", "snippet": "str(object='')"}, {"intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "snippet": "base64.decodestring(s)"}, {"intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "snippet": "socket.sendfile(file, offset=0)"}, {"intent": "This method is called to handle the end `tag` of an element ( e.g .", "snippet": "HTMLParser.handle_endtag(tag)"}, {"intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "snippet": "delattr(object, name)"}, {"intent": "This exception is derived from RuntimeError.", "snippet": "NotImplementedError"}, {"intent": "List mailbox names in `directory` matching `pattern` .", "snippet": "IMAP4.list(directory)"}, {"intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "snippet": "compileall.compile_path(force=False)"}, {"intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "snippet": "email.headerregistry.BaseHeader(name, value)"}, {"intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "snippet": "pool.apply(func, args)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.__lt__(a, b)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "snippet": "timeit.timeit(stmt='pass', timer=<default timer>)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`, `dir`.", "snippet": "tempfile.TemporaryDirectory(prefix=None, dir=None)"}, {"intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "snippet": "os.spawnle(mode, path, env)"}, {"intent": "Same as compilest ( st , `filename` ) .", "snippet": "ST.compile(filename='<syntax-tree>')"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')"}, {"intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "snippet": "finalize.__call__()"}, {"intent": "A generic version of collections.deque . With arguments `deque`.", "snippet": "typing.Deque(deque)"}, {"intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "snippet": "scheduler.enterabs(time, priority, action, kwargs={})"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' . Optional argument `optionflags` works as for function testfile ( ) above .", "snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)"}, {"intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "snippet": "print(*objects, flush=False)"}, {"intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "snippet": "sum(iterable)"}, {"intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "snippet": "str.lstrip(chars)"}, {"intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "snippet": "base_manager.register(typeid, callable, proxytype)"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "snippet": "unittest.FunctionTestCase(testFunc)"}, {"intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')"}, {"intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')"}, {"intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)"}, {"intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "snippet": "max(iterable, key)"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "snippet": "doctest.testmod(report=True)"}, {"intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)"}, {"intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "snippet": "widget.column(column, **kw)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "snippet": "timeit.timeit(stmt='pass', setup='pass')"}, {"intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "snippet": "xml.dom.getDOMImplementation(features=())"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')"}, {"intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "snippet": "turtle.ScrolledCanvas(master)"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "snippet": "venv.EnvBuilder(clear=False)"}, {"intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "snippet": "context.get(var, default)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(prefix='tmp')"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, filename='/dev/null')"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, default=None)"}, {"intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "snippet": "ValueError"}, {"intent": "Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "snippet": "message.as_string(unixfrom=False, maxheaderlen=0)"}, {"intent": "Return an iterator `object` .", "snippet": "iter(object)"}, {"intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "snippet": "fractions.Fraction(numerator=0, denominator=1)"}, {"intent": "Return a generator of groups with up to `n` lines of context .", "snippet": "sequence_matcher.get_grouped_opcodes(n=3)"}, {"intent": "Mark the Future as done and set its `result` .", "snippet": "future.set_result(result)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "snippet": "message.set_param(param, value, language='')"}, {"intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "snippet": "turtle.dot(*color, size=None)"}, {"intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "snippet": "logging.config.listen(verify=None)"}, {"intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "snippet": "signal.setitimer(which, seconds, interval=0.0)"}, {"intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "snippet": "test_case.assertIsInstance(obj, cls)"}, {"intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "snippet": "email.generator.BytesGenerator(outfp)"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "snippet": "loop.getaddrinfo(host, port)"}, {"intent": "Return the value of the named attribute of `object` . `name` must be a string .", "snippet": "getattr(object, name)"}, {"intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "snippet": "queue_listener.dequeue(block)"}, {"intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "snippet": "maildir_message.set_subdir(subdir)"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "snippet": "unittest.main(testLoader=unittest.defaultTestLoader)"}, {"intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "snippet": "group.__str__()"}, {"intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "snippet": "unittest.TestSuite(tests=())"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "snippet": "calendar.calendar(year, l=1)"}, {"intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "snippet": "filecmp.cmp(f1, f2)"}, {"intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "snippet": "pprint.PrettyPrinter(indent=1, stream=None)"}, {"intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "snippet": "ArgumentParser.exit(status=0, message=None)"}, {"intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "snippet": "formatter.assert_line_data(flag=1)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")"}, {"intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "snippet": "contextlib.suppress(*exceptions)"}, {"intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "snippet": "subprocess.run(args, timeout=None)"}, {"intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addstr(y, x, str)"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "snippet": "compileall.compile_dir(dir, maxlevels=10)"}, {"intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "snippet": "TarFile.add(name, filter=None)"}, {"intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "snippet": "resource.getrusage(who)"}, {"intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "snippet": "super(type, object-or-type)"}, {"intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "snippet": "os.posix_fallocate(fd, offset, len)"}, {"intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "snippet": "print(*objects, end='\\n', flush=False)"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "snippet": "os.register_at_fork(before=None)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "snippet": "calendar.prcal(year, l=0, m=3)"}, {"intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "snippet": "sysconfig.get_path(name, scheme, vars)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "snippet": "compile(source, filename, mode, optimize=-1)"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `sock`.", "snippet": "asyncio.open_connection(sock=None)"}, {"intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "snippet": "ensurepip.bootstrap(root=None, user=False)"}, {"intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "snippet": "signature.replace(parameters)"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)"}, {"intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "snippet": "opcode"}, {"intent": "( Only supported on BSD . ) With arguments `ident`.", "snippet": "select.kevent(ident)"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "snippet": "locale.currency(val, symbol=True)"}, {"intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "snippet": "oss_mixer_device.set_recsrc(bitmask)"}, {"intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "snippet": "OptionParser.add_option(*opt_str, attr=value)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "snippet": "NNTP.login(user=None, usenetrc=True)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(prefix='tmp', dir=None)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())"}, {"intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "snippet": "lock.acquire(block=True)"}, {"intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "snippet": "loop.set_default_executor(executor)"}, {"intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "snippet": "test_loader.discover(start_dir, pattern='test*.py')"}, {"intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "snippet": "fcntl.ioctl(fd, request)"}, {"intent": "Change owner `user` and/or `group` of the given `path` .", "snippet": "shutil.chown(path, user=None)"}, {"intent": "Increments the progress bar \u2019 s value by `amount` .", "snippet": "widget.step(amount=None)"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "snippet": "HTTPConnection.request(method, url, body=None, headers={})"}, {"intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "snippet": "mimetypes.add_type(type, ext, strict=True)"}, {"intent": "Return a str version of `object` . With arguments `errors`.", "snippet": "str(errors='strict')"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, optionflags=0)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "bz2.open(filename, mode='r', newline=None)"}, {"intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "snippet": "pow(x, y)"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "snippet": "header.encode(\\t', linesep='\\n')"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "snippet": "connection.backup(target, progress=None)"}, {"intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "snippet": "Morsel.setdefault(key, value=None)"}, {"intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "snippet": "text_calendar.formatyear(theyear, l=1, c=6)"}, {"intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "snippet": "binascii.b2a_uu(data, backtick=False)"}, {"intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "snippet": "select.epoll(sizehint=-1, flags=0)"}, {"intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "snippet": "os.mknod(path, device=0)"}, {"intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "snippet": "zip(*iterables)"}, {"intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "snippet": "IMAP4.search(charset)"}, {"intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "snippet": "email.message_from_bytes(s, policy=policy.compat32)"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "snippet": "dis.disassemble(code, lasti=-1)"}, {"intent": "Return a context manager that closes `thing` upon completion of the block .", "snippet": "contextlib.closing(thing)"}, {"intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`.", "snippet": "OSError(errno, strerror)"}, {"intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "snippet": "subprocess.run(args, stdout=None)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "snippet": "@dataclasses.dataclass(eq=True)"}, {"intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "snippet": "message.get_params(unquote=True)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` .", "snippet": "NNTP.login(password=None)"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")"}, {"intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "snippet": "subprocess.run(args, input=None)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "snippet": "gzip.open(filename, mode='rb')"}, {"intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "snippet": "ast.get_docstring(node)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, port=119, password=None)"}, {"intent": "Delete old `mailbox` named mailbox .", "snippet": "IMAP4.delete(mailbox)"}, {"intent": "Construct a new Decimal object based from `value` .", "snippet": "decimal.Decimal(value=\"0\")"}, {"intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "snippet": "webbrowser.register(name, constructor, instance=None)"}, {"intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "snippet": "warnings.filterwarnings(action, message='', category=Warning)"}, {"intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "snippet": "Match.group(group1)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "snippet": "random.choices(population, k=1)"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), machine='')"}, {"intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "snippet": "max(arg1, arg2, *args, key)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "snippet": "bdb.Breakpoint(self, file, line)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "snippet": "tempfile.mkstemp(suffix=None, text=False)"}, {"intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "snippet": "tarfile.open(**kwargs, name=None)"}, {"intent": "All arguments are optional . With arguments `second`.", "snippet": "datetime.time(second=0)"}, {"intent": "Select a `mailbox` .", "snippet": "IMAP4.select(mailbox='INBOX')"}, {"intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "snippet": "readline.set_startup_hook(function)"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "snippet": "bdb.Breakpoint(self, file, line, cond=None)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "snippet": "message.set_param(param, value, header='Content-Type', replace=False)"}, {"intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "snippet": "hasattr(object, name)"}, {"intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "snippet": "quopri.decode(input, output, header=False)"}, {"intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "snippet": "logging.handlers.NTEventLogHandler(appname)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)"}, {"intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "snippet": "mmap.move(dest, src, count)"}, {"intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "snippet": "shlex.split(s, comments=False, posix=True)"}, {"intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "snippet": "warnings.filterwarnings(action, message='', append=False)"}, {"intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "snippet": "@test.support.run_with_locale(catstr, *locales)"}, {"intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addnstr(y, x, str, n)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "snippet": "TarFile.extractall(path=\".\", members=None)"}, {"intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "snippet": "warnings.filterwarnings(action, message='')"}, {"intent": "Reads and returns the response body , or up to the next `amt` bytes .", "snippet": "HTTPResponse.read(amt)"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "snippet": "Node.toprettyxml(indent=\"\\t\")"}, {"intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "snippet": "calendar.leapdays(y1, y2)"}, {"intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "snippet": "struct.unpack_from(buffer, offset=0)"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "snippet": "json.dumps(obj, **kw, indent=None)"}, {"intent": "Return a floating point number constructed from a number or string `x` .", "snippet": "float()"}, {"intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "snippet": "property(doc=None)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` .", "snippet": "NNTP.login(user=None)"}, {"intent": "Return a value for the context variable for the current context . With arguments `default`.", "snippet": "context_var.get(default)"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "snippet": "chunk.Chunk(file, align=True, bigendian=True)"}, {"intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "snippet": "tabnanny.process_tokens(tokens)"}, {"intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "snippet": "TarInfo.fromtarfile(tarfile)"}, {"intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "snippet": "BaseProtocol.connection_made(transport)"}, {"intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power .", "snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "snippet": "calendar.prcal(year, w=0, m=3)"}, {"intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "snippet": "doc_test_finder.find(obj, name)"}, {"intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "snippet": "base64.b64encode(s)"}, {"intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')"}, {"intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "snippet": "unittest.TextTestRunner(failfast=False)"}, {"intent": "Set the current process \u2019 s user id . With arguments `uid`.", "snippet": "os.setuid(uid)"}, {"intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "snippet": "test_case.assertLogs(logger=None, level=None)"}, {"intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(user='')"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, password=None)"}, {"intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "snippet": "decimal.quantize(exp)"}, {"intent": "Raised when the second argument of a division or modulo operation is zero.", "snippet": "ZeroDivisionError"}, {"intent": "Return a randomly generated salt of the specified `method` .", "snippet": "crypt.mksalt(method=None)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, len=0, start=0)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")"}, {"intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "snippet": "turtle.onclick(fun, btn=1, add=None)"}, {"intent": "Return a str version of `object` .", "snippet": "str(object=b'')"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "snippet": "cmd.Cmd(stdout=None)"}, {"intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "snippet": "@functools.lru_cache(maxsize=128, typed=False)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "snippet": "window.border(ls, rs, ts, bs, tl, tr)"}, {"intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "snippet": "doctest.testsource(module, name)"}, {"intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "snippet": "warnings.warn_explicit(message, category, filename, lineno)"}, {"intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "snippet": "copyright"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "snippet": "window.border(ls, rs, ts)"}, {"intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "snippet": "zipapp.create_archive(source, target=None)"}, {"intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "snippet": "ArgumentParser.parse_args(namespace=None)"}, {"intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "snippet": "slice(start, stop, step)"}, {"intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "snippet": "chunk.Chunk(file, align=True)"}, {"intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "snippet": "bdb.runcall(func, *args, **kwds)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, fromfiledate='')"}, {"intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "snippet": "imp.load_module(name, file, pathname, description)"}, {"intent": "where With arguments `parser`, `title`, `description`.", "snippet": "optparse.OptionGroup(parser, title, description=None)"}, {"intent": "Return an iterator object .", "snippet": "container.__iter__()"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "snippet": "argparse.FileType(mode='r')"}, {"intent": "Set the instance \u2019 s debugging `level` .", "snippet": "FTP.set_debuglevel(level)"}, {"intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "snippet": "ArgumentParser.parse_args(args=None, namespace=None)"}, {"intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "snippet": "datetime.timedelta(weeks=0)"}, {"intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "snippet": "exit()"}, {"intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "snippet": "time.__format__(format)"}, {"intent": "Test whether every element in the set is in other.", "snippet": "set <= other"}, {"intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "snippet": "dataclasses.field(metadata=None)"}, {"intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "snippet": "atexit.register(func, *args, **kwargs)"}, {"intent": "With one argument , return the type of an `object` .", "snippet": "type(object)"}, {"intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "snippet": "urllib.parse.unquote(string, errors='replace')"}, {"intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "snippet": "Queue.put(item, block=True)"}, {"intent": "Decompress `data` , a bytes-like object .", "snippet": "bz2.decompress(data)"}, {"intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "snippet": "importlib.resources.is_resource(package, name)"}, {"intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "snippet": "Telnet.expect(list, timeout=None)"}, {"intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "snippet": "ctypes.cast(obj, type)"}, {"intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "snippet": "base64.b16decode(s)"}, {"intent": "Run doctest.testmod ( ) on the given `module` . `optionflags` is passed as optionflags to doctest.testmod ( ) .", "snippet": "test.support.run_doctest(module, optionflags=0)"}, {"intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)"}, {"intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.mbox(path, create=True)"}, {"intent": "Set the value of `a` at index `b` to `c` .", "snippet": "operator.__setitem__(a, b, c)"}, {"intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "snippet": "doc_test_parser.get_examples(string, name='<string>')"}, {"intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)"}, {"intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "snippet": "difflib.SequenceMatcher(a='', autojunk=True)"}, {"intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "snippet": "mimetypes.guess_type(url, strict=True)"}, {"intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "snippet": "bytes(source, encoding)"}, {"intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "snippet": "bytes_generator.flatten(msg, linesep=None)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "snippet": "timeit.repeat(repeat=5)"}, {"intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "snippet": "codecs.StreamWriter(stream)"}, {"intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "snippet": "timeit.repeat(stmt='pass', repeat=5)"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb, limit=None)"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "snippet": "warnings.simplefilter(action, lineno=0, append=False)"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), vendor='')"}, {"intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "snippet": "itertools.count(start=0, step=1)"}, {"intent": "Return `a` converted to an integer .", "snippet": "operator.__index__(a)"}, {"intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions .", "snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None)"}, {"intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)"}, {"intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())"}, {"intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "snippet": "fileinput.input(files=None, bufsize=0)"}, {"intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "snippet": "breakpoint.bpprint(out=None)"}, {"intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "snippet": "stream_reader.read(size, chars)"}, {"intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "snippet": "window.touchline(start, count)"}, {"intent": "Connect `sock` to a remote socket at `address` .", "snippet": "loop.sock_connect(sock, address)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, tofile='')"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)"}, {"intent": "Sets the Formatter for this handler to `fmt` .", "snippet": "queue_listener.setFormatter(fmt)"}, {"intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "snippet": "compileall.compile_dir(dir, rx=None)"}, {"intent": "Write `buf` to the SSL socket and return the number of bytes written .", "snippet": "SSLSocket.write(buf)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "snippet": "zlib.compressobj(level=-1, method=DEFLATED)"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "snippet": "platform.architecture(executable=sys.executable)"}, {"intent": "Return True if any element of the `iterable` is true .", "snippet": "any(iterable)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "snippet": "window.border(ls, rs, ts, bs)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "snippet": "gzip.GzipFile(compresslevel=9)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "snippet": "calendar.prcal(year, l=0)"}, {"intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_exc(chain=True)"}, {"intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "snippet": "View.Modify(kind, data)"}, {"intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "snippet": "filecmp.dircmp(a, b, ignore=None)"}, {"intent": "Wait until a `predicate` becomes true .", "snippet": "condition.wait_for(predicate)"}, {"intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "snippet": "chunk.seek(pos, whence=0)"}, {"intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "snippet": "base64.b32decode(s, casefold=False)"}, {"intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "snippet": "test.support.bind_port(sock, host=HOST)"}, {"intent": "This function is deprecated in this module . With arguments `qs`.", "snippet": "cgi.parse_qs(qs)"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)"}, {"intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "snippet": "IMAP4.setacl(mailbox, who, what)"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "snippet": "io.FileIO(name, mode='r')"}, {"intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "snippet": "fractions.Fraction(decimal)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "snippet": "bz2.open(filename, compresslevel=9)"}, {"intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)"}, {"intent": "Scroll the screen or scrolling region upward by `lines` lines .", "snippet": "window.scroll(lines=1)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, fresh=())"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "snippet": "directory.start_component(feature=None)"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "snippet": "shlex.shlex(posix=False)"}, {"intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "snippet": "queue_listener.getChild(suffix)"}, {"intent": "Copy `message_set` messages onto end of `new_mailbox` .", "snippet": "IMAP4.copy(message_set, new_mailbox)"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "snippet": "doctest.testfile(filename, name=None)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)"}, {"intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "snippet": "email.utils.encode_rfc2231(s, language=None)"}, {"intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "snippet": "email.utils.formataddr(pair, charset='utf-8')"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)"}, {"intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "snippet": "reversed(seq)"}, {"intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "snippet": "time.strftime(format, t)"}, {"intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "snippet": "frozenset()"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "snippet": "BaseCookie.output(header='Set-Cookie:')"}, {"intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "snippet": "warnings.showwarning(message, category, filename, lineno, line=None)"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, maxval=None)"}, {"intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "snippet": "int()"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "snippet": "uuid.UUID(fields=None)"}, {"intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "snippet": "decimal.Context(capitals=None)"}, {"intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "snippet": "open(file, newline=None)"}, {"intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addnstr(str, n)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "snippet": "timeit.timeit(stmt='pass')"}, {"intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)"}, {"intent": "Run the command described by `args` . With arguments `shell`.", "snippet": "subprocess.run(args, shell=False)"}, {"intent": "The true value of the bool type.", "snippet": "True"}, {"intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "snippet": "code.compile_command(source, symbol=\"single\")"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "bz2.open(filename, encoding=None)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)"}, {"intent": "Return a controller object for the browser type `using` .", "snippet": "webbrowser.get(using=None)"}, {"intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "snippet": "exit(code=None)"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "snippet": "argparse.FileType(errors=None)"}, {"intent": "Set the size and position of the main window . With arguments `height`.", "snippet": "turtle.setup(height=_CFG\"height\")"}, {"intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "snippet": "bytes.translate(table, delete=b'')"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)"}, {"intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "snippet": "turtle.goto(x, y=None)"}, {"intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "snippet": "fcntl.ioctl(fd, request, mutate_flag=True)"}, {"intent": "The standard formatter . With arguments `writer`.", "snippet": "formatter.AbstractFormatter(writer)"}, {"intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "snippet": "quopri.decodestring(s, header=False)"}, {"intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "snippet": "os.link(src, dst, src_dir_fd=None)"}, {"intent": "Create a new ArgumentParser object . With arguments `parents`.", "snippet": "argparse.ArgumentParser(parents=)"}, {"intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "snippet": "gzip.compress(data, compresslevel=9)"}, {"intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "snippet": "operator.attrgetter(*attrs)"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "snippet": "http.client.HTTPConnection(host, blocksize=8192)"}, {"intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "snippet": "heapq.heappop(heap)"}, {"intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "snippet": "BaseHandler.<protocol>_response(req, response)"}, {"intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "snippet": "bdb.set_break(filename, lineno, cond, funcname)"}, {"intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "snippet": "fcntl.fcntl(fd, cmd)"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "snippet": "http.client.HTTPConnection(host, timeout, port=None)"}, {"intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)"}, {"intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "snippet": "datetime.isoformat(timespec='auto')"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "snippet": "doctest.DocTestFinder(verbose=False)"}, {"intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "snippet": "turtle.pen(**pendict, pen=None)"}, {"intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .", "snippet": "Pattern.search(string, pos, endpos)"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)"}, {"intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "snippet": "open(file, buffering=-1)"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "snippet": "message.get_params(header='content-type')"}, {"intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "snippet": "multiprocessing.Process(group=None, name=None)"}, {"intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "snippet": "ContentHandler.startElement(name, attrs)"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`, `handle`.", "snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None)"}, {"intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "snippet": "re.search(pattern, string)"}, {"intent": "Return a deep copy of `x` . With arguments `memo`.", "snippet": "copy.deepcopy(x, memo)"}, {"intent": "Returns the list of children belonging to `item` .", "snippet": "widget.get_children(item=None)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "snippet": "calendar.prcal(year, l=0, c=6)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "snippet": "smtplib.SMTP(timeout, port=0)"}, {"intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "snippet": "threading.Timer(interval, function, args=None, kwargs=None)"}, {"intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "snippet": "io_base.seek(offset, whence=SEEK_SET)"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "snippet": "cgitb.enable(display=1)"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "snippet": "email.headerregistry.Address(domain='')"}, {"intent": "Read data from the stream until `separator` is found .", "snippet": "stream_reader.readuntil(separator=b'\\n')"}, {"intent": "Set the current child process `watcher` to watcher .", "snippet": "abstract_event_loop_policy.set_child_watcher(watcher)"}, {"intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "snippet": "doc_test_runner.run(test, clear_globs=True)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')"}, {"intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "snippet": "sys.excepthook(type, value, traceback)"}, {"intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "snippet": "mailbox.Maildir(dirname, create=True)"}, {"intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "snippet": "asyncio.ensure_future(obj, loop=None)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "snippet": "calendar.prcal(year, m=3)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "snippet": "argparse.FileType(mode='r', bufsize=-1)"}, {"intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "snippet": "ensurepip.bootstrap(verbosity=0)"}, {"intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "snippet": "dict(mapping, **kwarg)"}, {"intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type . If `lock` is True ( the default ) then a new recursive lock object is created to synchronize access to the value .", "snippet": "multiprocessing.Value(typecode_or_type, *args, lock=True)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "snippet": "unittest.TextTestRunner(stream=None, descriptions=True)"}, {"intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "snippet": "logging.disable(level=CRITICAL)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), move=False)"}, {"intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "snippet": "HTTPConnection.set_tunnel(host, headers=None)"}, {"intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "snippet": "int.to_bytes(length, byteorder, signed=False)"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "snippet": "urllib.parse.quote(string, safe='/')"}, {"intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "snippet": "types.ModuleType(name, doc=None)"}, {"intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "snippet": "style.lookup(style, option, default=None)"}, {"intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "snippet": "eval(expression, globals)"}, {"intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "snippet": "pkgutil.iter_modules(path=None, prefix='')"}, {"intent": "Encodes the `facility` and `priority` into an integer .", "snippet": "sys_log_handler.encodePriority(facility, priority)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "snippet": "tarfile.TarFile(dereference=False)"}, {"intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "snippet": "vars(object)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)"}, {"intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "snippet": "config_parser.set(section, option, value)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "snippet": "message.set_param(param, value, header='Content-Type', language='')"}, {"intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding .", "snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\")"}, {"intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')"}, {"intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "snippet": "ctypes.CFUNCTYPE(restype, *argtypes)"}, {"intent": "Create a new ArgumentParser object . With arguments `prog`.", "snippet": "argparse.ArgumentParser(prog=None)"}, {"intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "snippet": "mailbox.Maildir(dirname, factory=None, create=True)"}, {"intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "snippet": "ipaddress.ip_network(address, strict=True)"}, {"intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "snippet": "meta_path_finder.find_spec(fullname, path, target=None)"}, {"intent": "Delete the breakpoints in `filename` and `lineno` .", "snippet": "bdb.clear_break(filename, lineno)"}, {"intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "snippet": "fileinput.input(bufsize=0)"}, {"intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)"}, {"intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "snippet": "window.addch(y, x, ch)"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "snippet": "chunk.Chunk(file, inclheader=False)"}, {"intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "snippet": "msilib.Feature(db, id, title, desc, display, parent=None)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "snippet": "message.set_param(param, value, header='Content-Type')"}, {"intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "snippet": "importlib.__import__(name, globals=None)"}, {"intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), defaults=None)"}, {"intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "snippet": "window.chgat(y, x, num, attr)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog)"}, {"intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "snippet": "imaplib.Internaldate2tuple(datestr)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "snippet": "gzip.GzipFile(mtime=None)"}, {"intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "snippet": "codecs.CodecInfo(encode, decode, name=None)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "snippet": "subprocess.Popen(args, bufsize=-1)"}, {"intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "snippet": "header.append(s, errors='strict')"}, {"intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "snippet": "threading.Timer(interval, function, args=None)"}, {"intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "snippet": "message.get_payload(i=None, decode=False)"}, {"intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "snippet": "codecs.open(filename, buffering=1)"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "snippet": "uuid.UUID(hex=None, bytes=None)"}, {"intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "snippet": "kqueue.control(changelist, max_events)"}, {"intent": "Return true if the message object has a field named `name` .", "snippet": "message.__contains__(name)"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "snippet": "doctest.testmod(globs=None)"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "snippet": "os.sendfile(out, in, offset, count, headers)"}, {"intent": "Return an open file object connected to the file descriptor `fd` . With arguments `*args`, `**kwargs`.", "snippet": "os.fdopen(fd, *args, **kwargs)"}, {"intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "snippet": "multiprocessing.Process(group=None, args=())"}, {"intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "snippet": "element.makeelement(tag, attrib)"}, {"intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "snippet": "doctest.debug(module, name, pm=False)"}, {"intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "snippet": "modulefinder.ReplacePackage(oldname, newname)"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "snippet": "ctypes.CDLL(name, use_errno=False)"}, {"intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "snippet": "fcntl.ioctl(fd, request, arg=0)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "snippet": "gzip.GzipFile(filename=None, compresslevel=9)"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "snippet": "json.loads(s, **kw, cls=None)"}, {"intent": "Change owner `user` and/or `group` of the given `path` .", "snippet": "shutil.chown(path, user=None, group=None)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "snippet": "doctest.Example(source, want, lineno=0, indent=0)"}, {"intent": "A helper function to create a `mock` to replace the use of open ( ) .", "snippet": "unittest.mock.mock_open(mock=None)"}, {"intent": "Return the smallest number representable in the given `context` ( or in the current thread \u2019 s context if no context is given ) that is larger than the given operand .", "snippet": "decimal.next_plus(context=None)"}, {"intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "snippet": "memoryview.hex()"}, {"intent": "Receive notification of a skipped entity . With arguments `name`.", "snippet": "ContentHandler.skippedEntity(name)"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', dialect='excel')"}, {"intent": "Returns the largest representable number smaller than `x` .", "snippet": "context.next_minus(x)"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid . With arguments `dir_fd`.", "snippet": "os.access(path, mode, dir_fd=None, effective_ids=False)"}, {"intent": "Call `func` with the given arguments under control of the Trace object with the current tracing parameters . With arguments `*args`, `**kwds`.", "snippet": "trace.runfunc(func, *args, **kwds)"}, {"intent": "Raise the SystemExit exception .", "snippet": "_thread.exit()"}, {"intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "snippet": "FTP.storbinary(cmd, fp, blocksize=8192)"}, {"intent": "Return an IPv4Interface or IPv6Interface object depending on the IP `address` passed as argument .", "snippet": "ipaddress.ip_interface(address)"}, {"intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `buffering`.", "snippet": "io.open(file, buffering=-1)"}, {"intent": "Returns the address of the memory buffer as integer . `obj` must be an instance of a ctypes type .", "snippet": "ctypes.addressof(obj)"}, {"intent": "The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "snippet": "email_message.epilogue"}, {"intent": "Link number out of range", "snippet": "errno.ELNRNG"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")"}, {"intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds . When a given header name does not appear in the registry , the class specified by `default_class` is used as the specialized class .", "snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader)"}, {"intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "snippet": "os.minor(device)"}, {"intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "snippet": "str.endswith(suffix, start, end)"}, {"intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "snippet": "aifc.writeframesraw(data)"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "snippet": "uuid.UUID(hex=None)"}, {"intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.Unpickler(file, fix_imports=True, errors=\"strict\")"}, {"intent": "Create a mock object using another object as a `spec` . If `spec_set` is True then attempting to set attributes that don \u2019 t exist on the spec object will raise an AttributeError . With arguments `**kwargs`.", "snippet": "unittest.mock.create_autospec(spec, **kwargs, spec_set=False)"}, {"intent": "This exception is raised when an error occurs during compression or decompression, or while initializing the compressor/decompressor state.", "snippet": "lzma.LZMAError"}, {"intent": "Returns the `key` that follows key in the traversal .", "snippet": "gdbm.nextkey(key)"}, {"intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "snippet": "subprocess.run(args, stderr=None)"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "snippet": "urllib.request.urlretrieve(url)"}, {"intent": "Create a new request handler instance.", "snippet": "xmlrpc.server.DocXMLRPCRequestHandler"}, {"intent": "Return True if socket is in blocking mode , False if in non-blocking .", "snippet": "socket.getblocking()"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "snippet": "turtle.onclick(fun, add=None)"}, {"intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`, `ordering`.", "snippet": "control.event(event, argument, condition=1, ordering=None)"}, {"intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "snippet": "readline.read_history_file(filename)"}, {"intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "snippet": "bytearray.decode(errors=\"strict\")"}, {"intent": "Returns the current terminator for the channel .", "snippet": "async_chat.get_terminator()"}, {"intent": "An error raised when a NIS function returns an error code.", "snippet": "nis.error"}, {"intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node . The `addindent` parameter is the incremental indentation to use for subnodes of the current one . The `newl` parameter specifies the string to use to terminate newlines .", "snippet": "Node.writexml(writer, indent=\"\", addindent=\"\", newl=\"\")"}, {"intent": "Create a barrier object for `parties` number of threads . An `action` , when provided , is a callable to be called by one of the threads when they are released .", "snippet": "threading.Barrier(parties, action=None)"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `host`.", "snippet": "asyncio.start_server(client_connected_cb, host=None)"}, {"intent": "Acquire a lock , `blocking` or non-blocking .", "snippet": "lock.acquire()"}, {"intent": "Set the current child `watcher` to watcher for the current policy .", "snippet": "asyncio.set_child_watcher(watcher)"}, {"intent": "The line number within filename where this DocTest begins, or None if the line number is unavailable.", "snippet": "doc_test.lineno"}, {"intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")"}, {"intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one .", "snippet": "pprint.PrettyPrinter(indent=1)"}, {"intent": "Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open().", "snippet": "typing.BinaryIO"}, {"intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "snippet": "re.match(pattern, string, flags=0)"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "snippet": "nntplib.NNTP_SSL(host)"}, {"intent": "Write coverage results . Set `show_missing` to show lines that had no hits . `coverdir` specifies the directory into which the coverage result files will be output .", "snippet": "coverage_results.write_results(show_missing=True, coverdir=None)"}, {"intent": "If inclusive is True (include), only match memory blocks allocated in a file with a name matching filename_pattern at line number lineno.", "snippet": "filter.inclusive"}, {"intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`, `handle`.", "snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)"}, {"intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "snippet": "window.enclose(y, x)"}, {"intent": "Return a stat_result object for this entry . On Windows , it only requires a system call if `follow_symlinks` is True and the entry is a symbolic link .", "snippet": "dir_entry.stat(follow_symlinks=True)"}, {"intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "snippet": "xml.sax.xmlreader.AttributesImpl(attrs)"}, {"intent": "Return a scheduled callback time as float seconds .", "snippet": "timer_handle.when()"}, {"intent": "( Only supported on BSD . )", "snippet": "select.kqueue()"}, {"intent": "Delete the `folder` whose name is folder .", "snippet": "mh.remove_folder(folder)"}, {"intent": "An optional method which , when called , should invalidate any internal cache used by the finder .", "snippet": "meta_path_finder.invalidate_caches()"}, {"intent": "Reads and returns the response body , or up to the next `amt` bytes .", "snippet": "HTTPResponse.read()"}, {"intent": "Returns True if `x` is a quiet NaN ; otherwise returns False .", "snippet": "context.is_qnan(x)"}, {"intent": "In Babyl mailboxes , the headers of a message are not stored contiguously with the body of the message . With arguments `key`.", "snippet": "babyl.get_file(key)"}, {"intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "snippet": "calendar.monthdayscalendar(year, month)"}, {"intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\")"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)"}, {"intent": "The part of the name preceding the colon if there is one, else the empty string.", "snippet": "Attr.prefix"}, {"intent": "Turn turtle left by `angle` units .", "snippet": "turtle.left(angle)"}, {"intent": "Create a new directory at this given path . If `exist_ok` is false ( the default ) , FileExistsError is raised if the target directory already exists .", "snippet": "Path.mkdir(exist_ok=False)"}, {"intent": "Start monitoring the `fd` file descriptor for write availability and invoke `callback` with the specified arguments once fd is available for writing . With arguments `*args`.", "snippet": "loop.add_writer(fd, callback, *args)"}, {"intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "snippet": "tixCommand.tix_addbitmapdir(directory)"}, {"intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "snippet": "test_case.assertRaises(exception, callable, *args, **kwds)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.SMTP_SSL(timeout, local_hostname=None)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)"}, {"intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "snippet": "policy.header_store_parse(name, value)"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "snippet": "http.client.HTTPConnection(host, port=None, blocksize=8192)"}, {"intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "snippet": "textwrap.indent(text, prefix, predicate=None)"}, {"intent": "Leave echo mode .", "snippet": "curses.noecho()"}, {"intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "snippet": "ctypes.LittleEndianStructure(*args, **kw)"}, {"intent": "The main configuration parser . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'))"}, {"intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "snippet": "types.DynamicClassAttribute(doc=None)"}, {"intent": "If true, request that the CookieJar instance downgrade RFC 2109 cookies (ie.", "snippet": "DefaultCookiePolicy.rfc2109_as_netscape"}, {"intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "snippet": "codecs.open(filename, mode='r')"}, {"intent": "Instructs writer objects to quote all fields.", "snippet": "csv.QUOTE_ALL"}, {"intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "snippet": "collections.Counter(iterable-or-mapping)"}, {"intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None, policy=compat32)"}, {"intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached . `fallback` set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call ( e.g .", "snippet": "loop.sendfile(transport, file, count=None, fallback=True)"}, {"intent": "If a fallback has been set , forward ngettext ( ) to the fallback . Otherwise , return `singular` if `n` is 1 ; return `plural` otherwise .", "snippet": "null_translations.ngettext(singular, plural, n)"}, {"intent": "This method is not defined in BaseHandler , but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors . `req` will be a Request object , `fp` will be a file-like object with the HTTP error body , `code` will be the three-digit code of the error , `msg` will be the user-visible explanation of the code and `hdrs` will be a mapping object with the headers of the error .", "snippet": "BaseHandler.http_error_default(req, fp, code, msg, hdrs)"}, {"intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "snippet": "calendar.prcal(year, c=6)"}, {"intent": "Release the lock on the mailbox , if any .", "snippet": "mailbox.unlock()"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "snippet": "bytes.split()"}, {"intent": "Base exception class used for all specific DOM exceptions.", "snippet": "xml.dom.DOMException"}, {"intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "snippet": "socket.socketpair()"}, {"intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `delay`.", "snippet": "logging.handlers.BaseRotatingHandler(filename, mode, delay=False)"}, {"intent": "Instantiate the bytes object `str` with the supplied parameters , where str should be a parameterized string obtained from the terminfo database .", "snippet": "curses.tparm(str)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "snippet": "window.insstr(y, x, str, attr)"}, {"intent": "Turn turtle animation on/off and set `delay` for update drawings .", "snippet": "turtle.tracer(delay=None)"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "snippet": "str.split()"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "snippet": "gettext.find(domain, languages=None, all=False)"}, {"intent": "Return a month \u2019 s calendar as an HTML table . With arguments `theyear`, `themonth`.", "snippet": "html_calendar.formatmonth(theyear, themonth)"}, {"intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "snippet": "mailbox.keys()"}, {"intent": "Exactly like Parser , except that headersonly defaults to True . With arguments `_class`.", "snippet": "email.parser.HeaderParser(_class=None)"}, {"intent": "ABC for classes that provide __aiter__ and __anext__ methods.", "snippet": "collections.abc.AsyncIterator"}, {"intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "snippet": "Record.SetInteger(field, value)"}, {"intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` .", "snippet": "traceback_exception.extract(frame_gen, limit=None)"}, {"intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, headers=None)"}, {"intent": "A non-recursive lock object: a close analog of threading.Lock.", "snippet": "multiprocessing.Lock"}, {"intent": "Contains the version string from the request.", "snippet": "base_http_request_handler.request_version"}, {"intent": "The type of objects defined in extension modules with PyMemberDef, such as datetime.timedelta.days.", "snippet": "types.MemberDescriptorType"}, {"intent": "Remove any parents .", "snippet": "BaseHandler.close()"}, {"intent": "Return the currently running task or None .", "snippet": "task.current_task()"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "snippet": "email_message.set_param(param, value, header='Content-Type')"}, {"intent": "Force write of file with filedescriptor `fd` to disk .", "snippet": "os.fsync(fd)"}, {"intent": "Return True if the symbol is used in its block .", "snippet": "symbol.is_referenced()"}, {"intent": "Return True if this entry is a file or a symbolic link pointing to a file ; return False if the entry is or points to a directory or other non-file entry , or if it doesn \u2019 t exist anymore . If `follow_symlinks` is False , return True only if this entry is a file ( without following symlinks ) ; return False if the entry is a directory or other non-file entry , or if it doesn \u2019 t exist anymore .", "snippet": "dir_entry.is_file(follow_symlinks=True)"}, {"intent": "High-resolution per-process timer from the CPU.", "snippet": "time.CLOCK_PROF"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "snippet": "pickletools.dis(pickle, memo=None, annotate=0)"}, {"intent": "For addresses that appear to be 6to4 addresses  (starting with 2002::/16) as defined by RFC 3056, this property will report the embedded IPv4 address.", "snippet": "i_pv6_address.sixtofour"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "snippet": "loop.create_connection(protocol_factory, port=None)"}, {"intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)"}, {"intent": "The module was found as a frozen module.", "snippet": "imp.PY_FROZEN"}, {"intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "snippet": "bytearray.replace(old, new, count)"}, {"intent": "The start index of doc where parsing failed.", "snippet": "json_encoder.pos"}, {"intent": "This is the entry point you will normally use .", "snippet": "textbox.edit()"}, {"intent": "True if a transaction is active (there are uncommitted changes), False otherwise.", "snippet": "connection.in_transaction"}, {"intent": "Like find ( ) , but raise ValueError when the subsequence is not found . With arguments `sub`.", "snippet": "bytes.index(sub)"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "snippet": "cmath.isclose(a, b, abs_tol=0.0)"}, {"intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged . The `flags` argument contains a bitwise OR of zero or more of the following flags :", "snippet": "os.preadv(fd, buffers, offset, flags=0)"}, {"intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "snippet": "compat32.header_source_parse(sourcelines)"}, {"intent": "Return `a` * `b` , for a and b numbers .", "snippet": "operator.__mul__(a, b)"}, {"intent": "Group has write permission.", "snippet": "stat.S_IWGRP"}, {"intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`, `context`.", "snippet": "decimal.min_mag(other, context=None)"}, {"intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "snippet": "codecs.ignore_errors(exception)"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e .", "snippet": "shutil.make_archive(base_name, format, root_dir, base_dir)"}, {"intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "snippet": "datetime.isocalendar()"}, {"intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "snippet": "date.isoweekday()"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "snippet": "gzip.GzipFile(filename=None)"}, {"intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "snippet": "fraction.limit_denominator()"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)"}, {"intent": "This function is called if the handle ( ) method of a RequestHandlerClass instance raises an exception . With arguments `request`, `client_address`.", "snippet": "base_server.handle_error(request, client_address)"}, {"intent": "Return a dictionary containing all the named subgroups of the match , keyed by the subgroup name .", "snippet": "Match.groupdict()"}, {"intent": "Start a file with its associated application . The `path` parameter is relative to the current directory .", "snippet": "os.startfile(path)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)"}, {"intent": "Format the traceback as a list of lines with newlines . If `most_recent_first` is True , the order of the formatted frames is reversed , returning the most recent frame first instead of last .", "snippet": "traceback.format(most_recent_first=False)"}, {"intent": "Return True if the stream can be read from .", "snippet": "io_base.readable()"}, {"intent": "Return a list of the extended filesystem attributes on `path` . With arguments `follow_symlinks`.", "snippet": "os.listxattr(path=None, follow_symlinks=True)"}, {"intent": "Attempt to find the spec to handle `fullname` within path . With arguments `target`.", "snippet": "file_finder.find_spec(fullname, target=None)"}, {"intent": "A real str object used to store the contents of the UserString class.", "snippet": "user_string.data"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "str.split(sep=None, maxsplit=-1)"}, {"intent": "Compile the file with path `fullname` . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "snippet": "compileall.compile_file(fullname, rx=None)"}, {"intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "snippet": "timer.repeat(number=1000000)"}, {"intent": "Additional known values of the encoding field from the AU header, but which are not supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"}, {"intent": "Return True if `path` refers to an existing path or an open file descriptor .", "snippet": "os.path.exists(path)"}, {"intent": "A dictionary mapping type names to type-checking functions.", "snippet": "Option.TYPE_CHECKER"}, {"intent": "The internal block size of the hash algorithm in bytes.", "snippet": "HMAC.block_size"}, {"intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` .", "snippet": "text_io_wrapper.reconfigure()"}, {"intent": "Wait until the result is available or until `timeout` seconds pass .", "snippet": "async_result.wait(timeout)"}, {"intent": "Return a logger with the specified `name` or , if name is None , return a logger which is the root logger of the hierarchy .", "snippet": "logging.getLogger(name=None)"}, {"intent": "Indicate that the `num` screen lines , starting at line `beg` , are corrupted and should be completely redrawn on the next refresh ( ) call .", "snippet": "window.redrawln(beg, num)"}, {"intent": "Return the sequence of blocked domains ( as a tuple ) .", "snippet": "DefaultCookiePolicy.blocked_domains()"}, {"intent": "If dwFlags specifies STARTF_USESHOWWINDOW, this attribute can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function, except for SW_SHOWDEFAULT.", "snippet": "startupinfo.wShowWindow"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "lzma.open(filename, newline=None)"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `parse_float`.", "snippet": "json.loads(s, **kw, parse_float=None)"}, {"intent": "Must return a Boolean value ; if the value is True , the `request` will be processed , and if it \u2019 s False , the request will be denied . With arguments `client_address`.", "snippet": "base_server.verify_request(request, client_address)"}, {"intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.iterparse(source, events=None, parser=None)"}, {"intent": "This is a subclass of POP3 that connects to the server over an SSL encrypted socket . With arguments `host`.", "snippet": "poplib.POP3_SSL(host)"}, {"intent": "This visitor calls visit ( ) on all children of the `node` .", "snippet": "node_visitor.generic_visit(node)"}, {"intent": "A Finder for sys.path and package __path__ attributes.", "snippet": "importlib.machinery.PathFinder"}, {"intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below . `mode` must be ' r ' or 'rb ' when the file must be opened for reading , or ' w ' or 'wb ' when the file must be opened for writing .", "snippet": "aifc.open(file, mode=None)"}, {"intent": "Delete all drawings and all turtles from the TurtleScreen .", "snippet": "turtle.clearscreen()"}, {"intent": "Raised to signal an error from the underlying setitimer() or getitimer() implementation.", "snippet": "signal.ItimerError"}, {"intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "snippet": "threading.Timer(interval, function)"}, {"intent": "Execute the code at the named filesystem location and return the resulting module globals dictionary . sys.argv [ 0 ] is updated with the value of `file_path` and sys.modules [ __name__ ] is updated with a temporary module object for the module being executed .", "snippet": "runpy.run_path(file_path)"}, {"intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "snippet": "ssl.RAND_pseudo_bytes(num)"}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(passwd='', acct='')"}, {"intent": "Close the dumbdbm database .", "snippet": "dumbdbm.close()"}, {"intent": "Return a new view of the underlying mapping \u2019 s items ( ( key , value ) pairs ) .", "snippet": "mapping_proxy_type.items()"}, {"intent": "This method adapts `obj` to a ctypes type .", "snippet": "_c_data.from_param(obj)"}, {"intent": "Possible values for the mode parameter to the spawn* family of functions.", "snippet": "os.P_DETACH"}, {"intent": "Portable popen ( ) interface . With arguments `cmd`, `bufsize`.", "snippet": "platform.popen(cmd, bufsize=-1)"}, {"intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "snippet": "traceback.format_exception(etype, value, tb, limit=None)"}, {"intent": "This method for the Stats class prints a list of all function that were called by the indicated function . With arguments `*restrictions`.", "snippet": "stats.print_callees(*restrictions)"}, {"intent": "Set or return the drawing `delay` in milliseconds .", "snippet": "turtle.delay(delay=None)"}, {"intent": "The line corresponding to pos (may be None).", "snippet": "system_random.lineno"}, {"intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface . The StreamWriter may implement different error handling schemes by providing the `errors` keyword argument .", "snippet": "codecs.StreamWriter(stream, errors='strict')"}, {"intent": "Returns a list of strings ready for printing .", "snippet": "traceback_exception.format()"}, {"intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `_subtype` sets the subtype of the message ; it defaults to rfc822 . Optional `policy` argument defaults to compat32 .", "snippet": "email.mime.message.MIMEMessage(_msg, _subtype='rfc822', policy=compat32)"}, {"intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "snippet": "socket.CMSG_SPACE(length)"}, {"intent": "Ignore cookies in Set-Cookie: headers that have names starting with '$'.", "snippet": "DefaultCookiePolicy.strict_ns_set_initial_dollar"}, {"intent": "Called when the transport \u2019 s buffer goes over the high watermark .", "snippet": "BaseProtocol.pause_writing()"}, {"intent": "Destination address required", "snippet": "errno.EDESTADDRREQ"}, {"intent": "Return a list of all the message \u2019 s field values .", "snippet": "email_message.values()"}, {"intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "snippet": "py_zip_file.writepy(pathname, basename='')"}, {"intent": "Interrupted system call.", "snippet": "errno.EINTR"}, {"intent": "Group has execute permission.", "snippet": "stat.S_IXGRP"}, {"intent": "Create a Header instance from a sequence of pairs as returned by decode_header ( ) . With arguments `decoded_seq`.", "snippet": "email.header.make_header(decoded_seq)"}, {"intent": "Returns True if the specified `item` is present in the tree .", "snippet": "widget.exists(item)"}, {"intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "snippet": "test_case.assertTupleEqual(first, second, msg=None)"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`.", "snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE)"}, {"intent": "Set angle measurement units , i.e .", "snippet": "turtle.degrees()"}, {"intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "snippet": "os.open(path, flags, mode=0o777)"}, {"intent": "Exception raised by Connection.recv_bytes_into() when the supplied buffer object is too small for the message read.", "snippet": "multiprocessing.BufferTooShort"}, {"intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `wbits` parameter controls the size of the history buffer ( or the \u201c window size \u201d ) , and what header and trailer format is expected .", "snippet": "zlib.decompressobj(wbits=MAX_WBITS)"}, {"intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "snippet": "xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)"}, {"intent": "Formats the `record` and sends it to the specified addressees .", "snippet": "smtp_handler.emit(record)"}, {"intent": "Return a string describing the class of the operand . With arguments `context`.", "snippet": "decimal.number_class(context=None)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `restval`.", "snippet": "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)"}, {"intent": "This read-only variable is true when the ctypes data instance has allocated the memory block itself, false otherwise.", "snippet": "_c_data._b_needsfree_"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "snippet": "bz2.BZ2File(filename, mode='r')"}, {"intent": "Clear the regular expression cache .", "snippet": "re.purge()"}, {"intent": "Load a set of default \u201c certification authority \u201d ( CA ) certificates from default locations .", "snippet": "SSLContext.load_default_certs()"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `dir_fd`.", "snippet": "os.access(path, mode, dir_fd=None)"}, {"intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "snippet": "frozenset(iterable)"}, {"intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "snippet": "shutil.rmtree(path, ignore_errors=False)"}, {"intent": "`policy` is an object implementing the CookiePolicy interface . With arguments `filename`, `delayload`.", "snippet": "http.cookiejar.FileCookieJar(filename, delayload=None, policy=None)"}, {"intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "snippet": "subprocess.check_call(args, stdin=None, stderr=None)"}, {"intent": "Register a `function` that can respond to XML-RPC requests .", "snippet": "CGIXMLRPCRequestHandler.register_function(function=None)"}, {"intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "snippet": "decimal.quantize(exp, rounding=None)"}, {"intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . mangle_from_ defaults to the value of the mangle_from_ setting of the `policy` ( which is True for the compat32 policy and False for all others ) .", "snippet": "email.generator.Generator(outfp, policy=None)"}, {"intent": "Return the natural logarithm of the absolute value of the Gamma function at `x` .", "snippet": "math.lgamma(x)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used .", "snippet": "email.utils.formatdate(timeval=None)"}, {"intent": "Create a new compressor object .", "snippet": "bz2.BZ2Compressor()"}, {"intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `newline`.", "snippet": "Path.open(newline=None)"}, {"intent": "Flushes and resets the codec buffers used for keeping state .", "snippet": "stream_writer.reset()"}, {"intent": "An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect.", "snippet": "datetime.date"}, {"intent": "Set the sys.setswitchinterval ( ) to the given `interval` .", "snippet": "test.support.setswitchinterval(interval)"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, limit=None)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "snippet": "logging.handlers.RotatingFileHandler(filename, maxBytes=0)"}, {"intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "snippet": "directory.add_file(file, language=None)"}, {"intent": "Play the SystemHand sound.", "snippet": "winsound.MB_ICONHAND"}, {"intent": "Pull the pen down \u2013 drawing when moving .", "snippet": "turtle.down()"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, tofile=b'')"}, {"intent": "Return True if the message \u2019 s payload is a list of sub-EmailMessage objects , otherwise return False .", "snippet": "email_message.is_multipart()"}, {"intent": "An async generator can be annotated by the generic type AsyncGenerator [ YieldType , SendType ] . With arguments `AsyncIteratorT_co`.", "snippet": "typing.AsyncGenerator(AsyncIteratorT_co)"}, {"intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` . With arguments `                     line_buffering`.", "snippet": "text_io_wrapper.reconfigure(encoding, errors, newline,                      line_buffering)"}, {"intent": "A base transport for read-only connections . With arguments `BaseTransport`.", "snippet": "asyncio.ReadTransport(BaseTransport)"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `allow_nan`.", "snippet": "json.dumps(obj, **kw, allow_nan=True)"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `ssl_handshake_timeout`.", "snippet": "loop.create_unix_server(protocol_factory, ssl_handshake_timeout=None)"}, {"intent": "Rotate the deque `n` steps to the right .", "snippet": "deque.rotate(n=1)"}, {"intent": "A dictionary mapping names to descriptors for nested functions and classes.", "snippet": "Class.children"}, {"intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "snippet": "ConfigParser.BOOLEAN_STATES"}, {"intent": "Exception raised when errors occur attempting to parse a file.", "snippet": "configparser.ParsingError"}, {"intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket . The `ancbufsize` argument sets the size in bytes of the internal buffer used to receive the ancillary data ; it defaults to 0 , meaning that no ancillary data will be received .", "snippet": "socket.recvmsg(bufsize, ancbufsize)"}, {"intent": "Return whether the path is absolute or not .", "snippet": "PurePath.is_absolute()"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect_right(a, x, hi=len(a))"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "snippet": "timeit.repeat(timer=<default timer>)"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . If `allow_none` is true , the Python constant None will be translated into XML ; the default behaviour is for None to raise a TypeError . With arguments `uri`.", "snippet": "xmlrpc.client.ServerProxy(uri, allow_none=False)"}, {"intent": "Remote address changed", "snippet": "errno.EREMCHG"}, {"intent": "A generator can be annotated by the generic type Generator [ YieldType , SendType , ReturnType ] . With arguments `IteratorT_co`, `GenericT_co`, `T_contra`, `V_co`.", "snippet": "typing.Generator(IteratorT_co, GenericT_co, T_contra, V_co)"}, {"intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "snippet": "faulthandler.register(signum, all_threads=True, chain=False)"}, {"intent": "Sends the response header only , used for the purposes when 100 Continue response is sent by the server to the client . The headers not buffered and sent directly the output stream.If the `message` is not specified , the HTTP message corresponding the response `code` is sent .", "snippet": "base_http_request_handler.send_response_only(code, message=None)"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs)"}, {"intent": "Delete the message corresponding to `key` from the mailbox .", "snippet": "mailbox.discard(key)"}, {"intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "snippet": "turtle.mode(mode=None)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "snippet": "email.utils.formatdate(localtime=False, usegmt=False)"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file .", "snippet": "py_compile.compile(file)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `encoding` is not None , it is used to open the file with that encoding .", "snippet": "logging.handlers.RotatingFileHandler(filename, encoding=None)"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)"}, {"intent": "In BytesIO , this is the same as readinto ( ) . With arguments `b`.", "snippet": "bytes_io.readinto1(b)"}, {"intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . With arguments `methodname`.", "snippet": "xmlrpc.client.dumps(params, methodname=None, methodresponse=None)"}, {"intent": "Standard output stream (StreamReader) or None if the process was created with stdout=None.", "snippet": "process.stdout"}, {"intent": "A string representation of the interface with the mask in prefix notation.", "snippet": "i_pv4_interface.with_prefixlen"}, {"intent": "select.poll()-based selector.", "snippet": "selectors.PollSelector"}, {"intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`, `kwds`.", "snippet": "pool.apply_async(func, args, kwds)"}, {"intent": "All arguments are optional . With arguments `hour`, `second`.", "snippet": "datetime.time(hour=0, second=0)"}, {"intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "snippet": "msilib.Binary(filename)"}, {"intent": "Saves the specified `key` , and all its subkeys to the specified file . `file_name` is the name of the file to save registry data to .", "snippet": "winreg.SaveKey(key, file_name)"}, {"intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')"}, {"intent": "Close the connection .", "snippet": "Telnet.close()"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `excludes` is a list of module names to exclude from the analysis .", "snippet": "modulefinder.ModuleFinder(path=None, excludes=)"}, {"intent": "Create a memoryview that references `obj` .", "snippet": "memoryview(obj)"}, {"intent": "Return a list of frame records for the caller \u2019 s stack . With arguments `context`.", "snippet": "inspect.stack(context=1)"}, {"intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "snippet": "secrets.token_urlsafe(nbytes=None)"}, {"intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . ( This argument is used to support displaying `source` for modules found in zipfiles or other non-filesystem import sources ) . With arguments `lineno`.", "snippet": "warnings.warn_explicit(message, category, filename, lineno, source=None)"}, {"intent": "Returns the type of the attribute `name` , which is normally 'CDATA ' .", "snippet": "Attributes.getType(name)"}, {"intent": "Adds the specified `filter` filter to this handler .", "snippet": "queue_listener.addFilter(filter)"}, {"intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "snippet": "email.headerregistry.Group(display_name=None, addresses=None)"}, {"intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT))"}, {"intent": "Create a pipe with `flags` set atomically .", "snippet": "os.pipe2(flags)"}, {"intent": "The operation has exceeded the given deadline.", "snippet": "asyncio.TimeoutError"}, {"intent": "Return the namespace bound to this name .", "snippet": "symbol.get_namespace()"}, {"intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`, `stdout`.", "snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdout=subprocess.PIPE)"}, {"intent": "Event port.", "snippet": "stat.S_IFPORT"}, {"intent": "Put `item` into the queue .", "snippet": "Queue.put(item)"}, {"intent": "When True, whitespace immediately following the delimiter is ignored.", "snippet": "Dialect.skipinitialspace"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `check_circular`.", "snippet": "json.dumps(obj, **kw, check_circular=True)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `ignoredirs` is a list of directories whose modules or packages should be ignored .", "snippet": "trace.Trace(ignoredirs=())"}, {"intent": "Return the remote address to which the socket is connected .", "snippet": "socket.getpeername()"}, {"intent": "Locks the specified bytes.", "snippet": "msvcrt.LK_RLCK"}, {"intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "snippet": "bytearray.rpartition(sep)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ThreadPoolExecutor(max_workers=None, initargs=())"}, {"intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "snippet": "config_parser.write(fileobject)"}, {"intent": "Get the completer function , or None if no completer function has been set .", "snippet": "readline.get_completer()"}, {"intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "snippet": "importlib.import_module(name, package=None)"}, {"intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "snippet": "msvcrt.open_osfhandle(handle, flags)"}, {"intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "snippet": "xmlrpc.client.dumps(params, methodresponse=None, encoding=None)"}, {"intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "snippet": "os.spawnl(mode, path)"}, {"intent": "Receive data from the socket . See the Unix manual page recv ( 2 ) for the meaning of the optional argument `flags` ; it defaults to zero . With arguments `bufsize`.", "snippet": "socket.recvfrom(bufsize, flags)"}, {"intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "snippet": "stream_reader.readline(size)"}, {"intent": "Send `password` , response includes message count and mailbox size .", "snippet": "POP3.pass_(password)"}, {"intent": "Run the tests associated with this suite without collecting the result .", "snippet": "test_suite.debug()"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')"}, {"intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "snippet": "ctypes.DllCanUnloadNow()"}, {"intent": "Enter post-mortem debugging of the given `traceback` object .", "snippet": "pdb.post_mortem()"}, {"intent": "Set \u201c `info` \u201d to info , which should be a string .", "snippet": "maildir_message.set_info(info)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `options`.", "snippet": "doctest.Example(source, want, lineno=0, options=None)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "snippet": "turtle.shapetransform(t12=None)"}, {"intent": "The maximum length of any line in the serialized output, not counting the end of line character(s).", "snippet": "policy.max_line_length"}, {"intent": "Time of last modification.", "snippet": "TarInfo.mtime"}, {"intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "snippet": "os.R_OK"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . `keyfile` and `certfile` are a legacy alternative to context \u2013 they can point to PEM-formatted private key and certificate chain files ( respectively ) for the SSL connection .", "snippet": "ftplib.FTP_TLS(certfile=None)"}, {"intent": "A SelectorKey is a namedtuple used to associate a file object to its underlying file descriptor, selected event mask and attached data.", "snippet": "selectors.SelectorKey"}, {"intent": "Host is down", "snippet": "errno.EHOSTDOWN"}, {"intent": "The version string of the OpenSSL library loaded by the interpreter:", "snippet": "ssl.OPENSSL_VERSION"}, {"intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "snippet": "io.TextIOWrapper(buffer, write_through=False)"}, {"intent": "Return the current process id .", "snippet": "os.getpid()"}, {"intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "snippet": "NNTP.body(file=None)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec_set=None)"}, {"intent": "Call the set_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "snippet": "email_message.set_content(*args, **kw, content_manager=None)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "snippet": "logging.handlers.RotatingFileHandler(filename, delay=False)"}, {"intent": "Open a gdbm database and return a gdbm object . The `filename` argument is the name of the database file . The optional `flag` argument can be : The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "snippet": "dbm.gnu.open(filename, flag, mode)"}, {"intent": "Close and skip to the end of the chunk .", "snippet": "chunk.close()"}, {"intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "snippet": "TarFile.list(verbose=True, members=None)"}, {"intent": "Return the number of bytes currently in the memory buffer.", "snippet": "memory_bio.pending"}, {"intent": "Abstract a key/value pair, which has some RFC 2109 attributes.", "snippet": "http.cookies.Morsel"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted .", "snippet": "html_diff.make_table(fromlines, tolines)"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `parse_int`.", "snippet": "json.loads(s, **kw, parse_int=None)"}, {"intent": "Contains a tuple of the form (host, port) referring to the client\u2019s address.", "snippet": "base_http_request_handler.client_address"}, {"intent": "Invalidate the internal caches of finders stored at sys.meta_path .", "snippet": "importlib.invalidate_caches()"}, {"intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "snippet": "element_tree.find(match, namespaces=None)"}, {"intent": "Return True if `path` refers to an existing path .", "snippet": "os.path.lexists(path)"}, {"intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris .", "snippet": "platform.platform(aliased=0)"}, {"intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)"}, {"intent": "Remove a file descriptor being tracked by a polling object . Just like the register ( ) method , `fd` can be an integer or an object with a fileno ( ) method that returns an integer .", "snippet": "poll.unregister(fd)"}, {"intent": "HTTP protocol version used by server.", "snippet": "HTTPResponse.version"}, {"intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "snippet": "window.instr(y, x, n)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "snippet": "os.execle(path, arg0, arg1, env)"}, {"intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`, `allow_fragments`.", "snippet": "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)"}, {"intent": "Selects SSL version 2 as the channel encryption protocol.", "snippet": "ssl.PROTOCOL_SSLv2"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "snippet": "os.execlp(file, arg0, arg1)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `parse_int` , if specified , will be called with the string of every JSON int to be decoded . With arguments `**kw`.", "snippet": "json.load(fp, **kw, cls=None, parse_int=None)"}, {"intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "snippet": "mimetypes.MimeTypes(filenames=())"}, {"intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extract(member, pwd=None)"}, {"intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.XML(text, parser=None)"}, {"intent": "Return a DOMEventStream from the given input . `stream_or_string` may be either a file name , or a file-like object . `parser` , if given , must be an XMLReader object . With arguments `bufsize`.", "snippet": "xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)"}, {"intent": "Retrieves the contents of `url` and places it in `filename` .", "snippet": "ur_lopener.retrieve(url, filename=None)"}, {"intent": "Read until newline or EOF and return a single str . If `size` is specified , at most size characters will be read .", "snippet": "text_io_base.readline(size=-1)"}, {"intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "snippet": "coverage_results.write_results(show_missing=True, summary=False, coverdir=None)"}, {"intent": "Return the code object for a module , or None if the module does not have a code object ( as would be the case , for example , for a built-in module ) . With arguments `fullname`.", "snippet": "inspect_loader.get_code(fullname)"}, {"intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "snippet": "difflib.SequenceMatcher(autojunk=True)"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler . If `logRequests` is true ( the default ) , requests will be logged ; setting this parameter to false will turn off logging .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "snippet": "timeit.timeit(setup='pass')"}, {"intent": "Calling this with a true value for `flag` ( the default ) will cause Expat to call the ExternalEntityRefHandler with None for all arguments to allow an alternate DTD to be loaded .", "snippet": "xmlparser.UseForeignDTD(flag)"}, {"intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "snippet": "re.IGNORECASE"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, max_num_fields=None)"}, {"intent": "An object that wraps OS processes created by the create_subprocess_exec() and create_subprocess_shell() functions.", "snippet": "asyncio.subprocess.Process"}, {"intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "snippet": "tempfile.mkdtemp(dir=None)"}, {"intent": "Remove ( delete ) the file `path` . With arguments `dir_fd`.", "snippet": "os.remove(path, dir_fd=None)"}, {"intent": "Run command with arguments and return its output . With arguments `args`, `stderr`.", "snippet": "subprocess.check_output(args, stderr=None)"}, {"intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "snippet": "traceback_exception.format(chain=True)"}, {"intent": "Set the current ContentHandler . With arguments `handler`.", "snippet": "XMLReader.setContentHandler(handler)"}, {"intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "snippet": "socket.ioctl(control, option)"}, {"intent": "Assert that the mock was called at least once .", "snippet": "mock.assert_called()"}, {"intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "snippet": "bytearray.translate(table)"}, {"intent": "Duplicate file descriptor `fd` to `fd2` , closing the latter first if necessary .", "snippet": "os.dup2(fd, fd2)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)"}, {"intent": "The name of the module the loader can handle.", "snippet": "file_loader.name"}, {"intent": "Group has read permission.", "snippet": "stat.S_IRGRP"}, {"intent": "Read until newline or EOF and return a single str .", "snippet": "text_io_base.readline()"}, {"intent": "Remove element `elem` from the set if it is present .", "snippet": "set.discard(elem)"}, {"intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer . The constructor creates a BufferedReader for the given readable raw stream and `buffer_size` .", "snippet": "io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)"}, {"intent": "Test whether self and `other` have the same exponent or whether both are NaN .", "snippet": "decimal.same_quantum(other)"}, {"intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "snippet": "smtp_channel.mailfrom"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "snippet": "gettext.translation(domain, languages=None)"}, {"intent": "Set the `handler` for signal `signalnum` to the function handler .", "snippet": "signal.signal(signalnum, handler)"}, {"intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.XMLID(text, parser=None)"}, {"intent": "Acquire a semaphore . When invoked with a `timeout` other than None , it will block for at most timeout seconds .", "snippet": "semaphore.acquire(timeout=None)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "snippet": "calendar.calendar(year, l=1, c=6)"}, {"intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.Unpickler(file, encoding=\"ASCII\")"}, {"intent": "A Signature object represents the call signature of a function and its return annotation .", "snippet": "inspect.Signature()"}, {"intent": "Return a StreamRecoder instance , a wrapped version of `file` which provides transparent transcoding . Data written to the wrapped file is decoded according to the given `data_encoding` and then written to the original file as bytes using `file_encoding` .", "snippet": "codecs.EncodedFile(file, data_encoding)"}, {"intent": "A generic version of `collections.Counter` . With arguments `DictT`, `int`.", "snippet": "typing.Counter(collections.Counter, DictT, int)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "snippet": "profile.Profile(timer=None, builtins=True)"}, {"intent": "A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing.", "snippet": "BrokenPipeError"}, {"intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`.", "snippet": "locale.format(format, val, grouping=False)"}, {"intent": "Compares the values numerically with their sign ignored . With arguments `x`, `y`.", "snippet": "context.max_mag(x, y)"}, {"intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "snippet": "codecs.BOM_BE"}, {"intent": "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.", "snippet": "token.tok_name"}, {"intent": "Sends and logs a complete error reply to the client . The numeric `code` specifies the HTTP error code , with `message` as an optional , short , human readable description of the error .", "snippet": "base_http_request_handler.send_error(code, message=None)"}, {"intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`, `default`.", "snippet": "stream_writer.get_extra_info(name, default=None)"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "snippet": "uuid.UUID(hex=None, bytes_le=None)"}, {"intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "snippet": "turtle.shapesize()"}, {"intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "snippet": "importlib.util.spec_from_loader(name, loader, origin=None)"}, {"intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once .", "snippet": "zlib.decompressobj()"}, {"intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "snippet": "codecs.BOM_UTF8"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)"}, {"intent": "Return True if the argument is a finite number , and False if the argument is an infinity or a NaN .", "snippet": "decimal.is_finite()"}, {"intent": "Return a month \u2019 s calendar as an HTML table . If `withyear` is true the year will be included in the header , otherwise just the month name will be used . With arguments `theyear`, `themonth`.", "snippet": "html_calendar.formatmonth(theyear, themonth, withyear=True)"}, {"intent": "A ParameterizedMIMEHeader class that handles the Content-Type header.", "snippet": "email.headerregistry.ContentTypeHeader"}, {"intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "snippet": "dataclasses.field(default=MISSING, repr=True)"}, {"intent": "Run doctest.testmod ( ) on the given `module` . If `verbosity` is None , doctest.testmod ( ) is run with verbosity set to verbose .", "snippet": "test.support.run_doctest(module, verbosity=None)"}, {"intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "snippet": "random.SystemRandom(seed)"}, {"intent": "Compares the values numerically with their sign ignored . With arguments `x`, `y`.", "snippet": "context.min_mag(x, y)"}, {"intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "snippet": "decimal.to_integral_value(context=None)"}, {"intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)"}, {"intent": "The FileSelectBox is similar to the standard Motif(TM) file-selection box.", "snippet": "tkinter.tix.FileSelectBox"}, {"intent": "Push the argument onto the token stack . With arguments `str`.", "snippet": "shlex.push_token(str)"}, {"intent": "Return the bitwise exclusive or of `a` and `b` .", "snippet": "operator.__xor__(a, b)"}, {"intent": "Three locking mechanisms are used\u2014dot locking and , if available , the flock ( ) and lockf ( ) system calls .", "snippet": "mh.lock()"}, {"intent": "Display `url` using the browser handled by this controller .", "snippet": "controller.open(url)"}, {"intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "snippet": "logging.handlers.DatagramHandler(host, port)"}, {"intent": "Send an RFC 822-style `header` to the server .", "snippet": "HTTPConnection.putheader(header)"}, {"intent": "Uses an incremental decoder to iteratively decode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "snippet": "codecs.iterdecode(iterator, encoding, **kwargs)"}, {"intent": "Return the number of audio frames in the file .", "snippet": "aifc.getnframes()"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "snippet": "window.insnstr(y, x, str, n, attr)"}, {"intent": "The internal block size of the hash algorithm in bytes.", "snippet": "hash.block_size"}, {"intent": "Resolve the system identifier of an entity and return either the system identifier to read from as a string , or an InputSource to read from . The default implementation returns `systemId` . With arguments `publicId`.", "snippet": "EntityResolver.resolveEntity(publicId, systemId)"}, {"intent": "Update the set , keeping only elements found in it and all others . With arguments `*others`.", "snippet": "set.intersection_update(*others)"}, {"intent": "Return the currently running task or None . If `loop` is None , the get_event_loop ( ) function is used to get the current loop .", "snippet": "task.current_task(loop=None)"}, {"intent": "Return a StreamRecoder instance , a wrapped version of `file` which provides transparent transcoding . Data written to the wrapped file is decoded according to the given `data_encoding` and then written to the original file as bytes using `file_encoding` .", "snippet": "codecs.EncodedFile(file, data_encoding, file_encoding=None)"}, {"intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "snippet": "bz2.BZ2Compressor(compresslevel=9)"}, {"intent": "Return True if the Tarinfo object is a regular file .", "snippet": "TarInfo.isfile()"}, {"intent": "A string representing the (local or global) root, if any:", "snippet": "PurePath.root"}, {"intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . The blocksize argument defaults to 8192. `callback` is an optional single parameter callable that is called on each block of data after it is sent .", "snippet": "FTP.storbinary(cmd, fp, callback=None)"}, {"intent": "Get the character stream for this input source .", "snippet": "InputSource.getCharacterStream()"}, {"intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "snippet": "fractions.Fraction(denominator=1)"}, {"intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "snippet": "inspect.Parameter(name, kind)"}, {"intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"}, {"intent": "Forking and threading versions of each type of server can be created using these mix-in classes.", "snippet": "socketserver.ThreadingMixIn"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "snippet": "urllib.parse.quote(string, encoding=None, errors=None)"}, {"intent": "Return True if the file descriptor `fd` is open and connected to a tty ( -like ) device , else False .", "snippet": "os.isatty(fd)"}, {"intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "snippet": "code.interact(readfunc=None, local=None)"}, {"intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . If `altinstall` is set , then pipX will not be installed .", "snippet": "ensurepip.bootstrap(root=None, altinstall=False)"}, {"intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options . With arguments `host`.", "snippet": "http.client.HTTPSConnection(host, context=None)"}, {"intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "snippet": "os.rename(src, dst, src_dir_fd=None)"}, {"intent": "Text is an alias for str.", "snippet": "typing.Text"}, {"intent": "This method closes the open mixer device file .", "snippet": "oss_mixer_device.close()"}, {"intent": "Return the number of CPUs in the system .", "snippet": "os.cpu_count()"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "snippet": "__import__(name, globals=None, fromlist=())"}, {"intent": "Return a string with information about a stack entry , identified by a ( frame , lineno ) tuple : With arguments `frame_lineno`, `lprefix`.", "snippet": "bdb.format_stack_entry(frame_lineno, lprefix=': ')"}, {"intent": "This is a factory method which allows subclasses to define the precise type of socket they want .", "snippet": "socket_handler.makeSocket()"}, {"intent": "Reset the encoder to the initial state .", "snippet": "incremental_encoder.reset()"}, {"intent": "Return number of entries in the undobuffer .", "snippet": "turtle.undobufferentries()"}, {"intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_hostname`.", "snippet": "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)"}, {"intent": "Return the data associated with `pathname` .", "snippet": "zipimporter.get_data(pathname)"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `replace_paths` is a list of ( oldpath , newpath ) tuples that will be replaced in module paths .", "snippet": "modulefinder.ModuleFinder(path=None, replace_paths=)"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "snippet": "gettext.install(domain, localedir=None, codeset=None)"}, {"intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent .", "snippet": "socket.sendfile(file)"}, {"intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "snippet": "email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None)"}, {"intent": "Returns the name of the tab element at position `x` , `y` , or the empty string if none .", "snippet": "widget.identify(x, y)"}, {"intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "snippet": "shlex.error_leader(infile=None)"}, {"intent": "Actually processes the `request` by instantiating RequestHandlerClass and calling its handle ( ) method . With arguments `client_address`.", "snippet": "base_server.finish_request(request, client_address)"}, {"intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "snippet": "test_case.assertTupleEqual(first, second)"}, {"intent": "Raised by methods with a timeout when the timeout expires.", "snippet": "multiprocessing.TimeoutError"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . If `doraise` is true , a PyCompileError is raised when an error is encountered while compiling file .", "snippet": "py_compile.compile(file, cfile=None, doraise=False)"}, {"intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` . With arguments `target`.", "snippet": "path_finder.find_spec(fullname, path=None, target=None)"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "bytearray.split(maxsplit=-1)"}, {"intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , moving the line from position x right by one character .", "snippet": "window.insch(y, x, ch, attr)"}, {"intent": "\u201cstore\u201d actions are additionally listed here.", "snippet": "Option.STORE_ACTIONS"}, {"intent": "Name of the target file name, which is only present in TarInfo objects of type LNKTYPE and SYMTYPE.", "snippet": "TarInfo.linkname"}, {"intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "snippet": "poll.register(fd)"}, {"intent": "A list of strings representing the file suffixes for optimized bytecode modules.", "snippet": "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"}, {"intent": "Limits on the number of entries represented for the named object type.", "snippet": "Repr.maxfrozenset"}, {"intent": "Create a FIFO ( a named pipe ) named `path` with numeric `mode` mode .", "snippet": "os.mkfifo(path)"}, {"intent": "Return a message object structure tree from an open file object . This is equivalent to Parser ( ) .parse ( `fp` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "snippet": "email.message_from_file(fp, _class=None)"}, {"intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "snippet": "threading.Timer(interval, function, kwargs=None)"}, {"intent": "Called each time around the asynchronous loop to determine whether a channel \u2019 s socket should be added to the list on which write events can occur .", "snippet": "dispatcher.writable()"}, {"intent": "Set blocking or non-blocking mode of the socket : if `flag` is false , the socket is set to non-blocking , else to blocking mode .", "snippet": "socket.setblocking(flag)"}, {"intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "snippet": "bytearray.maketrans(from, to)"}, {"intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "snippet": "imaplib.IMAP4(port=IMAP4_PORT)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "snippet": "doctest.DocTestSuite(tearDown=None)"}, {"intent": "Represents the C float datatype.", "snippet": "ctypes.c_float"}, {"intent": "Limits on the number of entries represented for the named object type.", "snippet": "Repr.maxlist"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stderr=None)"}, {"intent": "This class is the low-level building block of the module . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "snippet": "xml.etree.ElementTree.XMLParser(encoding=None)"}, {"intent": "Creates a Calendar object .", "snippet": "calendar.Calendar()"}, {"intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "snippet": "window.echochar(ch)"}, {"intent": "Wake up all threads waiting on this condition .", "snippet": "condition.notify_all()"}, {"intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object . With arguments `msg`.", "snippet": "test_case.assertIsNot(first, second, msg=None)"}, {"intent": "A generic version of collections.abc.Container .", "snippet": "typing.Container()"}, {"intent": "This method serves a similar purpose as __getnewargs_ex__ ( ) , but supports only positional arguments .", "snippet": "object.__getnewargs__()"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler . The `allow_none` and `encoding` parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, encoding=None)"}, {"intent": "Convert a 32-bit packed IPv4 address ( a bytes-like object four bytes in length ) to its standard dotted-quad string representation ( for example , \u2018 123.45.67.89 \u2019 ) . With arguments `packed_ip`.", "snippet": "socket.inet_ntoa(packed_ip)"}, {"intent": "Same as article ( ) , but sends a HEAD command .", "snippet": "NNTP.head()"}, {"intent": "Returns True if this network is a supernet of `other` .", "snippet": "i_pv4_network.supernet_of(other)"}, {"intent": "Indicates that an application on 64-bit Windows should operate on the 32-bit registry view.", "snippet": "winreg.KEY_WOW64_32KEY"}, {"intent": "Exception raised in case a method or database API was used which is not supported by the database, e.g.", "snippet": "sqlite3.NotSupportedError"}, {"intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "snippet": "tokenize.tokenize(readline)"}, {"intent": "Unpacks and returns a variable length opaque data string , similarly to unpack_string ( ) .", "snippet": "Unpacker.unpack_opaque()"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "snippet": "zlib.compressobj()"}, {"intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "snippet": "ur_lopener.retrieve(url, data=None)"}, {"intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`.", "snippet": "Path.open(mode='r')"}, {"intent": "POSIX.1-2001 (pax) format.", "snippet": "tarfile.PAX_FORMAT"}, {"intent": "Option for create_default_context() and SSLContext.load_default_certs().", "snippet": "Purpose.SERVER_AUTH"}, {"intent": "If the character set must be encoded before it can be used in an email header, this attribute will be set to Charset.QP (for quoted-printable), Charset.BASE64 (for base64 encoding), or Charset.SHORTEST for the shortest of QP or BASE64 encoding.", "snippet": "charset.header_encoding"}, {"intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "snippet": "r_lock.acquire(blocking=True, timeout=-1)"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "snippet": "os.walk(top, onerror=None)"}, {"intent": "Remove a child node . `oldChild` must be a child of this node ; if not , ValueError is raised .", "snippet": "Node.removeChild(oldChild)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `prefix`, `dir`.", "snippet": "tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None)"}, {"intent": "True if the domain explicitly specified by the server began with a dot ('.", "snippet": "Cookie.domain_initial_dot"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")"}, {"intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . If not defined , `globals` and `locals` default to empty dictionaries . With arguments `cmd`.", "snippet": "trace.runctx(cmd, locals=None)"}, {"intent": "If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard output handle for the process.", "snippet": "startupinfo.hStdOutput"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "snippet": "bytes.rsplit(sep=None, maxsplit=-1)"}, {"intent": "Send data to the socket . Return the number of `bytes` sent . The optional `flags` argument has the same meaning as for recv ( ) above . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "snippet": "socket.sendto(bytes, flags, address)"}, {"intent": "Return the value of the environment variable TERM , as a bytes object , truncated to 14 characters .", "snippet": "curses.termname()"}, {"intent": "This constructor should always be called with keyword arguments . `args` is the argument tuple for the target invocation .", "snippet": "threading.Thread(args=())"}, {"intent": "Close the write end of the stream after the buffered write data is flushed .", "snippet": "stream_writer.write_eof()"}, {"intent": "The scheduler class defines a generic interface to scheduling events . It needs two functions to actually deal with the \u201c outside world \u201d \u2014 `timefunc` should be callable without arguments , and return a number ( the \u201c time \u201d , in any units whatsoever ) . The `delayfunc` function should be callable with one argument , compatible with the output of timefunc , and should delay that many time units .", "snippet": "sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)"}, {"intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "snippet": "email_message.get_charsets(failobj=None)"}, {"intent": "Returns a new instance of the FileHandler class . With arguments `filename`.", "snippet": "logging.FileHandler(filename)"}, {"intent": "Length of the network prefix, in bits.", "snippet": "i_pv4_network.prefixlen"}, {"intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `header_enc` and `body_enc` is either Charset.QP for quoted-printable , Charset.BASE64 for base64 encoding , Charset.SHORTEST for the shortest of quoted-printable or base64 encoding , or None for no encoding .", "snippet": "email.charset.add_charset(charset, body_enc=None)"}, {"intent": "Return a copy ( \u201c clone \u201d ) of the hmac object .", "snippet": "HMAC.copy()"}, {"intent": "A legacy wrapper around find_spec ( ) . With arguments `fullname`, `path`.", "snippet": "path_finder.find_module(fullname, path=None)"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "snippet": "warnings.simplefilter(action, lineno=0)"}, {"intent": "Translate an Internet `port` number and protocol name to a service name for that service . With arguments `protocolname`.", "snippet": "socket.getservbyport(port, protocolname)"}, {"intent": "A bounded semaphore object : a close analog of threading.BoundedSemaphore .", "snippet": "multiprocessing.BoundedSemaphore()"}, {"intent": "Total size of memory blocks in bytes in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot.", "snippet": "statistic_diff.size"}, {"intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "snippet": "binascii.a2b_uu(string)"}, {"intent": "The CSS class for the table head for the whole year (used by formatyear()).", "snippet": "html_calendar.cssclass_year_head"}, {"intent": "The stateless encoding and decoding functions.", "snippet": "codec_info.decode"}, {"intent": "Returns True if the named `name` is considered a resource .", "snippet": "resource_reader.is_resource(name)"}, {"intent": "This concrete Policy is the backward compatibility policy . With arguments `**kw`.", "snippet": "email.policy.Compat32(**kw)"}, {"intent": "A class to handle opening of HTTPS URLs .", "snippet": "urllib.request.HTTPSHandler()"}, {"intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "snippet": "Decompress.decompress(data, max_length=0)"}, {"intent": "Change owner `user` and/or `group` of the given `path` .", "snippet": "shutil.chown(path, group=None)"}, {"intent": "A placeholder method which can be overridden in third party implementations to pre-install packages in the virtual environment or perform other post-creation steps . With arguments `context`.", "snippet": "env_builder.post_setup(context)"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "snippet": "math.isclose(a, b, abs_tol=0.0)"}, {"intent": "The type of user-defined functions and functions created by lambda  expressions.", "snippet": "types.LambdaType"}, {"intent": "This class attribute gives the exception raised by the test method.", "snippet": "test_case.failureException"}, {"intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "snippet": "decimal.to_integral_exact(rounding=None)"}, {"intent": "The value of endpos which was passed to the search() or match() method of a regex object.", "snippet": "Match.endpos"}, {"intent": "Create a file at this given path . If `mode` is given , it is combined with the process \u2019 umask value to determine the file mode and access flags .", "snippet": "Path.touch(mode=0o666)"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions .", "snippet": "os.access(path, mode)"}, {"intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "snippet": "mailbox.Babyl(path, factory=None)"}, {"intent": "Process a single request .", "snippet": "base_server.handle_request()"}, {"intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`, `context`.", "snippet": "decimal.compare_signal(other, context=None)"}, {"intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "snippet": "os.POSIX_FADV_RANDOM"}, {"intent": "Run the command described by `args` . With arguments `stdin`.", "snippet": "subprocess.call(args, stdin=None)"}, {"intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "snippet": "email.utils.parsedate_tz(date)"}, {"intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)"}, {"intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "snippet": "str.strip(chars)"}, {"intent": "A variant of the map ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . When the result becomes ready callback is applied to it , that is unless the call failed , in which case the `error_callback` is applied instead . With arguments `func`, `iterable`, `chunksize`.", "snippet": "pool.map_async(func, iterable, chunksize, callback, error_callback)"}, {"intent": "By default , wake up one thread waiting on this condition , if any . This method wakes up at most `n` of the threads waiting for the condition variable ; it is a no-op if no threads are waiting .", "snippet": "condition.notify(n=1)"}, {"intent": "Return True if the symbol is global .", "snippet": "symbol.is_global()"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data . The `dict_type` is the type used for dictionaries that are read from the plist file .", "snippet": "plistlib.load(fp, use_builtin_types=True, dict_type=dict)"}, {"intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "snippet": "CAN_*"}, {"intent": "Resizes the map and the underlying file , if any . With arguments `newsize`.", "snippet": "mmap.resize(newsize)"}, {"intent": "Return a proxy to `object` which uses a weak reference . `callback` is the same as the parameter of the same name to the ref ( ) function .", "snippet": "weakref.proxy(object, callback)"}, {"intent": "Remove a registered `result` .", "snippet": "unittest.removeResult(result)"}, {"intent": "Wait until notified or until a `timeout` occurs .", "snippet": "condition.wait(timeout=None)"}, {"intent": "Set the description used in the generated HTML documentation . With arguments `server_documentation`.", "snippet": "DocXMLRPCServer.set_server_documentation(server_documentation)"}, {"intent": "Return the signal which caused the process to stop . With arguments `status`.", "snippet": "os.WSTOPSIG(status)"}, {"intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "snippet": "str.isprintable()"}, {"intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`.", "snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE)"}, {"intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance .", "snippet": "chain_map.new_child()"}, {"intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extract(member, path=None, pwd=None)"}, {"intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)"}, {"intent": "Receive data from `sock` into the `buf` buffer .", "snippet": "loop.sock_recv_into(sock, buf)"}, {"intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `flags` specifies the nature of the mapping .", "snippet": "mmap.mmap(fileno, length, flags=MAP_SHARED)"}, {"intent": "The PopupMenu widget can be used as a replacement of the tk_popup command.", "snippet": "tkinter.tix.PopupMenu"}, {"intent": "Creates a tree iterator with the current element as the root .", "snippet": "element.iter()"}, {"intent": "Write back all entries in the cache if the shelf was opened with writeback set to True .", "snippet": "Shelf.sync()"}, {"intent": "Return the clk_id of the thread-specific CPU-time clock for the specified `thread_id` .", "snippet": "time.pthread_getcpuclockid(thread_id)"}, {"intent": "Set the character stream ( a text file ) for this input source . With arguments `charfile`.", "snippet": "InputSource.setCharacterStream(charfile)"}, {"intent": "Decorator for skipping tests on non-IEEE 754 platforms.", "snippet": "@test.support.requires_IEEE_754"}, {"intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "snippet": "textwrap.fill(text, **kwargs)"}, {"intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`, `func`.", "snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` .", "snippet": "NNTP.login(user=None, password=None)"}, {"intent": "Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support server-side SSLSocket connections.", "snippet": "ssl.PROTOCOL_TLS_SERVER"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally . The `memlimit` argument specifies a limit ( in bytes ) on the amount of memory that the decompressor can use .", "snippet": "lzma.LZMADecompressor(memlimit=None)"}, {"intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "snippet": "test_case.assertNotAlmostEqual(first, second, places=7)"}, {"intent": "Return the underlying asyncio transport.", "snippet": "stream_writer.transport"}, {"intent": "Like CHECKED_HASH, the .pyc file includes a hash of the source file content.", "snippet": "pyc_invalidation_mode.UNCHECKED_HASH"}, {"intent": "Return True if the path points to a FIFO ( or a symbolic link pointing to a FIFO ) , False if it points to another kind of file .", "snippet": "Path.is_fifo()"}, {"intent": "This is called in the serve_forever ( ) loop .", "snippet": "base_server.service_actions()"}, {"intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "snippet": "bdb.break_anywhere(frame)"}, {"intent": "True if the end-of-stream marker has been reached.", "snippet": "lzma_decompressor.eof"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getint(section, option, fallback, vars=None)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "snippet": "difflib.unified_diff(a, b, lineterm='\\n')"}, {"intent": "Returns a new instance of the Formatter class . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "snippet": "logging.Formatter(datefmt=None, style='%')"}, {"intent": "This method returns a list of strings , one for each ( non-system ) method supported by the XML-RPC server .", "snippet": "ServerProxy.system.listMethods()"}, {"intent": "List of directories ignored by dircmp by default.", "snippet": "filecmp.DEFAULT_IGNORES"}, {"intent": "This exception is derived from RuntimeError.", "snippet": "RecursionError"}, {"intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`, `ignore_discard`.", "snippet": "FileCookieJar.revert(filename=None, ignore_discard=False)"}, {"intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "snippet": "Match.span(group)"}, {"intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "snippet": "re.match(pattern, string)"}, {"intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program . `shortopts` is the string of option letters that the script wants to recognize , with options that require an argument followed by a colon ( ' : ' ; i.e. , the same format that Unix getopt ( ) uses ) . `longopts` , if specified , must be a list of strings with the names of the long options which should be supported .", "snippet": "getopt.getopt(args, shortopts, longopts=)"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `object_hook`.", "snippet": "json.loads(s, **kw, object_hook=None)"}, {"intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "snippet": "test.support.swap_item(obj, attr, new_val)"}, {"intent": "The version number used to form registry keys on Windows platforms.", "snippet": "sys.winver"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "snippet": "dis.disassemble(code)"}, {"intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "snippet": "Option.callback_kwargs"}, {"intent": "Constructor for an IncrementalEncoder instance . The IncrementalEncoder may implement different error handling schemes by providing the `errors` keyword argument .", "snippet": "codecs.IncrementalEncoder(errors='strict')"}, {"intent": "Print a comparison between a and b and common subdirectories ( recursively ) .", "snippet": "dircmp.report_full_closure()"}, {"intent": "Return the effective group id of the current process .", "snippet": "os.getegid()"}, {"intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`.", "snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "snippet": "doctest.Example(source, want, lineno=0)"}, {"intent": "Old getter/setter API for daemon ; use it directly as a property instead .", "snippet": "thread.isDaemon()"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "snippet": "warnings.simplefilter(action, append=False)"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, name_of_module=None, extra=(), blacklist=())"}, {"intent": "Invalid exchange", "snippet": "errno.EBADE"}, {"intent": "Load cookies from a file . With arguments `ignore_discard`.", "snippet": "FileCookieJar.load(ignore_discard=False)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously .", "snippet": "concurrent.futures.ThreadPoolExecutor(max_workers=None)"}, {"intent": "Return True if the symbol is local to its block .", "snippet": "symbol.is_local()"}, {"intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "snippet": "ssl.RAND_add(bytes, entropy)"}, {"intent": "Returns the current unpack data buffer as a string .", "snippet": "Unpacker.get_buffer()"}, {"intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) . With arguments `paramflags`.", "snippet": "prototype(func_spec, paramflags)"}, {"intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "snippet": "decimal.logical_and(other, context=None)"}, {"intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`.", "snippet": "http.client.HTTPResponse(sock, debuglevel=0)"}, {"intent": "Remove a file descriptor being tracked by a polling object . Just like the register ( ) method , `fd` can be an integer or an object with a fileno ( ) method that returns an integer .", "snippet": "devpoll.unregister(fd)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files . With arguments `force_zip64`.", "snippet": "ZipFile.open(name, pwd=None, force_zip64=False)"}, {"intent": "A context manager that temporarily changes the current working directory to `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "snippet": "test.support.change_cwd(path, quiet=False)"}, {"intent": "A deprecated alias of OSError.", "snippet": "resource.error"}, {"intent": "Test the widget \u2019 s state . If a `callback` is not specified , returns True if the widget state matches `statespec` and False otherwise . With arguments `*args`, `**kw`.", "snippet": "widget.instate(statespec, *args, **kw)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . If provided , `codeset` will change the charset used to encode translated strings in the lgettext ( ) and lngettext ( ) methods .", "snippet": "gettext.translation(domain, codeset=None)"}, {"intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "snippet": "pool.apply(func)"}, {"intent": "Return the bitwise inverse of the number `obj` .", "snippet": "operator.__inv__(obj)"}, {"intent": "Return True if it is a block device .", "snippet": "TarInfo.isblk()"}, {"intent": "Get the character encoding of this InputSource .", "snippet": "InputSource.getEncoding()"}, {"intent": "The name of the module defining the function described.", "snippet": "Function.module"}, {"intent": "Return a list of the lines in the string , breaking at line boundaries .", "snippet": "str.splitlines()"}, {"intent": "Push the panel to the bottom of the stack .", "snippet": "Panel.bottom()"}, {"intent": "These attributes can be used to hold additional data associated with the element.", "snippet": "element.text"}, {"intent": "The interface is currently defined as follows .", "snippet": "object.__reduce__()"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, default=None, minval=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "snippet": "zlib.compressobj(wbits=MAX_WBITS)"}, {"intent": "Construct an IPv4 interface . The meaning of `address` is as in the constructor of IPv4Network , except that arbitrary host addresses are always accepted .", "snippet": "ipaddress.IPv4Interface(address)"}, {"intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "snippet": "hmac.new(key, msg=None)"}, {"intent": "Return the Process object corresponding to the current process .", "snippet": "multiprocessing.current_process()"}, {"intent": "The name of the parameter as a string.", "snippet": "parameter.name"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None, funcname=None)"}, {"intent": "Returns the numeric value assigned to the character `chr` as float . If no such value is defined , `default` is returned , or , if not given , ValueError is raised .", "snippet": "unicodedata.numeric(chr, default)"}, {"intent": "Retry the request with authentication information , if available . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)"}, {"intent": "A TracebackException of the original __cause__.", "snippet": "traceback_exception.__cause__"}, {"intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "snippet": "ctypes.create_unicode_buffer(init_or_size, size=None)"}, {"intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) . The `keep_blank_values` and `strict_parsing` parameters are passed to urllib.parse.parse_qs ( ) unchanged .", "snippet": "cgi.parse(keep_blank_values=False)"}, {"intent": "Return `x` to the power of `y` , reduced `modulo` modulo if given .", "snippet": "context.power(x, y, modulo=None)"}, {"intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`, `monetary`.", "snippet": "locale.format(format, val, grouping=False, monetary=False)"}, {"intent": "The mathematical constant \u03c4, as a float.", "snippet": "cmath.tau"}, {"intent": "Return a context manager that returns `enter_result` from __enter__ , but otherwise does nothing .", "snippet": "contextlib.nullcontext(enter_result=None)"}, {"intent": "The maximum number of open file descriptors for the current process.", "snippet": "resource.RLIMIT_NOFILE"}, {"intent": "Cookie path (a string, eg.", "snippet": "Cookie.path"}, {"intent": "See the documentation of the protocol.eof_received ( ) method .", "snippet": "BufferedProtocol.eof_received()"}, {"intent": "ZIP flag bits.", "snippet": "ZipInfo.flag_bits"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "snippet": "zlib.compressobj(method=DEFLATED)"}, {"intent": "Return a new Policy instance whose attributes have the same values as the current instance , except where those attributes are given new values by the keyword arguments . With arguments `**kw`.", "snippet": "policy.clone(**kw)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "snippet": "pkgutil.walk_packages(path=None)"}, {"intent": "Return the remainder from dividing self by `other` . With arguments `context`.", "snippet": "decimal.remainder_near(other, context=None)"}, {"intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "snippet": "ctypes.DllGetClassObject()"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "snippet": "subprocess.Popen(args, stdout=None)"}, {"intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "snippet": "typing.Deque(deque, MutableSequenceT)"}, {"intent": "Return a Signature object for the given `callable` : With arguments `follow_wrapped`.", "snippet": "inspect.signature(callable, follow_wrapped=True)"}, {"intent": "Constant used to represent the limit for an unlimited resource.", "snippet": "resource.RLIM_INFINITY"}, {"intent": "Similar to `callback` ( ) but expects a coroutine function . With arguments `*args`, `**kwds`.", "snippet": "async_exit_stack.push_async_callback(callback, *args, **kwds)"}, {"intent": "Handle DTD events.", "snippet": "xml.sax.handler.DTDHandler"}, {"intent": "This is a legacy API retained for backwards compatibility . The given `server_name_callback` is similar to sni_callback , except that when the server hostname is an IDN-encoded internationalized domain name , the server_name_callback receives a decoded U-label ( `` pyth\u00f6n.org '' ) .", "snippet": "SSLContext.set_servername_callback(server_name_callback)"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "snippet": "warnings.warn(message, category=None, source=None)"}, {"intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` . If and only if resizemode is set to \u201c user \u201d , the turtle will be displayed stretched according to its stretchfactors : `stretch_wid` is stretchfactor perpendicular to its orientation , `stretch_len` is stretchfactor in direction of its orientation , outline determines the width of the shapes \u2019 s outline .", "snippet": "turtle.shapesize(stretch_len=None)"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "snippet": "http.client.HTTPConnection(host, port=None)"}, {"intent": "Return the total number of headers , including duplicates .", "snippet": "email_message.__len__()"}, {"intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)"}, {"intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "snippet": "FileHandler.file_open(req)"}, {"intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "snippet": "logging.handlers.HTTPHandler(host, url, secure=False, context=None)"}, {"intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "snippet": "property(fset=None, doc=None)"}, {"intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "snippet": "calendar.itermonthdays3(year, month)"}, {"intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "snippet": "controller.open_new(url)"}, {"intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "snippet": "patch.dict(in_dict, **kwargs, clear=False)"}, {"intent": "Method representing the thread \u2019 s activity .", "snippet": "thread.run()"}, {"intent": "Interact with process : The optional `input` argument is the data ( bytes object ) that will be sent to the child process .", "snippet": "process.communicate(input=None)"}, {"intent": "Pickles the `record` \u2019 s attribute dictionary in binary format with a length prefix , and returns it ready for transmission across the socket .", "snippet": "socket_handler.makePickle(record)"}, {"intent": "The raw version number of the OpenSSL library, as a single integer:", "snippet": "ssl.OPENSSL_VERSION_NUMBER"}, {"intent": "Concrete implementation of importlib.abc.SourceLoader.set_data ( ) . With arguments `path`, `data`.", "snippet": "source_file_loader.set_data(path, data)"}, {"intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "snippet": "locale.D_T_FMT"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _encoder=email.encoders.encode_base64)"}, {"intent": "The above constants are extensions and not present if they are not defined by the C library.", "snippet": "os.O_NOATIME"}, {"intent": "Set resizemode to one of the values : \u201c auto \u201d , \u201c user \u201d , \u201c noresize \u201d . If `rmode` is not given , return current resizemode .", "snippet": "turtle.resizemode(rmode=None)"}, {"intent": "Test whether every element in `other` is in the set .", "snippet": "set.issuperset(other)"}, {"intent": "Returns the absolute value of `x` .", "snippet": "context.abs(x)"}, {"intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`, `query_opt`.", "snippet": "style.configure(style, **kw, query_opt=None)"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "snippet": "gettext.install(domain, localedir=None, codeset=None, names=None)"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . If given , `arcname` specifies an alternative name for the file in the archive , otherwise , the name is taken from fileobj \u2019 s name attribute , or the name argument . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "snippet": "TarFile.gettarinfo(arcname=None, fileobj=None)"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "snippet": "platform.architecture(bits='', linkage='')"}, {"intent": "Map character sets to their email properties . Optional `input_charset` is as described below ; it is always coerced to lower case .", "snippet": "email.charset.Charset(input_charset=DEFAULT_CHARSET)"}, {"intent": "Returns the Option instance with the option string `opt_str` , or None if no options have that option string .", "snippet": "OptionParser.get_option(opt_str)"}, {"intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "snippet": "calendar.prmonth(theyear, themonth, l=0)"}, {"intent": "If the message is a multipart/alternative , create a new message object , pass all of the arguments to its set_content ( ) method , and attach ( ) it to the multipart . With arguments `*args`, `**kw`.", "snippet": "email_message.add_alternative(*args, **kw)"}, {"intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "snippet": "turtle.shape(name=None)"}, {"intent": "Determine if `object` requires a recursive representation .", "snippet": "pprint.isrecursive(object)"}, {"intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "snippet": "gettext.bind_textdomain_codeset(domain)"}, {"intent": "The SSL version to use (defaults to ssl.PROTOCOL_SSLv23).", "snippet": "FTP_TLS.ssl_version"}, {"intent": "The username portion of the address, with all quoting removed.", "snippet": "address.username"}, {"intent": "This is another standard signal handler, which will simply ignore the given signal.", "snippet": "signal.SIG_IGN"}, {"intent": "Internal attributes.", "snippet": "ZipInfo.internal_attr"}, {"intent": "Convert `date_time` to an IMAP4 INTERNALDATE representation .", "snippet": "imaplib.Time2Internaldate(date_time)"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "snippet": "loop.create_connection(protocol_factory)"}, {"intent": "Return a float with the magnitude ( absolute value ) of `x` but the sign of `y` .", "snippet": "math.copysign(x, y)"}, {"intent": "ABCs for read-only and mutable sequences.", "snippet": "collections.abc.MutableSequence"}, {"intent": "Parse a `string` representing a time according to a `format` .", "snippet": "time.strptime(string)"}, {"intent": "Method representing the process \u2019 s activity .", "snippet": "process.run()"}, {"intent": "The file may not be changed.", "snippet": "stat.UF_IMMUTABLE"}, {"intent": "Constants for Linux host/guest communication.", "snippet": "VMADDR*"}, {"intent": "Exception raised when an unexpected reply is received from the server.", "snippet": "nntplib.NNTPReplyError"}, {"intent": "Remove ( delete ) the file `path` . With arguments `dir_fd`.", "snippet": "os.unlink(path, dir_fd=None)"}, {"intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "snippet": "mailbox.items()"}, {"intent": "True if cookie has passed the time at which the server requested it should expire .", "snippet": "Cookie.is_expired()"}, {"intent": "Adds a response header to the headers buffer and logs the accepted request . With arguments `code`, `message`.", "snippet": "base_http_request_handler.send_response(code, message=None)"}, {"intent": "Restore the terminal to \u201c shell \u201d mode , as previously saved by def_shell_mode ( ) .", "snippet": "curses.reset_shell_mode()"}, {"intent": "Module : email.mime.text `_text` is the string for the payload . `_subtype` is the minor type and defaults to plain . `_charset` is the character set of the text and is passed as an argument to the MIMENonMultipart constructor ; it defaults to us-ascii if the string contains only ascii code points , and utf-8 otherwise .", "snippet": "email.mime.text.MIMEText(_text, _subtype='plain', _charset=None)"}, {"intent": "Return the turtle \u2019 s y coordinate .", "snippet": "turtle.ycor()"}, {"intent": "Return true if the sequence is empty or all bytes in the sequence are ASCII , false otherwise .", "snippet": "bytearray.isascii()"}, {"intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None, initializer=None)"}, {"intent": "For use with BTPROTO_HCI.", "snippet": "socket.HCI_DATA_DIR"}, {"intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "snippet": "sys.prefix"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . `keyfile` and `certfile` are a legacy alternative to context \u2013 they can point to PEM-formatted private key and certificate chain files ( respectively ) for the SSL connection .", "snippet": "ftplib.FTP_TLS(keyfile=None)"}, {"intent": "Like find ( ) , but raise ValueError when the subsequence is not found . With arguments `sub`.", "snippet": "bytearray.index(sub)"}, {"intent": "Set a scheduling parameters for the process with PID `pid` . `param` is a sched_param instance .", "snippet": "os.sched_setparam(pid, param)"}, {"intent": "Same as equivalent method in the Document class . With arguments `namespaceURI`, `localName`.", "snippet": "Element.getElementsByTagNameNS(namespaceURI, localName)"}, {"intent": "Whether the OpenSSL library has built-in support for the TLS 1.0 protocol.", "snippet": "ssl.HAS_TLSv1"}, {"intent": "Encodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that encoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeEncodeError ) .", "snippet": "codecs.encode(obj, errors='strict')"}, {"intent": "A dict containing the headers of the HTTP/HTTPS request that triggered the error.", "snippet": "protocol_error.headers"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things :", "snippet": "io.FileIO(name)"}, {"intent": "Process objects represent activity that is run in a separate process . `target` is the callable object to be invoked by the run ( ) method .", "snippet": "multiprocessing.Process(target=None)"}, {"intent": "A named tuple holding information about the float type.", "snippet": "sys.float_info"}, {"intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors . If `all_threads` is True , produce tracebacks for every running thread .", "snippet": "faulthandler.enable(file=sys.stderr, all_threads=True)"}, {"intent": "Return true if the `object` can be used in await expression .", "snippet": "inspect.isawaitable(object)"}, {"intent": "Return true if there is at least one uppercase alphabetic ASCII character in the sequence and no lowercase ASCII characters , false otherwise .", "snippet": "bytes.isupper()"}, {"intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "snippet": "window.addch(ch, attr)"}, {"intent": "Read a data URL . With arguments `req`.", "snippet": "DataHandler.data_open(req)"}, {"intent": "The URI authority, typically a host, but may also contain a port separated by a colon.", "snippet": "Request.host"}, {"intent": "Scroll the screen or scrolling region upward by `lines` lines .", "snippet": "window.scroll()"}, {"intent": "Like formatdate , but the input is a datetime instance . With arguments `dt`.", "snippet": "email.utils.format_datetime(dt)"}, {"intent": "Tries to determine the name of the Linux OS distribution name . If `full_distribution_name` is true ( default ) , the full distribution read from the OS is returned . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), full_distribution_name=1)"}, {"intent": "Return a generator of groups with up to `n` lines of context .", "snippet": "sequence_matcher.get_grouped_opcodes()"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "snippet": "platform.architecture(executable=sys.executable, bits='')"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree . With arguments `col_info`.", "snippet": "parser.st2tuple(st, col_info=False)"}, {"intent": "ABCs for read-only and mutable sets.", "snippet": "collections.abc.Set"}, {"intent": "Set the \u201c From \u201d line to `from_` , which should be specified without a leading \u201c From \u201d or trailing newline . For convenience , `time_` may be specified and will be formatted appropriately and appended to from_ .", "snippet": "mbox_message.set_from(from_, time_=None)"}, {"intent": "A string representation of the network, with the mask in host mask notation.", "snippet": "i_pv4_network.with_hostmask"}, {"intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy . `password_mgr` , if given , should be something that is compatible with HTTPPasswordMgr ; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported .", "snippet": "urllib.request.AbstractBasicAuthHandler(password_mgr=None)"}, {"intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `monetary`.", "snippet": "locale.format(format, val, monetary=False)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.SMTP_SSL(local_hostname=None)"}, {"intent": "List subscribed mailbox names in `directory` matching `pattern` .", "snippet": "IMAP4.lsub()"}, {"intent": "Indicate that no more data will be put on this queue by the current process .", "snippet": "queue.close()"}, {"intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `policy`.", "snippet": "http.cookiejar.LWPCookieJar(filename, policy=None)"}, {"intent": "The numeric constant for the usual ZIP compression method.", "snippet": "zipfile.ZIP_DEFLATED"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "snippet": "doctest.DocTestFinder(exclude_empty=True)"}, {"intent": "Set background image or return name of current backgroundimage .", "snippet": "turtle.bgpic()"}, {"intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "snippet": "faulthandler.register(signum, chain=False)"}, {"intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "snippet": "min(arg1, arg2, *args, key)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `prefix`.", "snippet": "tempfile.TemporaryDirectory(suffix=None, prefix=None)"}, {"intent": "This method for the Stats class reverses the ordering of the basic list within the object .", "snippet": "stats.reverse_order()"}, {"intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "snippet": "imaplib.IMAP4_SSL(certfile=None)"}, {"intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "snippet": "test.support.swap_attr(obj, attr, new_val)"}, {"intent": "Return True if `x` is a NaN ( not a number ) , and False otherwise .", "snippet": "math.isnan(x)"}, {"intent": "Fairly portable uname interface .", "snippet": "platform.uname()"}, {"intent": "Link has been severed", "snippet": "errno.ENOLINK"}, {"intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "snippet": "logging.handlers.TimedRotatingFileHandler(filename, delay=False)"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "snippet": "uuid.UUID(bytes=None)"}, {"intent": "The value of the start parameter (or 0 if the parameter was not supplied)", "snippet": "range.start"}, {"intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `follow_symlinks`.", "snippet": "os.stat(path, follow_symlinks=True)"}, {"intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "snippet": "bisect.insort_right(a, x, hi=len(a))"}, {"intent": "Test that `first` is respectively > , > = , < or < = than `second` depending on the method name .", "snippet": "test_case.assertGreaterEqual(first, second)"}, {"intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "snippet": "datetime.astimezone(tz=None)"}, {"intent": "Return the string right justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "snippet": "str.rjust(width, fillchar)"}, {"intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`, `loop`.", "snippet": "asyncio.gather(*aws, loop=None, return_exceptions=False)"}, {"intent": "For syntax errors - the file name where the error occurred.", "snippet": "traceback_exception.filename"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "snippet": "shelve.Shelf(dict)"}, {"intent": "Remove and return an item from the queue .", "snippet": "Queue.get()"}, {"intent": "Set the main `type` and subtype for the Content-Type `header` .", "snippet": "message.set_type(type)"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "snippet": "message.get_param(param, failobj=None, header='content-type')"}, {"intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "snippet": "mime_types.read_windows_registry(strict=True)"}, {"intent": "Flags that specify what action lockf() will take.", "snippet": "os.F_TLOCK"}, {"intent": "A list of callables that take a path argument to try to create a finder for the path.", "snippet": "sys.path_hooks"}, {"intent": "Return a copy of the sequence left filled with ASCII b ' 0 ' digits to make a sequence of length `width` .", "snippet": "bytearray.zfill(width)"}, {"intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "snippet": "html.escape(s)"}, {"intent": "Return the name of start method used for starting processes . If the start method has not been fixed and `allow_none` is false , then the start method is fixed to the default and the name is returned .", "snippet": "multiprocessing.get_start_method(allow_none=False)"}, {"intent": "Wait until the thread terminates . This blocks the calling thread until the thread whose join ( ) method is called terminates \u2013 either normally or through an unhandled exception \u2013 or until the optional `timeout` occurs .", "snippet": "thread.join(timeout=None)"}, {"intent": "Unix V7 synonym for S_IXUSR.", "snippet": "stat.S_IEXEC"}, {"intent": "Create an empty file with `filename` .", "snippet": "test.support.create_empty_file(filename)"}, {"intent": "Assume the end of the document .", "snippet": "IncrementalParser.close()"}, {"intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position .", "snippet": "itertools.islice(iterable, start, stop)"}, {"intent": "Indicates if a message of severity `level` would be processed by this logger .", "snippet": "queue_listener.isEnabledFor(level)"}, {"intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "snippet": "subprocess.call(args, stdin=None, stdout=None)"}, {"intent": "Token value that indicates the encoding used to decode the source bytes into text.", "snippet": "token.ENCODING"}, {"intent": "Return the underlying file descriptor ( an integer ) of the stream if it exists .", "snippet": "io_base.fileno()"}, {"intent": "Return the encoding of the message catalog file .", "snippet": "null_translations.charset()"}, {"intent": "These objects contain the original values of stdin, stderr and stdout at the start of the program.", "snippet": "sys.__stdin__"}, {"intent": "Address space of a memory block (int).", "snippet": "domain_filter.domain"}, {"intent": "Write any pending changes to the filesystem .", "snippet": "mailbox.flush()"}, {"intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "snippet": "bytes(source)"}, {"intent": "Retrieve a module loader for the given `fullname` .", "snippet": "pkgutil.find_loader(fullname)"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "snippet": "os.access(path, mode, follow_symlinks=True)"}, {"intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided .", "snippet": "code.interact(readfunc=None, exitmsg=None)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`, `parser_class`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class)"}, {"intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "snippet": "random.randint(a, b)"}, {"intent": "Signals a test failure unconditionally , with `msg` or None for the error message .", "snippet": "test_case.fail()"}, {"intent": "Create a mock object using another object as a `spec` . If `spec_set` is True then attempting to set attributes that don \u2019 t exist on the spec object will raise an AttributeError . If a class is used as a spec then the return value of the mock ( the `instance` of the class ) will have the same spec . With arguments `**kwargs`.", "snippet": "unittest.mock.create_autospec(spec, **kwargs, spec_set=False, instance=False)"}, {"intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, disposition=None)"}, {"intent": "Raised for module specific errors.", "snippet": "copy.error"}, {"intent": "Bad file number", "snippet": "errno.EBADF"}, {"intent": "Return a set of not yet finished Task objects run by the `loop` .", "snippet": "asyncio.all_tasks(loop=None)"}, {"intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "snippet": "dict.update()"}, {"intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread .", "snippet": "multiprocessing.Process(group=None)"}, {"intent": "Complex number with zero real part and NaN imaginary part.", "snippet": "cmath.nanj"}, {"intent": "Set the debug output `level` .", "snippet": "SMTP.set_debuglevel(level)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, new_callable=None)"}, {"intent": "Return a sub-window , whose upper-left corner is at ( `begin_y` , `begin_x` ) , and whose width/height is ncols/nlines . With arguments `nlines`, `ncols`.", "snippet": "window.subwin(nlines, ncols, begin_y, begin_x)"}, {"intent": "This method for the Stats class removes all leading path information from file names .", "snippet": "stats.strip_dirs()"}, {"intent": "Set the angle measurement units to radians .", "snippet": "turtle.radians()"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "snippet": "math.isclose(a, b)"}, {"intent": "Convert `params` into an XML-RPC request . With arguments `methodname`.", "snippet": "xmlrpc.client.dumps(params, methodname=None)"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored .", "snippet": "bz2.BZ2File(filename, buffering=None)"}, {"intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.mbox(path, factory=None, create=True)"}, {"intent": "Return the members as a list of their names .", "snippet": "TarFile.getnames()"}, {"intent": "Read and return the contents of `resource` within `package` as a str . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "snippet": "importlib.resources.read_text(package, resource, encoding='utf-8')"}, {"intent": "When set, all unreachable objects found will be appended to garbage rather than being freed.", "snippet": "gc.DEBUG_SAVEALL"}, {"intent": "Test that an `exception` is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises ( ) . If only the exception and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "snippet": "test_case.assertRaises(exception, msg=None)"}, {"intent": "Like gmtime ( ) but converts to local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "snippet": "time.localtime(secs)"}, {"intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , moving the line from position x right by one character .", "snippet": "window.insch(y, x, ch)"}, {"intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `allow_no_value`.", "snippet": "configparser.RawConfigParser(':'), ';'), allow_no_value=False)"}, {"intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "snippet": "audioop.rms(fragment, width)"}, {"intent": "A non-callable version of Mock . With arguments `**kwargs`, `name`.", "snippet": "unittest.mock.NonCallableMock(**kwargs, name=None)"}, {"intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "snippet": "traceback.format_exc(chain=True)"}, {"intent": "Raised when an attempt is made to modify the type of a node.", "snippet": "xml.dom.InvalidModificationErr"}, {"intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "snippet": "os.POSIX_FADV_NOREUSE"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "snippet": "email_message.set_param(param, value, requote=True)"}, {"intent": "Return a list of all available shadow password database entries , in arbitrary order .", "snippet": "spwd.getspall()"}, {"intent": "Reads and returns at most `n` frames of audio , as a bytes object .", "snippet": "Wave_read.readframes(n)"}, {"intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addstr(y, x, str, attr)"}, {"intent": "Invalid internal state of Task or Future.", "snippet": "asyncio.InvalidStateError"}, {"intent": "Return the value of attribute `name` .", "snippet": "Attributes.getValue(name)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(suffix='', prefix='tmp')"}, {"intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "snippet": "re.ASCII"}, {"intent": "This method does an unregister ( ) followed by a register ( ) . With arguments `fd`, `eventmask`.", "snippet": "devpoll.modify(fd, eventmask)"}, {"intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)"}, {"intent": "Delete the message corresponding to `key` from the mailbox .", "snippet": "mailbox.__delitem__(key)"}, {"intent": "Acquire a lock , `blocking` or non-blocking .", "snippet": "lock.acquire(blocking=True)"}, {"intent": "Return a representation of the proxy object .", "snippet": "base_proxy.__repr__()"}, {"intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . `digestmod` is the digest name , digest constructor or module for the HMAC object to use .", "snippet": "hmac.new(key, digestmod=None)"}, {"intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "snippet": "decimal.Context(prec=None, rounding=None)"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "snippet": "binascii.b2a_qp(data, quotetabs=False)"}, {"intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "snippet": "uuid.uuid1(node=None, clock_seq=None)"}, {"intent": "Return the value of the header `name` , or `default` if there is no header matching name .", "snippet": "HTTPResponse.getheader(name)"}, {"intent": "Return a datetime corresponding to a `date_string` in one of the formats emitted by date.isoformat ( ) and datetime.isoformat ( ) .", "snippet": "datetime.fromisoformat(date_string)"}, {"intent": "Encode the bytes-like object `s` using Base32 and return the encoded bytes .", "snippet": "base64.b32encode(s)"}, {"intent": "This call decodes uuencoded file `in_file` placing the result on file `out_file` . Setting `quiet` to a true value silences this warning .", "snippet": "uu.decode(in_file, out_file=None, quiet=False)"}, {"intent": "Return True if the stream is interactive ( i.e. , connected to a terminal/tty device ) .", "snippet": "io_base.isatty()"}, {"intent": "Standard input stream (StreamWriter) or None if the process was created with stdin=None.", "snippet": "process.stdin"}, {"intent": "Return the public identifier for the current event .", "snippet": "Locator.getPublicId()"}, {"intent": "Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by `path` .", "snippet": "os.scandir()"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), release='')"}, {"intent": "A read-only property.", "snippet": "shlex.punctuation_chars"}, {"intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be unblocked.", "snippet": "signal.SIG_UNBLOCK"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`.", "snippet": "os.register_at_fork(before=None, after_in_parent=None)"}, {"intent": "Set the number of frames to n. This will be changed later if the number of frames actually written is different ( this update attempt will raise an error if the output stream is not seekable ) . With arguments `n`.", "snippet": "Wave_write.setnframes(n)"}, {"intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding .", "snippet": "cgi.parse_multipart(fp, pdict)"}, {"intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "snippet": "bz2.compress(data, compresslevel=9)"}, {"intent": "A class used for internal typing representation of string forward references.", "snippet": "typing.ForwardRef"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "snippet": "pkgutil.walk_packages(prefix='', onerror=None)"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver(csd='')"}, {"intent": "Return the approximate size of the queue .", "snippet": "Queue.qsize()"}, {"intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "snippet": "bytearray.splitlines(keepends=False)"}, {"intent": "Traceback where the memory blocks were allocated, Traceback instance.", "snippet": "statistic_diff.traceback"}, {"intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)"}, {"intent": "Return the current local datetime , with tzinfo None .", "snippet": "datetime.today()"}, {"intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found .", "snippet": "element.findtext(match, default=None)"}, {"intent": "Check for the existence of the compiler executables whose names are listed in `cmd_names` or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing .", "snippet": "test.support.missing_compiler_executable(cmd_names=)"}, {"intent": "Close file descriptor `fd` .", "snippet": "os.close(fd)"}, {"intent": "Send signal `sig` to the process `pid` .", "snippet": "os.kill(pid, sig)"}, {"intent": "Erase from cursor to the end of the window : all lines below the cursor are deleted , and then the equivalent of clrtoeol ( ) is performed .", "snippet": "window.clrtobot()"}, {"intent": "Indicate that a formerly enqueued task is complete .", "snippet": "Queue.task_done()"}, {"intent": "A reference was made to an entity which was not defined.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)"}, {"intent": "The defects attribute contains a list of all the problems found when parsing this message.", "snippet": "email_message.defects"}, {"intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "snippet": "context.same_quantum(x, y)"}, {"intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "snippet": "getpass.getpass(prompt='Password: ', stream=None)"}, {"intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter .", "snippet": "winreg.DeleteKeyEx(key, sub_key)"}, {"intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning . `return_when` indicates when this function should return .", "snippet": "concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)"}, {"intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`, `loop`.", "snippet": "asyncio.gather(*aws, loop=None)"}, {"intent": "If self is alive then return the tuple ( obj , func , args , kwargs ) .", "snippet": "finalize.peek()"}, {"intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, autospec=None)"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "snippet": "urllib.request.urlretrieve(url, reporthook=None, data=None)"}, {"intent": "This is the object passed to the constructor\u2019s template argument.", "snippet": "template.template"}, {"intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "snippet": "warnings.showwarning(message, category, filename, lineno)"}, {"intent": "End the scope of a prefix-URI mapping . With arguments `prefix`.", "snippet": "ContentHandler.endPrefixMapping(prefix)"}, {"intent": "If the given `section` exists , and contains the given `option` , return True ; otherwise return False .", "snippet": "config_parser.has_option(section, option)"}, {"intent": "Return a list of source lines and starting line number for an `object` .", "snippet": "inspect.getsourcelines(object)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "snippet": "zlib.compressobj(zdict, wbits=MAX_WBITS)"}, {"intent": "Send an ARTICLE command , where `message_spec` has the same meaning as for stat ( ) . With arguments `file`.", "snippet": "NNTP.article(message_spec=None, file=None)"}, {"intent": "Return current position in the file , with the same disclaimer for the AU_read.tell ( ) and AU_read.setpos ( ) methods .", "snippet": "AU_write.tell()"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`, `object_hook`.", "snippet": "json.loads(s, **kw, encoding=None, object_hook=None)"}, {"intent": "An invalid operation was performed.", "snippet": "decimal.InvalidOperation"}, {"intent": "Raised when an invalid or illegal string is specified.", "snippet": "xml.dom.SyntaxErr"}, {"intent": "Remove `callback` from the callbacks list .", "snippet": "task.remove_done_callback(callback)"}, {"intent": "Return the members of the archive as a list of TarInfo objects .", "snippet": "TarFile.getmembers()"}, {"intent": "Parameter objects are immutable . With arguments `name`, `kind`, `default`.", "snippet": "inspect.Parameter(name, kind, default=Parameter.empty)"}, {"intent": "If cookie has the named cookie-attribute , return its value . Otherwise , return `default` . With arguments `name`.", "snippet": "Cookie.get_nonstandard_attr(name, default=None)"}, {"intent": "Write the given bytes-like object , `b` , and return the number of bytes written ( always equal to the length of b in bytes , since if the write fails an OSError will be raised ) .", "snippet": "buffered_io_base.write(b)"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "snippet": "SMTP.starttls(certfile=None)"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `replace_paths` is a list of ( oldpath , newpath ) tuples that will be replaced in module paths .", "snippet": "modulefinder.ModuleFinder(debug=0, replace_paths=)"}, {"intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "snippet": "email.generator.Generator(outfp, maxheaderlen=None)"}, {"intent": "A context manager that creates a temporary directory at `path` and yields the directory .", "snippet": "test.support.temp_dir()"}, {"intent": "`policy` is an object implementing the CookiePolicy interface .", "snippet": "http.cookiejar.CookieJar(policy=None)"}, {"intent": "After getch ( ) returns KEY_MOUSE to signal a mouse event , this method should be call to retrieve the queued mouse event , represented as a 5-tuple ( id , x , y , z , bstate ) .", "snippet": "curses.getmouse()"}, {"intent": "Return the arc sine of `x` .", "snippet": "cmath.asin(x)"}, {"intent": "Close the write end of the transport after flushing all buffered data .", "snippet": "WriteTransport.write_eof()"}, {"intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "snippet": "difflib.Differ(linejunk=None)"}, {"intent": "Close the transport immediately , without waiting for pending operations to complete .", "snippet": "DatagramTransport.abort()"}, {"intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "snippet": "FTP.sendcmd(cmd)"}, {"intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "snippet": "POP3.list()"}, {"intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)"}, {"intent": "Gets the element attribute named `key` .", "snippet": "element.get(key)"}, {"intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block .", "snippet": "FTP.retrbinary(cmd, callback)"}, {"intent": "Run command with arguments . With arguments `args`, `cwd`.", "snippet": "subprocess.check_call(args, cwd=None)"}, {"intent": "A subclass of PurePath , this path flavour represents non-Windows filesystem paths : With arguments `*pathsegments`.", "snippet": "pathlib.PurePosixPath(*pathsegments)"}, {"intent": "Decorator to temporarily turn off tracing for the duration of the test . With arguments `func`.", "snippet": "@test.support.no_tracing(func)"}, {"intent": "Return true if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty , false otherwise .", "snippet": "bytearray.isalpha()"}, {"intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) . It will be called once at the start and after each chunk of `data` is read from the network .", "snippet": "ur_lopener.retrieve(url, reporthook=None, data=None)"}, {"intent": "Read a keypress and return the resulting character as a byte string .", "snippet": "msvcrt.getch()"}, {"intent": "Return the encoding used for text data , according to user preferences . If invoking setlocale is not necessary or desired , `do_setlocale` should be set to False .", "snippet": "locale.getpreferredencoding(do_setlocale=True)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False, max_num_fields=None)"}, {"intent": "Returns the digit value assigned to the character `chr` as integer . If no such value is defined , `default` is returned , or , if not given , ValueError is raised .", "snippet": "unicodedata.digit(chr, default)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `frozen`.", "snippet": "@dataclasses.dataclass(frozen=False)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, data=None, cafile=None)"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . To allow setting the `fallback` , copy.copy ( ) is used to clone each translation object from the cache ; the actual instance data is still shared with the cache .", "snippet": "gettext.translation(domain, localedir=None, fallback=False)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `tagname` , if specified and not None , is a string giving a tag name for the mapping .", "snippet": "mmap.mmap(fileno, length, tagname=None)"}, {"intent": "Construct an IPv6 interface . The meaning of `address` is as in the constructor of IPv6Network , except that arbitrary host addresses are always accepted .", "snippet": "ipaddress.IPv6Interface(address)"}, {"intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "snippet": "os.POSIX_FADV_SEQUENTIAL"}, {"intent": "Stale NFS file handle", "snippet": "errno.ESTALE"}, {"intent": "Directory not empty", "snippet": "errno.ENOTEMPTY"}, {"intent": "Tries to determine the default locale settings and returns them as a tuple of the form ( language code , encoding ) .", "snippet": "locale.getdefaultlocale()"}, {"intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size .", "snippet": "bytearray.expandtabs()"}, {"intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file .", "snippet": "traceback.format_exc(limit=None)"}, {"intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "snippet": "test_result.failures"}, {"intent": "Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system.", "snippet": "os.pathconf_names"}, {"intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `replace_paths` is a list of ( oldpath , newpath ) tuples that will be replaced in module paths .", "snippet": "modulefinder.ModuleFinder(replace_paths=)"}, {"intent": "The above constants are only available on Windows.", "snippet": "os.O_TEMPORARY"}, {"intent": "Return the value of the extended filesystem `attribute` attribute for `path` . With arguments `follow_symlinks`.", "snippet": "os.getxattr(path, attribute, follow_symlinks=True)"}, {"intent": "Required to create a subkey of a registry key.", "snippet": "winreg.KEY_CREATE_SUB_KEY"}, {"intent": "Send a blank line to the server , signalling the end of the headers . The optional `message_body` argument can be used to pass a message body associated with the request .", "snippet": "HTTPConnection.endheaders(message_body=None)"}, {"intent": "Determine whether `code` is in tableC.2.2 ( Non-ASCII control characters ) .", "snippet": "stringprep.in_table_c22(code)"}, {"intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "snippet": "os.X_OK"}, {"intent": "Return the inverse hyperbolic sine of `x` .", "snippet": "cmath.asinh(x)"}, {"intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "snippet": "curses.init_color(color_number, r, g, b)"}, {"intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "snippet": "html_diff.__init__(tabsize=8, linejunk=None)"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `extraglobs` gives a dict merged into the globals used to execute examples .", "snippet": "doctest.testfile(filename, extraglobs=None)"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)"}, {"intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "snippet": "decimal.fma(other, third, context=None)"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)"}, {"intent": "This limit is used to control the size of object types for which no specific formatting method is available on the Repr object.", "snippet": "Repr.maxother"}, {"intent": "Return string-valued system configuration values . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX , Unix 95 , Unix 98 , and others ) .", "snippet": "os.confstr(name)"}, {"intent": "Base class for content managers.", "snippet": "email.contentmanager.ContentManager"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "snippet": "text_calendar.pryear(theyear, l=1, c=6)"}, {"intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)"}, {"intent": "Initialize the terminal .", "snippet": "curses.setupterm()"}, {"intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "snippet": "base_selector.modify(fileobj, events, data=None)"}, {"intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods .", "snippet": "oss_audio_device.setparameters(format, nchannels)"}, {"intent": "Returns the current value of the configuration `option` given by option .", "snippet": "tixCommand.tix_cget(option)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `context`.", "snippet": "html_diff.make_table(fromlines, tolines, context=False)"}, {"intent": "Set the number of output channels to `nchannels` .", "snippet": "oss_audio_device.channels(nchannels)"}, {"intent": "Acquire a lock , blocking or non-blocking .", "snippet": "r_lock.acquire()"}, {"intent": "A class that implements the tzinfo abstract base class as a fixed offset from the UTC.", "snippet": "datetime.timezone"}, {"intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "snippet": "html_diff.__init__(tabsize=8)"}, {"intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "snippet": "warnings.filterwarnings(action, message='', module='')"}, {"intent": "Flags that specify what action lockf() will take.", "snippet": "os.F_TEST"}, {"intent": "Is True if the stream is closed.", "snippet": "HTTPResponse.closed"}, {"intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "snippet": "uuid.UUID(int=None)"}, {"intent": "System V file locking enforcement.", "snippet": "stat.S_ENFMT"}, {"intent": "Owner has execute permission.", "snippet": "stat.S_IXUSR"}, {"intent": "The base class of the other exceptions in this module.", "snippet": "sqlite3.Error"}, {"intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed .", "snippet": "base_proxy._callmethod(methodname)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "snippet": "TarFile.extractall()"}, {"intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `locals`.", "snippet": "pdb.runeval(expression, locals=None)"}, {"intent": "Locale category for the character type functions.", "snippet": "locale.LC_CTYPE"}, {"intent": "Represents the C wchar_t datatype, and interprets the value as a single character unicode string.", "snippet": "ctypes.c_wchar"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) . With arguments `charset`.", "snippet": "html_diff.make_file(fromlines, tolines, fromdesc='', charset='utf-8')"}, {"intent": "Logs a message with level DEBUG on the root logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "snippet": "logging.debug(msg, *args, **kwargs)"}, {"intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)"}, {"intent": "Return a string version of `object` .", "snippet": "str(object='')"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)"}, {"intent": "Implement RFC 2965 protocol.", "snippet": "CookiePolicy.rfc2965"}, {"intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")"}, {"intent": "Return the arc tangent of `x` , in radians .", "snippet": "math.atan(x)"}, {"intent": "A context manager that temporarily sets the process `umask` .", "snippet": "test.support.temp_umask(umask)"}, {"intent": "Pop the last `n` style specifications passed to push_style ( ) .", "snippet": "formatter.pop_style(n=1)"}, {"intent": "Send a command `cmd` to the server .", "snippet": "SMTP.docmd(cmd)"}, {"intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "snippet": "element.iterfind(match)"}, {"intent": "Return True if the argument is a normal finite number .", "snippet": "decimal.is_normal()"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "lzma.open(filename, errors=None)"}, {"intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true . If `vars` is provided , it must be a dictionary .", "snippet": "config_parser.get(section, option, fallback, raw=False, vars=None)"}, {"intent": "Flags that specify what action lockf() will take.", "snippet": "os.F_ULOCK"}, {"intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "snippet": "frozenset()"}, {"intent": "Return the value of the given socket option ( see the Unix man page getsockopt ( 2 ) ) . With arguments `level`, `optname`.", "snippet": "socket.getsockopt(level, optname)"}, {"intent": "Add a `callback` to be run when the Task is done .", "snippet": "task.add_done_callback(callback)"}, {"intent": "Dictionary mapping names accepted by confstr() to the integer values defined for those names by the host operating system.", "snippet": "os.confstr_names"}, {"intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "snippet": "itertools.accumulate(iterable)"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `udata`.", "snippet": "select.kevent(ident, filter=KQ_FILTER_READ, udata=0)"}, {"intent": "Return the name of start method used for starting processes .", "snippet": "multiprocessing.get_start_method()"}, {"intent": "Trace of a memory block.", "snippet": "tracemalloc.Trace"}, {"intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used .", "snippet": "tempfile.mkstemp(prefix=None)"}, {"intent": "Constructor arguments should be passed as keyword arguments only . With arguments `rfc2965`.", "snippet": "http.cookiejar.DefaultCookiePolicy(rfc2965=False)"}, {"intent": "Removes the specified `filter` filter from this handler .", "snippet": "queue_listener.removeFilter(filter)"}, {"intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' . With arguments `errors`.", "snippet": "socket.makefile(mode='r', errors=None)"}, {"intent": "Return the Gamma function at `x` .", "snippet": "math.gamma(x)"}, {"intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "snippet": "mh.add_folder(folder)"}, {"intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "snippet": "warnings.filterwarnings(action, lineno=0)"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)"}, {"intent": "Return `a` converted to an integer .", "snippet": "operator.index(a)"}, {"intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "snippet": "bytearray.count(sub, start)"}, {"intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`.", "snippet": "quopri.encodestring(s, quotetabs=False)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) .", "snippet": "html_diff.make_file(fromlines, tolines, fromdesc='')"}, {"intent": "Set the turtle \u2019 s second coordinate to `y` , leave first coordinate unchanged .", "snippet": "turtle.sety(y)"}, {"intent": "Constants for Linux Kernel cryptography.", "snippet": "socket.SOL_ALG"}, {"intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "snippet": "calendar.yeardays2calendar(year)"}, {"intent": "Bind `fun` to key-release event of `key` .", "snippet": "turtle.onkeyrelease(fun, key)"}, {"intent": "Create a directory named `path` with numeric `mode` mode .", "snippet": "os.mkdir(path)"}, {"intent": "Returns sample width in bytes .", "snippet": "AU_read.getsampwidth()"}, {"intent": "Register a `function` that can respond to XML-RPC requests .", "snippet": "CGIXMLRPCRequestHandler.register_function()"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `fromlist`.", "snippet": "importlib.__import__(name, fromlist=())"}, {"intent": "Return an output stream object suitable for use as the wsgi.errors of the request currently being processed .", "snippet": "base_handler.get_stderr()"}, {"intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "snippet": "timeit.Timer(stmt='pass', setup='pass')"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)"}, {"intent": "Return a bytestring representing the current working directory .", "snippet": "os.getcwdb()"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "snippet": "email.headerregistry.Address(display_name='', username='')"}, {"intent": "The Package type is defined as Union[str, ModuleType].", "snippet": "importlib.resources.Package"}, {"intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` . With arguments `target`.", "snippet": "path_finder.find_spec(fullname, target=None)"}, {"intent": "If `item` is specified , sets the focus item to item .", "snippet": "widget.focus(item=None)"}, {"intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`, `flags`.", "snippet": "loop.getnameinfo(sockaddr, flags=0)"}, {"intent": "Run awaitable objects in the `aws` set concurrently . Raises asyncio.TimeoutError if the `timeout` occurs before all Futures are done . With arguments `loop`.", "snippet": "asyncio.as_completed(aws, loop=None, timeout=None)"}, {"intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "snippet": "email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None)"}, {"intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "snippet": "colorsys.rgb_to_hls(r, g, b)"}, {"intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `loop`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "snippet": "email_message.set_param(param, value, language='')"}, {"intent": "Set the size and position of the main window . With arguments `startx`.", "snippet": "turtle.setup(startx=_CFG\"leftright\")"}, {"intent": "If self is alive then mark it as dead and return the tuple ( obj , func , args , kwargs ) .", "snippet": "finalize.detach()"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `flags`.", "snippet": "loop.create_connection(protocol_factory, flags=0)"}, {"intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "snippet": "msilib.FCICreate(cabname, files)"}, {"intent": "Return the interpreter \u2019 s \u201c check interval \u201d ; see setcheckinterval ( ) .", "snippet": "sys.getcheckinterval()"}, {"intent": "For use with BTPROTO_HCI.", "snippet": "socket.HCI_TIME_STAMP"}, {"intent": "Decodes data from the stream and returns the resulting object .", "snippet": "stream_reader.read()"}, {"intent": "Return true if cookie has the named cookie-attribute . With arguments `name`.", "snippet": "Cookie.has_nonstandard_attr(name)"}, {"intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "snippet": "exit_stack.close()"}, {"intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter .", "snippet": "hashlib.new(name)"}, {"intent": "Test whether the set is a proper superset of other, that is, set >= other and set != other.", "snippet": "set > other"}, {"intent": "Raise ResourceDenied if `resource` is not available .", "snippet": "test.support.requires(resource)"}, {"intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "snippet": "urllib.request.urlretrieve(url, data=None)"}, {"intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "snippet": "IMAP4.sort(sort_criteria, charset)"}, {"intent": "Report that the given `example` failed . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "snippet": "doc_test_runner.report_failure(out, test, example, got)"}, {"intent": "The maximum size of a file which the process may create.", "snippet": "resource.RLIMIT_FSIZE"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified .", "snippet": "time.replace()"}, {"intent": "Add a directory to sys.path and process its .pth files . With arguments `sitedir`, `known_paths`.", "snippet": "site.addsitedir(sitedir, known_paths=None)"}, {"intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . With arguments `msg`.", "snippet": "email.iterators._structure(msg, fp=None)"}, {"intent": "Returns an unused port that should be suitable for binding . With arguments `socktype`.", "snippet": "test.support.find_unused_port(socktype=socket.SOCK_STREAM)"}, {"intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `filterfunc` , if given , must be a function taking a single string argument .", "snippet": "py_zip_file.writepy(pathname, filterfunc=None)"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.open(filename, filters=None)"}, {"intent": "Raise an error . With arguments `id`.", "snippet": "Wave_read.getmark(id)"}, {"intent": "Send a NEXT command .", "snippet": "NNTP.next()"}, {"intent": "Exception raised by the netrc class when syntactical errors are encountered in source text.", "snippet": "netrc.NetrcParseError"}, {"intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "snippet": "random.randrange(start, stop)"}, {"intent": "Raised when a Unicode-related encoding or decoding error occurs.", "snippet": "UnicodeError"}, {"intent": "Represents the C unsigned long long datatype.", "snippet": "ctypes.c_ulonglong"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs)"}, {"intent": "Return a randomly generated salt of the specified `method` . `rounds` specifies the number of rounds for METHOD_SHA256 , METHOD_SHA512 and METHOD_BLOWFISH .", "snippet": "crypt.mksalt(method=None, rounds=None)"}, {"intent": "This function returns the C string starting at memory `address` address as a bytes object .", "snippet": "ctypes.string_at(address)"}, {"intent": "Close the bound socket or named pipe of the listener object .", "snippet": "listener.close()"}, {"intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`, `loop`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, loop=None)"}, {"intent": "The host mask, as an IPv4Address object.", "snippet": "i_pv4_network.hostmask"}, {"intent": "Set to a filename containing the FS_NONASCII character.", "snippet": "test.support.TESTFN_NONASCII"}, {"intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "snippet": "bytes.expandtabs(tabsize=8)"}, {"intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_expires`.", "snippet": "FileCookieJar.revert(ignore_expires=False)"}, {"intent": "Get the beginning or ending index of the completion scope .", "snippet": "readline.get_endidx()"}, {"intent": "An integer representing the version of the NNTP protocol supported by the server.", "snippet": "NNTP.nntp_version"}, {"intent": "A context managers that temporarily replaces the named stream with io.StringIO object .", "snippet": "test.support.captured_stdin()"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "snippet": "venv.create(env_dir, clear=False)"}, {"intent": "Determines if the module is a package based on path . With arguments `fullname`.", "snippet": "sourceless_file_loader.is_package(fullname)"}, {"intent": "A subclass of SSLError raised when the SSL connection has been terminated abruptly.", "snippet": "ssl.SSLEOFError"}, {"intent": "Return a pretty-printed version of the document . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "snippet": "Node.toprettyxml(encoding=None)"}, {"intent": "Create a barrier object for `parties` number of threads . `timeout` is the default timeout value if none is specified for the wait ( ) method .", "snippet": "threading.Barrier(parties, timeout=None)"}, {"intent": "Windows only: Creates WinDLL instances.", "snippet": "ctypes.windll"}, {"intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "snippet": "xml.etree.ElementTree.XML(text)"}, {"intent": "Extensible JSON encoder for Python data structures . If `allow_nan` is true ( the default ) , then NaN , Infinity , and -Infinity will be encoded as such .", "snippet": "json.JSONEncoder(allow_nan=True)"}, {"intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "snippet": "meta_path_finder.find_spec(fullname, path)"}, {"intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `ssl_handshake_timeout`.", "snippet": "loop.start_tls(transport, protocol, sslcontext, ssl_handshake_timeout=None)"}, {"intent": "The UUID variant, which determines the internal layout of the UUID.", "snippet": "UUID.variant"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)"}, {"intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "snippet": "email.generator.BytesGenerator(outfp, maxheaderlen=None)"}, {"intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript . The meaning for `attrs` is the same as in output ( ) .", "snippet": "Morsel.OutputString(attrs=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `method` is the compression algorithm .", "snippet": "zlib.compressobj(zdict, method=DEFLATED)"}, {"intent": "Exception raised when a specified section is not found.", "snippet": "configparser.NoSectionError"}, {"intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "snippet": "importlib.resources.open_text(package, resource, encoding='utf-8', errors='strict')"}, {"intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `loop`.", "snippet": "asyncio.open_unix_connection(loop=None)"}, {"intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "snippet": "mailbox.values()"}, {"intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "snippet": "test.support.check__all__(test_case, module, extra=(), blacklist=())"}, {"intent": "Generic implementation of the unittest load_tests protocol for use in test packages . `pkg_dir` is the root directory of the package ; `loader` , `standard_tests` , and `pattern` are the arguments expected by load_tests .", "snippet": "test.support.load_package_tests(pkg_dir, loader, standard_tests, pattern)"}, {"intent": "Return the highest index in the sequence where the subsequence `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "snippet": "bytes.rfind(sub, start)"}, {"intent": "Returns the root element for this tree .", "snippet": "element_tree.getroot()"}, {"intent": "Encapsulate an XML error or warning . When instantiated , `msg` should be a human-readable description of the error . Note that although the handlers defined in the ErrorHandler interface receive instances of this `exception` , it is not required to actually raise the exception \u2014 it is also useful as a container for information .", "snippet": "xml.sax.SAXException(msg, exception=None)"}, {"intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "snippet": "zlib.adler32(data, value)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False)"}, {"intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "snippet": "pickle.dumps(obj, protocol=None)"}, {"intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `errors`.", "snippet": "urllib.parse.quote_plus(string, errors=None)"}, {"intent": "`policy` is an object implementing the CookiePolicy interface . With arguments `filename`, `delayload`.", "snippet": "http.cookiejar.FileCookieJar(filename, delayload=None)"}, {"intent": "Return time object with same hour , minute , second , microsecond , fold , and tzinfo attributes .", "snippet": "datetime.timetz()"}, {"intent": "Return the thread stack `size` used when creating new threads .", "snippet": "_thread.stack_size()"}, {"intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "snippet": "Cmd.postcmd(stop, line)"}, {"intent": "Return the result of rotating the digits of the first operand by an amount specified by the second operand . With arguments `other`.", "snippet": "decimal.rotate(other)"}, {"intent": "Return the `path` to an executable which would be run if the given `cmd` was called .", "snippet": "shutil.which(cmd, path=None)"}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(user='anonymous', acct='')"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "snippet": "email.headerregistry.Address(username='', domain='')"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, key='view', plist=)"}, {"intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "snippet": "gettext.bind_textdomain_codeset(domain, codeset=None)"}, {"intent": "Stop monitoring the `fd` file descriptor for write availability .", "snippet": "loop.remove_writer(fd)"}, {"intent": "Represents the C 16-bit signed int datatype.", "snippet": "ctypes.c_int16"}, {"intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "snippet": "test_loader.discover(start_dir, top_level_dir=None)"}, {"intent": "Cast a memoryview to a new `format` or `shape` .", "snippet": "memoryview.cast(format)"}, {"intent": "Guess the extensions for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "snippet": "mimetypes.guess_all_extensions(type, strict=True)"}, {"intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "snippet": "types.prepare_class(name, bases=())"}, {"intent": "Similar to the guess_all_extensions ( ) function , using the tables stored as part of the object . With arguments `type`.", "snippet": "mime_types.guess_all_extensions(type)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well .", "snippet": "tarfile.TarFile()"}, {"intent": "Enter raw mode .", "snippet": "curses.raw()"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`, `optimize`.", "snippet": "zipfile.PyZipFile(file, mode='r', optimize=-1)"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `flags`.", "snippet": "select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD)"}, {"intent": "No message of desired type", "snippet": "errno.ENOMSG"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `system_site_packages`, `prompt`.", "snippet": "venv.create(env_dir, system_site_packages=False, prompt=None)"}, {"intent": "Identify yourself to an ESMTP server using EHLO . The hostname argument defaults to the fully qualified domain `name` of the local host .", "snippet": "SMTP.ehlo(name='')"}, {"intent": "enum.IntFlag collection of OP_* constants.", "snippet": "ssl.Options"}, {"intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`, `locals`.", "snippet": "pdb.runeval(expression, globals=None, locals=None)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getint(section, option, fallback, raw=False, vars=None)"}, {"intent": "Closes the mmap .", "snippet": "mmap.close()"}, {"intent": "Constants for Windows\u2019 WSAIoctl().", "snippet": "socket.SIO_RCVALL"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, max_num_fields=None)"}, {"intent": "Name of the file in which the class is defined.", "snippet": "Class.file"}, {"intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "snippet": "source_file_loader.load_module(name=None)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")"}, {"intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "snippet": "sys._current_frames()"}, {"intent": "Interact with process : Send data to stdin .", "snippet": "Popen.communicate()"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "snippet": "http.client.HTTPConnection(host)"}, {"intent": "The mathematical constant e = 2.718281\u2026, to available precision.", "snippet": "math.e"}, {"intent": "Return a copy of the sequence with specified leading bytes removed .", "snippet": "bytes.lstrip()"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite .", "snippet": "doctest.DocTestSuite()"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . With arguments `\\t'`.", "snippet": "header.encode(\\t', splitchars=';, maxlinelen=None)"}, {"intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "snippet": "email_message.make_related(boundary=None)"}, {"intent": "An ordered mapping of parameters\u2019 names to the corresponding Parameter objects.", "snippet": "signature.parameters"}, {"intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `errors` may be given to define the error handling . With arguments `filename`.", "snippet": "codecs.open(filename, mode='r', errors='strict')"}, {"intent": "Move turtle to the origin \u2013 coordinates ( 0,0 ) \u2013 and set its heading to its start-orientation ( which depends on the mode , see mode ( ) ) .", "snippet": "turtle.home()"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "snippet": "doctest.testfile(filename, report=True)"}, {"intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "snippet": "turtle.onrelease(fun, btn=1)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "snippet": "pkgutil.walk_packages(path=None, onerror=None)"}, {"intent": "Register a `function` that can respond to XML-RPC requests .", "snippet": "SimpleXMLRPCServer.register_function(function=None)"}, {"intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `delayload`.", "snippet": "http.cookiejar.LWPCookieJar(filename, delayload=None)"}, {"intent": "Walk a stack following f.f_back from the given frame , yielding the frame and line number for each frame . If `f` is None , the current stack is used .", "snippet": "traceback.walk_stack(f)"}, {"intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . `level` is used internally . `include_default` , if true , prints the default type as well . With arguments `msg`.", "snippet": "email.iterators._structure(msg, fp=None, level=0, include_default=False)"}, {"intent": "Extract all `members` from the archive to the current working directory .", "snippet": "ZipFile.extractall(members=None)"}, {"intent": "Equivalent to 0 (ie.", "snippet": "DefaultCookiePolicy.DomainLiberal"}, {"intent": "Possible value for SSLContext.verify_flags.", "snippet": "ssl.VERIFY_CRL_CHECK_CHAIN"}, {"intent": "Given a certificate as an ASCII PEM string , returns a DER-encoded sequence of bytes for that same certificate . With arguments `PEM_cert_string`.", "snippet": "ssl.PEM_cert_to_DER_cert(PEM_cert_string)"}, {"intent": "True if the address is reserved for site-local usage.", "snippet": "i_pv6_address.is_site_local"}, {"intent": "Return e raised to the power `x` , where e = 2.718281\u2026 is the base of natural logarithms .", "snippet": "math.exp(x)"}, {"intent": "Get an `option` value for the named `section` . If `vars` is provided , it must be a dictionary .", "snippet": "config_parser.get(section, option, vars=None)"}, {"intent": "Permission bits.", "snippet": "TarInfo.mode"}, {"intent": "Represent the path as a file URI .", "snippet": "PurePath.as_uri()"}, {"intent": "Restore the previous font .", "snippet": "formatter.pop_font()"}, {"intent": "Extended header setting . `_name` is the header field to add and `_value` is the primary value for the header . With arguments `**_params`.", "snippet": "message.add_header(_name, _value, **_params)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extract(member, path=\"\", set_attrs=True, numeric_owner=False)"}, {"intent": "Return the entire message flattened as a bytes object . When optional `unixfrom` is true , the envelope header is included in the returned string .", "snippet": "message.as_bytes(unixfrom=False)"}, {"intent": "The error setting of the decoder or encoder.", "snippet": "text_io_base.errors"}, {"intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "snippet": "str.find(sub, start)"}, {"intent": "When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff.", "snippet": "doctest.REPORT_CDIFF"}, {"intent": "These are string constants containing Bluetooth addresses with special meanings.", "snippet": "socket.BDADDR_LOCAL"}, {"intent": "Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.", "snippet": "test.support.TESTFN_UNDECODABLE"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "snippet": "email_message.set_param(param, value, replace=False)"}, {"intent": "Return a new set with elements in either the set or `other` but not both .", "snippet": "set.symmetric_difference(other)"}, {"intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "snippet": "CookiePolicy.return_ok(cookie, request)"}, {"intent": "The Example that failed.", "snippet": "UnexpectedException.example"}, {"intent": "Try to guess which module an `object` was defined in .", "snippet": "inspect.getmodule(object)"}, {"intent": "Raised under some error conditions when parsing the RFC 5322 headers of a message, this class is derived from MessageParseError.", "snippet": "email.errors.HeaderParseError"}, {"intent": "Like rfind ( ) but raises ValueError when the substring `sub` is not found .", "snippet": "str.rindex(sub)"}, {"intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "snippet": "os.getxattr(path, attribute)"}, {"intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "snippet": "bytes_generator.clone(fp)"}, {"intent": "Removes the extended filesystem `attribute` attribute from `path` . With arguments `follow_symlinks`.", "snippet": "os.removexattr(path, attribute, follow_symlinks=True)"}, {"intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "snippet": "config_parser.optionxform(option)"}, {"intent": "When called without arguments this `function` removes the control-c handler if it has been installed .", "snippet": "unittest.removeHandler(function=None)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extractall(path=\".\", numeric_owner=False)"}, {"intent": "Returns information about a `key` , as a tuple .", "snippet": "winreg.QueryInfoKey(key)"}, {"intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "snippet": "subprocess.check_output(args, errors=None)"}, {"intent": "A boolean representing whether or not the mock object has been called:", "snippet": "mock.called"}, {"intent": "Class implementing bounded semaphore objects .", "snippet": "threading.BoundedSemaphore()"}, {"intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "snippet": "mmap.find(sub, start)"}, {"intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "snippet": "widget.start(interval=None)"}, {"intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "snippet": "bytes(source, encoding, errors)"}, {"intent": "Create a Unix connection . `path` is the name of a Unix domain socket and is required , unless a `sock` parameter is specified . With arguments `protocol_factory`.", "snippet": "loop.create_unix_connection(protocol_factory, sock=None)"}, {"intent": "Return the exception of the Task .", "snippet": "task.exception()"}, {"intent": "Invalid request code", "snippet": "errno.EBADRQC"}, {"intent": "Construct a ZipInfo instance for a file on the filesystem , in preparation for adding it to a zip file . `filename` should be the path to a file or directory on the filesystem . If `arcname` is specified , it is used as the name within the archive .", "snippet": "ZipInfo.from_file(filename, arcname=None)"}, {"intent": "Additional known values of the encoding field from the AU header, but which are not supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_DOUBLE"}, {"intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "snippet": "oss_audio_device.setfmt(format)"}, {"intent": "A tuple of positional arguments values.", "snippet": "bound_arguments.args"}, {"intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "Queue.get(block=True, timeout=None)"}, {"intent": "Remove the value of `a` at index `b` .", "snippet": "operator.__delitem__(a, b)"}, {"intent": "If the origin_server attribute is set, this attribute\u2019s value is used to set the default SERVER_SOFTWARE WSGI environment variable, and also to set a default Server: header in HTTP responses.", "snippet": "base_handler.server_software"}, {"intent": "A \u201chandler of last resort\u201d is available through this attribute.", "snippet": "logging.lastResort"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "snippet": "locale.currency(val, grouping=False, international=False)"}, {"intent": "Return the natural ( base e ) logarithm of the operand .", "snippet": "decimal.ln()"}, {"intent": "Represents the C 64-bit unsigned int datatype.", "snippet": "ctypes.c_uint64"}, {"intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs . The optional `flags` argument has the same meaning as for recv ( ) above .", "snippet": "socket.sendall(bytes, flags)"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "snippet": "zipfile.ZipFile(file, mode='r', allowZip64=True)"}, {"intent": "True if the address is otherwise IETF reserved.", "snippet": "i_pv4_address.is_reserved"}, {"intent": "Reset the instance .", "snippet": "HTMLParser.reset()"}, {"intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "snippet": "window.insnstr(str, n, attr)"}, {"intent": "Send a blank line to the server , signalling the end of the headers .", "snippet": "HTTPConnection.endheaders()"}, {"intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "snippet": "element_tree.write(file, encoding=\"us-ascii\")"}, {"intent": "Though being an exception (a subclass of URLError), an HTTPError can also function as a non-exceptional file-like return value (the same thing that urlopen() returns).", "snippet": "urllib.error.HTTPError"}, {"intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "snippet": "DatagramTransport.sendto(data)"}, {"intent": "A First In First Out scheduling policy.", "snippet": "os.SCHED_FIFO"}, {"intent": "Return the charset parameter of the Content-Type header , coerced to lower case .", "snippet": "message.get_content_charset()"}, {"intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "snippet": "operator.__iconcat__(a, b)"}, {"intent": "Return the outcome of the test `b` in `a` .", "snippet": "operator.contains(a, b)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "snippet": "nntplib.NNTP_SSL(host, timeout)"}, {"intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`, `path`.", "snippet": "finder.find_module(fullname, path=None)"}, {"intent": "Make the '.'", "snippet": "re.DOTALL"}, {"intent": "Return an iterator over the instructions in the supplied function , method , source code string or code object . With arguments `x`.", "snippet": "dis.get_instructions(x)"}, {"intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "snippet": "IMAP4.setannotation(mailbox, entry, attribute)"}, {"intent": "This method creates a ctypes instance , copying the buffer from the `source` object buffer which must be readable . The optional `offset` parameter specifies an offset into the source buffer in bytes ; the default is zero .", "snippet": "_c_data.from_buffer_copy(source, offset)"}, {"intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "snippet": "bdb.runeval(expr, globals=None, locals=None)"}, {"intent": "Fork .", "snippet": "pty.fork()"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "snippet": "chunk.Chunk(file)"}, {"intent": "Test that a `regex` search matches ( or does not match ) `text` .", "snippet": "test_case.assertNotRegex(text, regex)"}, {"intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "snippet": "decimal.Decimal(value=\"0\", context=None)"}, {"intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`, `context`.", "snippet": "loop.call_at(when, callback, *args, context=None)"}, {"intent": "Connect to the given `host` and `port` . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt .", "snippet": "FTP.connect(host='', timeout=None)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "snippet": "platform.libc_ver(version='')"}, {"intent": "Return the greatest common divisor of the integers `a` and `b` .", "snippet": "math.gcd(a, b)"}, {"intent": "Create a string buffer from a TarInfo object . With arguments `errors`.", "snippet": "TarInfo.tobuf(errors='surrogateescape')"}, {"intent": "Status code returned by server.", "snippet": "HTTPResponse.status"}, {"intent": "Constants used in the mask arguments.", "snippet": "tkinter.EXCEPTION"}, {"intent": "Creates and returns a tree iterator for the root element .", "snippet": "element_tree.iter()"}, {"intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fdel` is a function for deleting an attribute value .", "snippet": "property(fget=None, fdel=None)"}, {"intent": "This method does nothing . With arguments `record`.", "snippet": "null_handler.emit(record)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, default=None, maxval=None)"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "snippet": "directory.start_component(component=None)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted .", "snippet": "html_diff.make_file(fromlines, tolines)"}, {"intent": "Update LINES and COLS .", "snippet": "curses.update_lines_cols()"}, {"intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "snippet": "bdb.run(cmd, globals=None, locals=None)"}, {"intent": "This is the abstract base class for all policy classes . With arguments `**kw`.", "snippet": "email.policy.Policy(**kw)"}, {"intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "snippet": "mimetypes.guess_extension(type, strict=True)"}, {"intent": "Get the abbreviated name of the n-th day of the week.", "snippet": "ABDAY_1 ... ABDAY_7"}, {"intent": "Group name.", "snippet": "TarInfo.gname"}, {"intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "snippet": "io.TextIOWrapper(buffer, errors=None)"}, {"intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "snippet": "turtle.setpos(x)"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token . With arguments `col_info`.", "snippet": "parser.st2list(st, line_info=False, col_info=False)"}, {"intent": "The part of the name following the colon if there is one, else the entire name.", "snippet": "Attr.localName"}, {"intent": "Copies the file `src` to the file or directory `dst` .", "snippet": "shutil.copy(src, dst)"}, {"intent": "Return the value for a qualified `name` .", "snippet": "AttributesNS.getValueByQName(name)"}, {"intent": "Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set `sigset` .", "snippet": "signal.sigwaitinfo(sigset)"}, {"intent": "Same as Element.findtext ( ) , starting at the root of the tree . With arguments `match`.", "snippet": "element_tree.findtext(match)"}, {"intent": "Create a shared threading.Semaphore object and return a proxy for it . With arguments `value`.", "snippet": "sync_manager.Semaphore(value)"}, {"intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "snippet": "str.count(sub, start)"}, {"intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "snippet": "logging.handlers.MemoryHandler(capacity, target=None)"}, {"intent": "Exception when a node does not exist in the referenced context.", "snippet": "xml.dom.NotFoundErr"}, {"intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `useTk`.", "snippet": "tkinter.Tk(baseName=None, useTk=1)"}, {"intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "snippet": "mailbox.iterkeys()"}, {"intent": "Create and return a new element node . With arguments `tagName`.", "snippet": "Document.createElement(tagName)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `skipkeys` is true ( `default` : False ) , then dict keys that are not of a basic type ( str , int , float , bool , None ) will be skipped instead of raising a TypeError . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, default=None)"}, {"intent": "Logs a message with level CRITICAL on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "logging.critical(msg, *args, **kwargs)"}, {"intent": "Return current position in the file , with the same disclaimer for the Wave_read.tell ( ) and Wave_read.setpos ( ) methods .", "snippet": "Wave_write.tell()"}, {"intent": "Files in both a and b.", "snippet": "dircmp.common_files"}, {"intent": "Tries to determine the default locale settings and returns them as a tuple of the form ( language code , encoding ) . To maintain compatibility with other platforms , not only the LANG variable is tested , but a list of variables given as `envvars` parameter .", "snippet": "locale.getdefaultlocale(envvars)"}, {"intent": "Sets new `limits` of consumption of `resource` .", "snippet": "resource.setrlimit(resource, limits)"}, {"intent": "Return a copy of the object centered in a sequence of length `width` . Padding is done using the specified `fillbyte` ( default is an ASCII space ) .", "snippet": "bytearray.center(width, fillbyte)"}, {"intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "snippet": "loop.create_server(protocol_factory, host=None)"}, {"intent": "Send a `file` over a `transport` . `fallback` set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call ( e.g .", "snippet": "loop.sendfile(transport, file, fallback=True)"}, {"intent": "Returns sample width in bytes .", "snippet": "Wave_read.getsampwidth()"}, {"intent": "Return a randomly generated salt of the specified `method` . `rounds` specifies the number of rounds for METHOD_SHA256 , METHOD_SHA512 and METHOD_BLOWFISH .", "snippet": "crypt.mksalt(rounds=None)"}, {"intent": "Compute the stack effect of `opcode` with argument `oparg` .", "snippet": "dis.stack_effect(opcode)"}, {"intent": "Start debugging from `frame` .", "snippet": "bdb.set_trace(frame)"}, {"intent": "Group identifier of the file owner.", "snippet": "stat_result.st_gid"}, {"intent": "The name of the cookie.", "snippet": "Morsel.key"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "snippet": "socket.getaddrinfo(host, port, family=0)"}, {"intent": "Like ngettext ( ) , but look the message up in the specified `domain` . With arguments `singular`, `plural`, `n`.", "snippet": "gettext.dngettext(domain, singular, plural, n)"}, {"intent": "On Unix and Windows , return the argument with an initial component of ~ or ~user replaced by that user \u2019 s home directory . An initial ~user is handled by stripping the last directory component from the created user `path` derived above .", "snippet": "os.path.expanduser(path)"}, {"intent": "A list of strings representing the recognized file suffixes for extension modules.", "snippet": "importlib.machinery.EXTENSION_SUFFIXES"}, {"intent": "This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported.", "snippet": "os.WCONTINUED"}, {"intent": "Set the instance \u2019 s debugging `level` .", "snippet": "NNTP.set_debuglevel(level)"}, {"intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "snippet": "array.array(typecode)"}, {"intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . With arguments `**_params`.", "snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params)"}, {"intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "snippet": "pdb.runeval(expression)"}, {"intent": "Remove ( delete ) the file `path` .", "snippet": "os.remove(path)"}, {"intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "snippet": "importlib.resources.open_text(package, resource, errors='strict')"}, {"intent": "Return the value of the ( natural ) exponential function e**x at the given number . With arguments `context`.", "snippet": "decimal.exp(context=None)"}, {"intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "snippet": "locale.ERA_D_T_FMT"}, {"intent": "Create a new server instance . All parameters have the same meaning as for SimpleXMLRPCServer ; `requestHandler` defaults to DocXMLRPCRequestHandler . With arguments `addr`.", "snippet": "xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler)"}, {"intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) . `_class` and `policy` are interpreted as with the BytesParser class constructor .", "snippet": "email.message_from_binary_file(fp, _class=None)"}, {"intent": "Return true if path appears to be for a package . With arguments `fullname`.", "snippet": "source_file_loader.is_package(fullname)"}, {"intent": "Return the subprocess return code as an integer or None if it hasn \u2019 t returned , which is similar to the subprocess.Popen.returncode attribute .", "snippet": "SubprocessTransport.get_returncode()"}, {"intent": "If tzinfo is None , returns None , else returns self.tzinfo.utcoffset ( None ) , and raises an exception if the latter doesn \u2019 t return None or a timedelta object with magnitude less than one day .", "snippet": "time.utcoffset()"}, {"intent": "The binary data encapsulated by the Binary instance.", "snippet": "binary.data"}, {"intent": "Create a FIFO ( a named pipe ) named `path` with numeric `mode` mode .", "snippet": "os.mkfifo(path, mode=0o666)"}, {"intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "snippet": "os.WSTOPPED"}, {"intent": "Change the stream position to the given `offset` .", "snippet": "text_io_base.seek(offset)"}, {"intent": "Exit code that means that some kind of configuration error occurred.", "snippet": "os.EX_CONFIG"}, {"intent": "Print a help message , including the program usage and information about the arguments registered with the ArgumentParser .", "snippet": "ArgumentParser.print_help()"}, {"intent": "Change owner `user` and/or `group` of the given `path` .", "snippet": "shutil.chown(path)"}, {"intent": "Writes all the attributes of a `key` to the registry .", "snippet": "winreg.FlushKey(key)"}, {"intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "snippet": "shutil.copyfileobj(fsrc, fdst, length)"}, {"intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`, `callback`, `error_callback`.", "snippet": "pool.starmap_async(func, iterable, chunksize, callback, error_callback)"}, {"intent": "Return a list of the names of sequences that include this message .", "snippet": "mh_message.get_sequences()"}, {"intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "snippet": "socket.AF_CAN"}, {"intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "snippet": "email_message.get_boundary(failobj=None)"}, {"intent": "A list of strings representing the file suffixes for non-optimized bytecode modules.", "snippet": "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"}, {"intent": "CRC-32 of the uncompressed file.", "snippet": "ZipInfo.CRC"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "snippet": "lzma.open(filename)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "snippet": "connection.backup(target)"}, {"intent": "When the noqiflush ( ) routine is used , normal flush of input and output queues associated with the INTR , QUIT and SUSP characters will not be done .", "snippet": "curses.noqiflush()"}, {"intent": "Return a set of all tasks for an event `loop` .", "snippet": "task.all_tasks(loop=None)"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "snippet": "fileinput.FileInput(files=None)"}, {"intent": "Parameters to the sendfile() function, if the implementation supports them.", "snippet": "os.SF_NODISKIO"}, {"intent": "This method returns a ctypes type instance using the memory specified by `address` which must be an integer .", "snippet": "_c_data.from_address(address)"}, {"intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "snippet": "deque.index(x)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "snippet": "unittest.TextTestRunner(verbosity=1)"}, {"intent": "Get information on the specified clock as a namespace object . With arguments `name`.", "snippet": "time.get_clock_info(name)"}, {"intent": "This method is called to process a named character reference of the form & `name` ; ( e.g .", "snippet": "HTMLParser.handle_entityref(name)"}, {"intent": "Set the internal flag to true .", "snippet": "event.set()"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional argument `name` gives the name of the module ; by default , or if None , m.__name__ is used .", "snippet": "doctest.testmod(name=None)"}, {"intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "snippet": "binascii.crc32(data)"}, {"intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "snippet": "AU_read.getparams()"}, {"intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "snippet": "os.utime(path, dir_fd=None)"}, {"intent": "Return the sample standard deviation ( the square root of the sample variance ) . With arguments `data`, `xbar`.", "snippet": "statistics.stdev(data, xbar=None)"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs .", "snippet": "os.register_at_fork()"}, {"intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "snippet": "joinable_queue.send_bytes(buffer)"}, {"intent": "Update the physical screen .", "snippet": "curses.doupdate()"}, {"intent": "A context managers that temporarily replaces the named stream with io.StringIO object .", "snippet": "test.support.captured_stdout()"}, {"intent": "Read all lines available on the input stream and return them as a list of lines . `sizehint` , if given , is passed as the size argument to the stream \u2019 s read ( ) method .", "snippet": "stream_reader.readlines(sizehint)"}, {"intent": "Return the absolute value of `x` .", "snippet": "math.fabs(x)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "snippet": "turtle.shapetransform(t12=None, t22=None)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)"}, {"intent": "Byte-compile all the .py files found along sys.path . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "snippet": "compileall.compile_path(maxlevels=0)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `tagname` , if specified and not None , is a string giving a tag name for the mapping . With arguments `access`.", "snippet": "mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT)"}, {"intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "snippet": "os.lchown(path, uid, gid)"}, {"intent": "Called when the `test` case test is about to be run .", "snippet": "test_result.startTest(test)"}, {"intent": "A non-callable version of MagicMock . With arguments `*args`, `**kw`.", "snippet": "unittest.mock.NonCallableMagicMock(*args, **kw)"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, eq=True)"}, {"intent": "Return a string of `size` random bytes suitable for cryptographic use .", "snippet": "os.urandom(size)"}, {"intent": "Flag to use as mode parameter.", "snippet": "ctypes.RTLD_GLOBAL"}, {"intent": "Run the command described by `args` .", "snippet": "subprocess.call(args)"}, {"intent": "Flags that specify what action lockf() will take.", "snippet": "os.F_LOCK"}, {"intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "snippet": "signature.bind_partial(*args, **kwargs)"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `prompt`.", "snippet": "venv.create(env_dir, prompt=None)"}, {"intent": "Flush the write buffers of the stream if applicable .", "snippet": "io_base.flush()"}, {"intent": "Value used to identify the event.", "snippet": "kevent.ident"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs, spec_set=None)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "snippet": "pkgutil.walk_packages(onerror=None)"}, {"intent": "The default mode which is used to load shared libraries.", "snippet": "ctypes.DEFAULT_MODE"}, {"intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "snippet": "turtle.backward(distance)"}, {"intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object . Passing the optional `timeout` parameter will set the timeout on the socket instance before attempting to connect . If supplied , `source_address` must be a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "snippet": "socket.create_connection(address, timeout, source_address)"}, {"intent": "Holds a string containing the greeting sent by the client in its \u201cHELO\u201d.", "snippet": "smtp_channel.seen_greeting"}, {"intent": "Start a Unix socket server . With arguments `client_connected_cb`, `ssl`.", "snippet": "asyncio.start_unix_server(client_connected_cb, ssl=None)"}, {"intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "snippet": "FTP.voidcmd(cmd)"}, {"intent": "The same as http_error_301 ( ) , but called for the \u2018 temporary redirect \u2019 response . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)"}, {"intent": "Return the square root of `x` .", "snippet": "math.sqrt(x)"}, {"intent": "Return True if either the real or the imaginary part of `x` is an infinity , and False otherwise .", "snippet": "cmath.isinf(x)"}, {"intent": "If set to true stop() will be called on the first failure or error, halting the test run.", "snippet": "test_result.failfast"}, {"intent": "Change the `mode` of `path` to the numeric mode .", "snippet": "os.chmod(path, mode)"}, {"intent": "Pickles the record \u2019 s attribute dictionary and writes it to the socket in binary format .", "snippet": "datagram_handler.emit()"}, {"intent": "( Only supported on Linux 2.5.44 and newer . ) `flags` is deprecated and completely ignored .", "snippet": "select.epoll(flags=0)"}, {"intent": "Return a new SSLContext object with default settings for the given `purpose` .", "snippet": "ssl.create_default_context()"}, {"intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "snippet": "mmap.rfind(sub, start, end)"}, {"intent": "Some curses routines  that  return  an integer, such as  napms(), return OK upon success.", "snippet": "curses.OK"}, {"intent": "Base class for text streams.", "snippet": "io.TextIOBase"}, {"intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "snippet": "dis.dis(file=None, depth=None)"}, {"intent": "Return a copy of the sequence left filled with ASCII b ' 0 ' digits to make a sequence of length `width` .", "snippet": "bytes.zfill(width)"}, {"intent": "Release the underlying buffer exposed by the memoryview object .", "snippet": "memoryview.release()"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`, `streamwriter`.", "snippet": "codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None)"}, {"intent": "This is raised if data is specified for a node which does not support data.", "snippet": "xml.dom.NoDataAllowedErr"}, {"intent": "The value to be used for the wsgi.run_once environment variable.", "snippet": "base_handler.wsgi_run_once"}, {"intent": "A subclass of Mailbox for mailboxes in MMDF format . With arguments `path`.", "snippet": "mailbox.MMDF(path)"}, {"intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "snippet": "DocCGIXMLRPCRequestHandler.set_server_title(server_title)"}, {"intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "snippet": "ArgumentParser.exit(message=None)"}, {"intent": "Similar to map ( `func` , `*iterables` ) except :", "snippet": "executor.map(func, *iterables)"}, {"intent": "Simple JSON decoder . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' .", "snippet": "json.JSONDecoder(parse_constant=None)"}, {"intent": "Write `rootObject` to an XML plist file . `pathOrFile` may be either a file name or a ( writable and binary ) file object", "snippet": "plistlib.writePlist(rootObject, pathOrFile)"}, {"intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "snippet": "turtle.pos()"}, {"intent": "Suspend execution of the calling thread for the given number of seconds . With arguments `secs`.", "snippet": "time.sleep(secs)"}, {"intent": "Set the `value` of the named cookie-attribute . With arguments `name`.", "snippet": "Cookie.set_nonstandard_attr(name, value)"}, {"intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "snippet": "parser.st2tuple(st, line_info=False)"}, {"intent": "These are the possible values for si_code in the result returned by waitid().", "snippet": "os.CLD_EXITED"}, {"intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "snippet": "email_message.preamble"}, {"intent": "Return the result of the Task .", "snippet": "task.result()"}, {"intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "snippet": "telnetlib.Telnet(timeout)"}, {"intent": "Called with `data` holding an arbitrary amount of received data .", "snippet": "async_chat.collect_incoming_data(data)"}, {"intent": "Wait for the child process to terminate .", "snippet": "process.wait()"}, {"intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)"}, {"intent": "Signals a test failure unconditionally , with `msg` or None for the error message .", "snippet": "test_case.fail(msg=None)"}, {"intent": "Start debugging from `frame` .", "snippet": "bdb.set_trace()"}, {"intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "snippet": "decimal.logical_xor(other)"}, {"intent": "Read and return `size` bytes , or if size is not given or negative , until EOF or if the read call would block in non-blocking mode .", "snippet": "buffered_reader.read()"}, {"intent": "Extended header setting . `_name` is the header field to add and `_value` is the primary value for the header . With arguments `**_params`.", "snippet": "email_message.add_header(_name, _value, **_params)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, timeout, cafile=None)"}, {"intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked . `format` is the archive format : one of \u201c zip \u201d , \u201c tar \u201d , \u201c gztar \u201d , \u201c bztar \u201d , or \u201c xztar \u201d .", "snippet": "shutil.unpack_archive(filename, extract_dir, format)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, filters=None)"}, {"intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "snippet": "config_parser.items(section)"}, {"intent": "Return the current process \u2019 s real user id .", "snippet": "os.getuid()"}, {"intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)"}, {"intent": "Create a new instance to handle XML-RPC requests in a CGI environment.", "snippet": "xmlrpc.server.DocCGIXMLRPCRequestHandler"}, {"intent": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.", "snippet": "doc_test.docstring"}, {"intent": "Removes the specified handler `hdlr` from this logger .", "snippet": "queue_listener.removeHandler(hdlr)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "snippet": "TarFile.extractall(path=\".\")"}, {"intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`, `bind_and_activate`.", "snippet": "socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)"}, {"intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `delayload`, `policy`.", "snippet": "http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)"}, {"intent": "Push a `line` of source text to the interpreter .", "snippet": "InteractiveConsole.push(line)"}, {"intent": "Denominator of the Fraction in lowest term.", "snippet": "fraction.denominator"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "lzma.open(filename, encoding=None)"}, {"intent": "enum.IntEnum collection of ALERT_DESCRIPTION_* constants.", "snippet": "ssl.AlertDescription"}, {"intent": "Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open().", "snippet": "typing.TextIO"}, {"intent": "A `message` with Maildir-specific behaviors .", "snippet": "mailbox.MaildirMessage(message=None)"}, {"intent": "Retrieve a finder for the given `path_item` .", "snippet": "pkgutil.get_importer(path_item)"}, {"intent": "String containing the name of the device file.", "snippet": "oss_audio_device.name"}, {"intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object .", "snippet": "ZipFile.open(name)"}, {"intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "snippet": "bytearray(source, encoding, errors)"}, {"intent": "Close the iterator and free acquired resources .", "snippet": "scandir.close()"}, {"intent": "Pushes a None on to the producer queue .", "snippet": "async_chat.close_when_done()"}, {"intent": "Removes the item with the index `i` from the array and returns it .", "snippet": "array.pop()"}, {"intent": "This read-only attribute provides the rowid of the last modified row.", "snippet": "cursor.lastrowid"}, {"intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) .", "snippet": "imaplib.IMAP4_SSL()"}, {"intent": "Return code of the process when it exits.", "snippet": "process.returncode"}, {"intent": "Close the connection unilaterally .", "snippet": "FTP.close()"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `backup`.", "snippet": "fileinput.FileInput(backup='')"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "snippet": "bytes.rsplit(sep=None)"}, {"intent": "In range(60).", "snippet": "time.minute"}, {"intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "snippet": "logging.handlers.TimedRotatingFileHandler(filename, backupCount=0)"}, {"intent": "Return a copy of the object right justified in a sequence of length `width` .", "snippet": "bytearray.rjust(width)"}, {"intent": "Implements the 'namereplace ' error handling ( for encoding with text encodings only ) : the unencodable character is replaced by a \\N { ... } escape sequence . With arguments `exception`.", "snippet": "codecs.namereplace_errors(exception)"}, {"intent": "Base class for all exceptions that include an SMTP error code.", "snippet": "smtplib.SMTPResponseException"}, {"intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) .", "snippet": "syslog.openlog()"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "bytes.split(sep=None, maxsplit=-1)"}, {"intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `handle`.", "snippet": "ctypes.PyDLL(name, handle=None)"}, {"intent": "Duplicate a socket and prepare it for sharing with a target process . The target process must be provided with `process_id` .", "snippet": "socket.share(process_id)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `checker`, `optionflags`.", "snippet": "doctest.DebugRunner(checker=None, optionflags=0)"}, {"intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "snippet": "counter.most_common()"}, {"intent": "Return the thread stack `size` used when creating new threads .", "snippet": "threading.stack_size()"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "snippet": "SMTP.starttls(certfile=None, context=None)"}, {"intent": "Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator .", "snippet": "float.as_integer_ratio()"}, {"intent": "This method is the main public interface to the TextTestRunner . A TestResult is created by calling _makeResult ( ) and the `test` ( s ) are run and the results printed to stdout .", "snippet": "text_test_runner.run(test)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used .", "snippet": "tempfile.mkstemp(suffix=None, prefix=None)"}, {"intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "snippet": "os.fchdir(fd)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "snippet": "email_message.del_param(param, header='content-type')"}, {"intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `type`.", "snippet": "dispatcher.create_socket(type=socket.SOCK_STREAM)"}, {"intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates .", "snippet": "winreg.CreateKeyEx(key, sub_key)"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "snippet": "py_compile.compile(file, optimize=-1)"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), versioninfo=('')"}, {"intent": "Return the lowest index in the data where the subsequence `sub` is found , such that sub is contained in the slice s [ `start` : `end` ] .", "snippet": "bytes.find(sub, start, end)"}, {"intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`, `sinfo`.", "snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, sinfo=None)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs, strict_parsing=False)"}, {"intent": "Read and return the contents of `resource` within `package` as a str .", "snippet": "importlib.resources.read_text(package, resource)"}, {"intent": "Load MIME type information from an open file `fp` . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "snippet": "mime_types.readfp(fp, strict=True)"}, {"intent": "Maximum size of a deque or None if unbounded.", "snippet": "deque.maxlen"}, {"intent": "Concrete class for urldefrag ( ) results containing bytes data . With arguments `url`, `fragment`.", "snippet": "urllib.parse.DefragResultBytes(url, fragment)"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `system_site_packages`.", "snippet": "venv.create(env_dir, system_site_packages=False)"}, {"intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)"}, {"intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "snippet": "SimpleXMLRPCRequestHandler.rpc_paths"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, timeout, capath=None)"}, {"intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "snippet": "null_translations.lngettext(singular, plural, n)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) .", "snippet": "argparse.FileType()"}, {"intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "snippet": "doc_test_runner.run(test, out=None, clear_globs=True)"}, {"intent": "Files and subdirectories in both a and b.", "snippet": "dircmp.common"}, {"intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "snippet": "pickle.dumps(obj, fix_imports=True)"}, {"intent": "Close the stream if it was opened by wave , and make the instance unusable .", "snippet": "Wave_read.close()"}, {"intent": "Not a directory", "snippet": "errno.ENOTDIR"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `charset`.", "snippet": "html_diff.make_file(fromlines, tolines, charset='utf-8')"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)"}, {"intent": "Resets the codec buffers used for keeping state .", "snippet": "stream_reader.reset()"}, {"intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "snippet": "bytes.count(sub)"}, {"intent": "Object whose attributes correspond roughly to the members of the stat structure.", "snippet": "os.stat_result"}, {"intent": "(default: derived from option strings)", "snippet": "Option.dest"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)"}, {"intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "snippet": "stream_handler.setStream(stream)"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files .", "snippet": "cgitb.enable(logdir=None)"}, {"intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "snippet": "dict.fromkeys(iterable)"}, {"intent": "Recursive directory creation function . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "snippet": "os.makedirs(name, exist_ok=False)"}, {"intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme .", "snippet": "sysconfig.get_path(name)"}, {"intent": "Return a copy of the object left justified in a sequence of length `width` .", "snippet": "bytearray.ljust(width)"}, {"intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "snippet": "pprint.PrettyPrinter(depth=None)"}, {"intent": "A boolean that is True if the barrier is in the broken state.", "snippet": "barrier.broken"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally .", "snippet": "lzma.LZMADecompressor()"}, {"intent": "Parameter `arg` should be a key-to-message mapping or an iterable of ( key , message ) pairs .", "snippet": "mailbox.update(arg)"}, {"intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)"}, {"intent": "Blocks until all items in the queue have been gotten and processed .", "snippet": "Queue.join()"}, {"intent": "Shut the turtlegraphics window .", "snippet": "turtle.bye()"}, {"intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)"}, {"intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "snippet": "xml.etree.ElementTree.parse(source, parser=None)"}, {"intent": "Exception raised when a response code in the range 500\u2013599 is received.", "snippet": "nntplib.NNTPPermanentError"}, {"intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`.", "snippet": "pool.starmap_async(func, iterable, chunksize)"}, {"intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "snippet": "@test.support.cpython_only(test)"}, {"intent": "Overlay the window on top of `destwin` . `sminrow` and `smincol` are the upper-left coordinates of the source window , and the other variables mark a rectangle in the destination window . With arguments `dminrow`, `dmincol`, `dmaxrow`, `dmaxcol`.", "snippet": "window.overlay(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol)"}, {"intent": "Exception raised when there is some error in the response data.", "snippet": "nntplib.NNTPDataError"}, {"intent": "Like min ( self , `other` ) except that the `context` rounding rule is applied before returning and that NaN values are either signaled or ignored ( depending on the context and whether they are signaling or quiet ) .", "snippet": "decimal.min(other, context=None)"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . With arguments `after_in_child`.", "snippet": "os.register_at_fork(after_in_child=None)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "snippet": "bytearray.rsplit()"}, {"intent": "Create a BytesParser instance . The `_class` and `policy` arguments have the same meaning and semantics as the _factory and policy arguments of BytesFeedParser .", "snippet": "email.parser.BytesParser(policy=policy.compat32)"}, {"intent": "Run command with arguments and return its output . With arguments `args`, `cwd`.", "snippet": "subprocess.check_output(args, cwd=None)"}, {"intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "snippet": "subprocess.run(args, stdin=None)"}, {"intent": "Create and return a new element with a namespace . The `tagName` may have a prefix . With arguments `namespaceURI`.", "snippet": "Document.createElementNS(namespaceURI, tagName)"}, {"intent": "Return the interpreter \u2019 s \u201c thread switch interval \u201d ; see setswitchinterval ( ) .", "snippet": "sys.getswitchinterval()"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "snippet": "test_case.assertNotAlmostEqual(first, second)"}, {"intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "snippet": "window.chgat(attr)"}, {"intent": "Tries to determine the name of the Linux OS distribution name . Returns a tuple ( `distname` , `version` , `id` ) which defaults to the args given as parameters . If `full_distribution_name` is true ( default ) , the full distribution read from the OS is returned . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), distname='', full_distribution_name=1)"}, {"intent": "Handle a `defect` found on `obj` .", "snippet": "policy.handle_defect(obj, defect)"}, {"intent": "Return the current position into the chunk .", "snippet": "chunk.tell()"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `bufsize`.", "snippet": "fileinput.FileInput(bufsize=0)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "snippet": "turtle.shapetransform(t11=None, t12=None)"}, {"intent": "The Formatter class has the following public methods:", "snippet": "string.Formatter"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "snippet": "timeit.timeit(number=1000000)"}, {"intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args)"}, {"intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`.", "snippet": "str.index(sub, start)"}, {"intent": "A deprecated alias of OSError.", "snippet": "socket.error"}, {"intent": "Set the entire message object \u2019 s `payload` to payload .", "snippet": "message.set_payload(payload)"}, {"intent": "Return a formatted multi-line string with detailed information about the code object , like code_info ( ) .", "snippet": "bytecode.info()"}, {"intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "snippet": "incremental_decoder.decode(object)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)"}, {"intent": "The operation has been cancelled.", "snippet": "asyncio.CancelledError"}, {"intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "snippet": "timeit.Timer(setup='pass', timer=<timer function>)"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "snippet": "str.split(sep=None)"}, {"intent": "Removes the extended filesystem `attribute` attribute from `path` .", "snippet": "os.removexattr(path, attribute)"}, {"intent": "Create a string buffer from a TarInfo object . With arguments `format`.", "snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False)"}, {"intent": "Uses an incremental encoder to iteratively encode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "snippet": "codecs.iterencode(iterator, encoding, **kwargs)"}, {"intent": "Return a copy of the object centered in a sequence of length `width` . Padding is done using the specified `fillbyte` ( default is an ASCII space ) .", "snippet": "bytes.center(width, fillbyte)"}, {"intent": "Reset all Turtles on the Screen to their initial state .", "snippet": "turtle.resetscreen()"}, {"intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`.", "snippet": "os.stat(path, dir_fd=None)"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "snippet": "email.headerregistry.Address(username='', addr_spec=None)"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "snippet": "binascii.b2a_qp(data, istext=True)"}, {"intent": "Pass the barrier .", "snippet": "barrier.wait()"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "snippet": "ftplib.FTP_TLS(passwd='')"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)"}, {"intent": "The Example that failed.", "snippet": "DocTestFailure.example"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null', plist=)"}, {"intent": "Return a complete message of byte data sent from the other end of the connection as a string . If `maxlength` is specified and the message is longer than maxlength then OSError is raised and the connection will no longer be readable .", "snippet": "joinable_queue.recv_bytes(maxlength)"}, {"intent": "Assert that running the interpreter with args and optional environment variables env_vars fails ( rc ! = 0 ) and return a ( return code , stdout , stderr ) tuple . With arguments `*args`, `**env_vars`.", "snippet": "test.support.script_helper.assert_python_failure(*args, **env_vars)"}, {"intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "snippet": "io_base.readline(size=-1)"}, {"intent": "Return the bitwise and of `a` and `b` .", "snippet": "operator.__and__(a, b)"}, {"intent": "Handle an error of the given protocol . With arguments `proto`, `*args`.", "snippet": "OpenerDirector.error(proto, *args)"}, {"intent": "The same as SMTP except that utf8 is True.", "snippet": "email.policy.SMTPUTF8"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "snippet": "asyncio.wait(aws, timeout=None)"}, {"intent": "Abstract base class for generic types.", "snippet": "typing.Generic"}, {"intent": "In range(60).", "snippet": "datetime.minute"}, {"intent": "For a nonzero number , return the adjusted exponent of its operand as a Decimal instance .", "snippet": "decimal.logb()"}, {"intent": "Bind the socket to `address` .", "snippet": "socket.bind(address)"}, {"intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "snippet": "bytes.replace(old, new, count)"}, {"intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "snippet": "dataclasses.astuple(instance, tuple_factory=tuple)"}, {"intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "snippet": "cgitb.handler(info=None)"}, {"intent": "Concrete implementation of InspectLoader.get_source ( ) . With arguments `fullname`.", "snippet": "source_loader.get_source(fullname)"}, {"intent": "Test that `expr` is true ( or false ) .", "snippet": "test_case.assertFalse(expr)"}, {"intent": "Wide char variant of getche ( ) , returning a Unicode value .", "snippet": "msvcrt.getwche()"}, {"intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None, initargs=())"}, {"intent": "Implementation of Loader.load_module ( ) . With arguments `fullname`.", "snippet": "inspect_loader.load_module(fullname)"}, {"intent": "For options with action \"callback\", the callable to call when this option is seen.", "snippet": "Option.callback"}, {"intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "snippet": "fractions.Fraction(numerator=0)"}, {"intent": "Return a frame object from the call stack . If optional integer `depth` is given , return the frame object that many calls below the top of the stack .", "snippet": "sys._getframe(depth)"}, {"intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "snippet": "test_loader.loadTestsFromName(name, module=None)"}, {"intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "snippet": "IMAP4.thread(threading_algorithm, charset)"}, {"intent": "Return a new set with elements common to the set and all others . With arguments `*others`.", "snippet": "set.intersection(*others)"}, {"intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type .", "snippet": "multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)"}, {"intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . If the `src` file is specified , it is interpreted relative to the current directory . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "snippet": "directory.add_file(file, src=None, version=None, language=None)"}, {"intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered .", "snippet": "select.epoll(sizehint=-1)"}, {"intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `host` is not specified , `` ( the local host ) is used .", "snippet": "imaplib.IMAP4_SSL(host='')"}, {"intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)"}, {"intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "snippet": "Match.span()"}, {"intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "snippet": "email_message.get_boundary()"}, {"intent": "Constants for Linux host/guest communication.", "snippet": "SO_VM*"}, {"intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "snippet": "tempfile.mkdtemp(suffix=None)"}, {"intent": "Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart .", "snippet": "bytearray.lower()"}, {"intent": "Address space of a memory block (int).", "snippet": "trace.domain"}, {"intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, new_callable=None)"}, {"intent": "Return the list of ciphers shared by the client during the handshake .", "snippet": "SSLSocket.shared_ciphers()"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `ssl`.", "snippet": "asyncio.start_server(client_connected_cb, ssl=None)"}, {"intent": "Return the given window \u2019 s current background character/attribute pair .", "snippet": "window.getbkgd()"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories .", "snippet": "shutil.copytree(src, dst)"}, {"intent": "These attributes are true for the network as a whole if they are true for both the network address and the broadcast address.", "snippet": "i_pv4_network.is_link_local"}, {"intent": "Return the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) .", "snippet": "os.tcgetpgrp(fd)"}, {"intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)"}, {"intent": "Return the entire message flattened as a string . For backward compatibility with the base Message class `maxheaderlen` is accepted , but defaults to None , which means that by default the line length is controlled by the max_line_length of the `policy` .", "snippet": "email_message.as_string(policy=None)"}, {"intent": "Write the pickled representation of `obj` to the open file object given in the constructor .", "snippet": "pickler.dump(obj)"}, {"intent": "Close the TarFile .", "snippet": "TarFile.close()"}, {"intent": "Request named status conditions for `mailbox` . With arguments `names`.", "snippet": "IMAP4.status(mailbox, names)"}, {"intent": "Return the status of the lock : True if it has been acquired by some thread , False if not .", "snippet": "lock.locked()"}, {"intent": "Size of the file in bytes, if it is a regular file or a symbolic link.", "snippet": "stat_result.st_size"}, {"intent": "Return the Turtle object itself .", "snippet": "turtle.getturtle()"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "snippet": "doctest.DocTestSuite(module=None, globs=None)"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`.", "snippet": "http.client.HTTPResponse(sock, method=None)"}, {"intent": "Stop the child .", "snippet": "Popen.terminate()"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stderr`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stderr=subprocess.PIPE)"}, {"intent": "Set the orientation of the turtle to `to_angle` .", "snippet": "turtle.seth(to_angle)"}, {"intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "snippet": "math.log(x)"}, {"intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . If `compiled` is True , both source files will be compiled and added to the zip package . With arguments `pkg_name`.", "snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, compiled=False)"}, {"intent": "Return the ( namespace , localname ) pair for a qualified `name` .", "snippet": "AttributesNS.getNameByQName(name)"}, {"intent": "Pass to getrusage() to request resources consumed by child processes of the calling process which have been terminated and waited for.", "snippet": "resource.RUSAGE_CHILDREN"}, {"intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', policy=compat32)"}, {"intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "snippet": "shutil.register_archive_format(name, function, extra_args)"}, {"intent": "The smallest possible difference between non-equal time objects, timedelta(microseconds=1), although note that arithmetic on time objects is not supported.", "snippet": "time.resolution"}, {"intent": "Windows file attributes: dwFileAttributes member of the BY_HANDLE_FILE_INFORMATION structure returned by GetFileInformationByHandle().", "snippet": "stat_result.st_file_attributes"}, {"intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "snippet": "importlib.find_loader(name, path=None)"}, {"intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised .", "snippet": "email.mime.message.MIMEMessage(_msg)"}, {"intent": "Adds a response header to the headers buffer and logs the accepted request . With arguments `code`.", "snippet": "base_http_request_handler.send_response(code)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ThreadPoolExecutor(max_workers=None, initializer=None)"}, {"intent": "Wait for events . With arguments `maxevents`.", "snippet": "epoll.poll(maxevents=-1)"}, {"intent": "Acquire a lock , blocking or non-blocking . When invoked with a positive , floating-point value for `timeout` , block for at most the number of seconds specified by timeout as long as the lock can not be acquired .", "snippet": "lock.acquire(timeout=None)"}, {"intent": "Execute the code of the specified module and return the resulting module globals dictionary . The `mod_name` argument should be an absolute module name .", "snippet": "runpy.run_module(mod_name)"}, {"intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)"}, {"intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task . With arguments `loop`.", "snippet": "asyncio.shield(aw, loop=None)"}, {"intent": "Return a tuple containing names of globals in this function .", "snippet": "function.get_globals()"}, {"intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "snippet": "sys.getsizeof(object, default)"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "snippet": "locale.currency(val, symbol=True, grouping=False, international=False)"}, {"intent": "Return a file object associated with the socket . With arguments `newline`.", "snippet": "socket.makefile(newline=None)"}, {"intent": "Character offset into the line where the error occurred.", "snippet": "ExpatError.offset"}, {"intent": "Normally the __class__ attribute of an object will return its type.", "snippet": "mock.__class__"}, {"intent": "If `newindex` is specified , sets the combobox value to the element position newindex .", "snippet": "widget.current(newindex=None)"}, {"intent": "Return a new view of the underlying mapping \u2019 s values .", "snippet": "mapping_proxy_type.values()"}, {"intent": "Returns a copy of the decompression object .", "snippet": "Decompress.copy()"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(check=-1, filters=None)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest)"}, {"intent": "Return the current coordinates of the virtual screen cursor as a tuple ( y , x ) .", "snippet": "curses.getsyx()"}, {"intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "snippet": "turtle.done()"}, {"intent": "Raised on dbm.ndbm-specific errors, such as I/O errors.", "snippet": "dbm.ndbm.error"}, {"intent": "Return a list of the extended filesystem attributes on `path` .", "snippet": "os.listxattr()"}, {"intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "snippet": "Codec.encode(input, errors)"}, {"intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "snippet": "Wave_read.getnchannels()"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `topdown`.", "snippet": "os.fwalk(topdown=True)"}, {"intent": "To define an option with only a short option string : With arguments `*opt_str`.", "snippet": "OptionParser.add_option(*opt_str)"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . It \u2019 s common to use Unix sockets for LMTP , so our connect ( ) method must support that as well as a regular `host` : `port` server . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.LMTP(host='', source_address=None)"}, {"intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `invalidation_mode` should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime .", "snippet": "compileall.compile_dir(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)"}, {"intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers . With arguments `message_spec`.", "snippet": "NNTP.body(message_spec=None, file=None)"}, {"intent": "A bytes object which contains any bytes past the end of the compressed data.", "snippet": "Decompress.unused_data"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "snippet": "warnings.simplefilter(action, category=Warning, append=False)"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . The `exec_body` argument is a callback that is used to populate the freshly created class namespace . With arguments `bases`, `kwds`.", "snippet": "types.new_class(name, bases=(), kwds=None, exec_body=None)"}, {"intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "snippet": "turtle.shapesize(outline=None)"}, {"intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "snippet": "cgi.parse_multipart(fp, pdict, errors=\"replace\")"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)"}, {"intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "snippet": "io.open(file, opener=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)"}, {"intent": "Return a list of all the message \u2019 s header field names .", "snippet": "email_message.keys()"}, {"intent": "Set the current process \u2019 s real and effective group ids . With arguments `rgid`, `egid`.", "snippet": "os.setregid(rgid, egid)"}, {"intent": "Pass to getrusage() to request resources consumed by the current thread.", "snippet": "resource.RUSAGE_THREAD"}, {"intent": "Set the second sequence to be compared . With arguments `b`.", "snippet": "sequence_matcher.set_seq2(b)"}, {"intent": "Too many symbolic links encountered", "snippet": "errno.ELOOP"}, {"intent": "The module was found as a compiled code object file.", "snippet": "imp.PY_COMPILED"}, {"intent": "Registry entries subordinate to this key define the preferences of the current user.", "snippet": "winreg.HKEY_CURRENT_USER"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "snippet": "calendar.calendar(year, w=2, l=1)"}, {"intent": "The default asyncio policy.", "snippet": "asyncio.DefaultEventLoopPolicy"}, {"intent": "Base class for warnings about dubious syntax.", "snippet": "SyntaxWarning"}, {"intent": "Write the file named `filename` to the archive , giving it the archive name `arcname` ( by default , this will be the same as filename , but without a drive letter and with leading path separators removed ) .", "snippet": "ZipFile.write(filename, arcname=None)"}, {"intent": "Write audio frames and make sure nframes is correct . It will raise an error if the output stream is not seekable and the total number of frames that have been written after `data` has been written does not match the previously set value for nframes .", "snippet": "Wave_write.writeframes(data)"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "snippet": "gettext.translation(domain, localedir=None)"}, {"intent": "Registers the XML-RPC multicall function system.multicall .", "snippet": "SimpleXMLRPCServer.register_multicall_functions()"}, {"intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "snippet": "str.rfind(sub)"}, {"intent": "A bool indicating whether the memory is read only.", "snippet": "memoryview.readonly"}, {"intent": "Return the default content type .", "snippet": "message.get_default_type()"}, {"intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`.", "snippet": "calendar.month(theyear, themonth, w=0)"}, {"intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` . If optional keyword argument `initial_response_ok` is true , authobject ( ) will be called first with no argument .", "snippet": "SMTP.auth(mechanism, authobject, initial_response_ok=True)"}, {"intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server, directory=None)"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "snippet": "urllib.parse.quote(string, errors=None)"}, {"intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "snippet": "threading.Thread(group=None, name=None)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)"}, {"intent": "Converts an IMAP4 FLAGS response to a tuple of individual flags . With arguments `flagstr`.", "snippet": "imaplib.ParseFlags(flagstr)"}, {"intent": "Return the inverse hyperbolic sine of `x` .", "snippet": "math.asinh(x)"}, {"intent": "Returns the base 10 logarithm of `x` .", "snippet": "context.log10(x)"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "snippet": "urllib.parse.quote(string, safe='/', errors=None)"}, {"intent": "Transport endpoint is not connected", "snippet": "errno.ENOTCONN"}, {"intent": "Old getter/setter API for name ; use it directly as a property instead .", "snippet": "thread.setName()"}, {"intent": "Constants for Linux Kernel cryptography.", "snippet": "socket.AF_ALG"}, {"intent": "Create and return an attribute node with a namespace . With arguments `namespaceURI`, `qualifiedName`.", "snippet": "Document.createAttributeNS(namespaceURI, qualifiedName)"}, {"intent": "Route attribute access on a class to __getattr__ . With arguments `fset`, `doc`.", "snippet": "types.DynamicClassAttribute(fset=None, doc=None)"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `kwds`.", "snippet": "types.new_class(name, kwds=None)"}, {"intent": "Register the XML-RPC introspection functions system.listMethods , system.methodHelp and system.methodSignature .", "snippet": "CGIXMLRPCRequestHandler.register_introspection_functions()"}, {"intent": "These methods immediately delete the message . With arguments `key`.", "snippet": "mh.discard(key)"}, {"intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "snippet": "asyncio.BoundedSemaphore(value=1)"}, {"intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`, `pos`.", "snippet": "re.error(msg, pos=None)"}, {"intent": "Return buffered data without advancing the file position .", "snippet": "lzma_file.peek()"}, {"intent": "Encode the bytes-like object `b` using base85 ( as used in e.g .", "snippet": "base64.b85encode(b)"}, {"intent": "Determine whether `code` is in tableC.2.1 ( ASCII control characters ) .", "snippet": "stringprep.in_table_c21(code)"}, {"intent": "Is a directory", "snippet": "errno.EISDIR"}, {"intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable . `description` can be provided to describe the format , and will be returned by the get_unpack_formats ( ) function .", "snippet": "shutil.register_unpack_format(name, extensions, function, extra_args, description)"}, {"intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "snippet": "struct.pack_into(buffer, offset, v1, v2)"}, {"intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "snippet": "pool.apply_async(func, args, kwds, callback)"}, {"intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "snippet": "base64.b64decode(s, altchars=None, validate=False)"}, {"intent": "Similar to getch ( ) , but the keypress will be echoed if it represents a printable character .", "snippet": "msvcrt.getche()"}, {"intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`.", "snippet": "FileCookieJar.revert(ignore_discard=False)"}, {"intent": "Return the result when it arrives .", "snippet": "async_result.get()"}, {"intent": "Connect to a `host` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "snippet": "Telnet.open(host, timeout)"}, {"intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "snippet": "traceback.format_stack(limit=None)"}, {"intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "snippet": "textwrap.fill(text, **kwargs, width=70)"}, {"intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)"}, {"intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "snippet": "test_result.expectedFailures"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) .", "snippet": "html_diff.make_file(fromlines, tolines, todesc='')"}, {"intent": "The constant string used by the operating system to refer to the current directory.", "snippet": "os.curdir"}, {"intent": "If the message is a multipart/related , create a new message object , pass all of the arguments to its set_content ( ) method , and attach ( ) it to the multipart . With arguments `*args`, `**kw`.", "snippet": "email_message.add_related(*args, **kw)"}, {"intent": "Handle authentication with the proxy .", "snippet": "urllib.request.ProxyDigestAuthHandler()"}, {"intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "snippet": "json.JSONDecoder(parse_int=None)"}, {"intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment . If the `allow_fragments` argument is false , fragment identifiers are not recognized .", "snippet": "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)"}, {"intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`.", "snippet": "re.subn(pattern, repl, string, count=0)"}, {"intent": "The above constants are extensions and not present if they are not defined by the C library.", "snippet": "os.O_DIRECT"}, {"intent": "Print information on collectable objects found.", "snippet": "gc.DEBUG_COLLECTABLE"}, {"intent": "A generic version of collections.abc.Mapping . With arguments `Sized`.", "snippet": "typing.Mapping(Sized)"}, {"intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "snippet": "curses.ascii.isalpha(c)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")"}, {"intent": "The unformatted error message.", "snippet": "system_random.msg"}, {"intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "snippet": "timeit.Timer(stmt='pass', globals=None)"}, {"intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "snippet": "os.sched_getparam(pid)"}, {"intent": "A special class-level marker to specify absence of a return annotation.", "snippet": "signature.empty"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "snippet": "pkgutil.walk_packages(path=None, prefix='')"}, {"intent": "Return True if the symbol is a parameter .", "snippet": "symbol.is_parameter()"}, {"intent": "Used for half-delay mode , which is similar to cbreak mode in that characters typed by the user are immediately available to the program . However , after blocking for `tenths` tenths of seconds , raise an exception if nothing has been typed .", "snippet": "curses.halfdelay(tenths)"}, {"intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "snippet": "traceback.format_stack(f=None)"}, {"intent": "Possible value for SSLContext.verify_flags.", "snippet": "ssl.VERIFY_X509_TRUSTED_FIRST"}, {"intent": "Set the machine \u2019 s hostname to `name` .", "snippet": "socket.sethostname(name)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)"}, {"intent": "For a nonzero number , return the adjusted exponent of its operand as a Decimal instance . With arguments `context`.", "snippet": "decimal.logb(context=None)"}, {"intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below .", "snippet": "zlib.decompress(data, wbits=MAX_WBITS)"}, {"intent": "Return True if the event loop is currently running .", "snippet": "loop.is_running()"}, {"intent": "Copy the permission bits from `src` to `dst` . If `follow_symlinks` is false , and both src and dst are symbolic links , copymode ( ) will attempt to modify the mode of dst itself ( rather than the file it points to ) .", "snippet": "shutil.copymode(src, dst, follow_symlinks=True)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "snippet": "difflib.diff_bytes(dfunc, a, b, n=3)"}, {"intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "snippet": "inspect.getfullargspec(func)"}, {"intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "snippet": "email_message.set_boundary(boundary)"}, {"intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "snippet": "NNTP.login(user=None, password=None, usenetrc=True)"}, {"intent": "A formatter which does nothing .", "snippet": "formatter.NullFormatter()"}, {"intent": "A pull parser suitable for non-blocking applications .", "snippet": "xml.etree.ElementTree.XMLPullParser()"}, {"intent": "Whether the OpenSSL library has built-in support not checking subject common name and SSLContext.hostname_checks_common_name is writeable.", "snippet": "ssl.HAS_NEVER_CHECK_COMMON_NAME"}, {"intent": "Return True if the global import lock is currently held , else False .", "snippet": "imp.lock_held()"}, {"intent": "Return a string representing the `path` to which the symbolic link points . With arguments `dir_fd`.", "snippet": "os.readlink(path, dir_fd=None)"}, {"intent": "Reserved for future definition.", "snippet": "uuid.RESERVED_FUTURE"}, {"intent": "Concrete implementation of InspectLoader.get_code ( ) . With arguments `fullname`.", "snippet": "source_loader.get_code(fullname)"}, {"intent": "Boolean that should be set before handle_one_request() returns, indicating if another request may be expected, or if the connection should be shut down.", "snippet": "base_http_request_handler.close_connection"}, {"intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "snippet": "loop.sock_sendfile(sock, file, count=None)"}, {"intent": "The namespace (aka globals) that the examples should be run in.", "snippet": "doc_test.globs"}, {"intent": "Play the SystemQuestion sound.", "snippet": "winsound.MB_ICONQUESTION"}, {"intent": "Control parsing of parameter entities ( including the external DTD subset ) . Possible `flag` values are XML_PARAM_ENTITY_PARSING_NEVER , XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and XML_PARAM_ENTITY_PARSING_ALWAYS .", "snippet": "xmlparser.SetParamEntityParsing(flag)"}, {"intent": "Load cookies from a file . With arguments `filename`, `ignore_discard`.", "snippet": "FileCookieJar.load(filename=None, ignore_discard=False)"}, {"intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)"}, {"intent": "Return the last recorded polygon .", "snippet": "turtle.get_poly()"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `allow_none` and `encoding` parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, encoding=None)"}, {"intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "snippet": "statistics.pstdev(data, mu=None)"}, {"intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . If the `src` file is specified , it is interpreted relative to the current directory . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "snippet": "directory.add_file(file, src=None, language=None)"}, {"intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "snippet": "style.lookup(style, option, state=None, default=None)"}, {"intent": "Return the value for `key` if key is in the dictionary , else `default` .", "snippet": "dict.get(key)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "snippet": "email_message.del_param(param)"}, {"intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "snippet": "doc_test_runner.run(test, compileflags=None, out=None)"}, {"intent": "Return the inverse hyperbolic tangent of `x` .", "snippet": "cmath.atanh(x)"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code .", "snippet": "gettext.find(domain, localedir=None, languages=None)"}, {"intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "snippet": "wsgiref.headers.Headers()"}, {"intent": "Base class for warnings related to resource usage.", "snippet": "ResourceWarning"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "snippet": "multiprocessing.pool.Pool()"}, {"intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . With arguments `<'bytes'>`, `maintype`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cte=\"base64\")"}, {"intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "snippet": "decimal.is_infinite()"}, {"intent": "Return current file pointer position .", "snippet": "Wave_read.tell()"}, {"intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "snippet": "quopri.encodestring(s, header=False)"}, {"intent": "Create a string buffer from a TarInfo object . With arguments `encoding`.", "snippet": "TarInfo.tobuf(encoding=ENCODING)"}, {"intent": "Truncate the file corresponding to file descriptor `fd` , so that it is at most `length` bytes in size .", "snippet": "os.ftruncate(fd, length)"}, {"intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only . `filterfunc` , if given , must be a function taking a single string argument .", "snippet": "py_zip_file.writepy(pathname, basename='', filterfunc=None)"}, {"intent": "Creates a temporary directory in the most secure manner possible .", "snippet": "tempfile.mkdtemp()"}, {"intent": "Logs a message with level WARNING on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "logging.warning(msg, *args, **kwargs)"}, {"intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None .", "snippet": "xml.dom.getDOMImplementation(name=None)"}, {"intent": "All pending input is processed , and a bytes object containing the remaining uncompressed output is returned . The optional parameter `length` sets the initial size of the output buffer .", "snippet": "Decompress.flush(length)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)"}, {"intent": "Create a Unix connection . `path` is the name of a Unix domain socket and is required , unless a `sock` parameter is specified . With arguments `protocol_factory`.", "snippet": "loop.create_unix_connection(protocol_factory, path=None, sock=None)"}, {"intent": "Return the control character corresponding to the given character ( the character bit value is bitwise-anded with 0x1f ) . With arguments `c`.", "snippet": "curses.ascii.ctrl(c)"}, {"intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "snippet": "socket.recv_into(buffer)"}, {"intent": "Derived from BrokenExecutor (formerly RuntimeError), this exception class is raised when one of the workers of a ProcessPoolExecutor has terminated in a non-clean fashion (for example, if it was killed from the outside).", "snippet": "concurrent.futures.process.BrokenProcessPool"}, {"intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "snippet": "IMAP4.starttls(ssl_context=None)"}, {"intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "snippet": "doctest.DocTestFailure(test, example, got)"}, {"intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "snippet": "SMTP.starttls(keyfile=None, certfile=None)"}, {"intent": "`a` = ifloordiv ( a , `b` ) is equivalent to a //= b .", "snippet": "operator.ifloordiv(a, b)"}, {"intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent . The meaning for `attrs` is the same as in output ( ) .", "snippet": "Morsel.js_output(attrs=None)"}, {"intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "snippet": "io_base.truncate(size=None)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `numlines`.", "snippet": "html_diff.make_table(fromlines, tolines, numlines=5)"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None)"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "snippet": "doctest.run_docstring_examples(f, globs, verbose=False, compileflags=None)"}, {"intent": "Returns the list of children belonging to `item` .", "snippet": "widget.get_children()"}, {"intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) . With arguments `context`.", "snippet": "decimal.normalize(context=None)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "snippet": "smtplib.SMTP(timeout, source_address=None)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)"}, {"intent": "CGI-based invocation via sys.stdin, sys.stdout, sys.stderr and os.environ.", "snippet": "wsgiref.handlers.CGIHandler"}, {"intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "snippet": "heapq.heappushpop(heap, item)"}, {"intent": "Overridable interface to open unknown URL types . With arguments `fullurl`.", "snippet": "ur_lopener.open_unknown(fullurl)"}, {"intent": "Write coverage results .", "snippet": "coverage_results.write_results()"}, {"intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`, `context`.", "snippet": "decimal.max_mag(other, context=None)"}, {"intent": "Handles the Content-Transfer-Encoding header.", "snippet": "email.headerregistry.ContentTransferEncoding"}, {"intent": "Send a LAST command .", "snippet": "NNTP.last()"}, {"intent": "Handle authentication with the proxy . `password_mgr` , if given , should be something that is compatible with HTTPPasswordMgr ; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported .", "snippet": "urllib.request.ProxyDigestAuthHandler(password_mgr=None)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`.", "snippet": "tempfile.TemporaryDirectory(prefix=None)"}, {"intent": "Create a BaseManager object . `address` is the address on which the manager process listens for new connections .", "snippet": "multiprocessing.managers.BaseManager(address)"}, {"intent": "Return a representation of the message corresponding to `key` . If no such message exists , `default` is returned if the method was called as get ( ) and a KeyError exception is raised if the method was called as __getitem__ ( ) .", "snippet": "mailbox.get(key, default=None)"}, {"intent": "Return the \u2018 thread identifier \u2019 of the current thread .", "snippet": "_thread.get_ident()"}, {"intent": "Return a dictionary containing all the named subgroups of the match , keyed by the subgroup name . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "snippet": "Match.groupdict(default=None)"}, {"intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "snippet": "logging.Formatter(fmt=None, datefmt=None, style='%')"}, {"intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer .", "snippet": "smtpd.SMTPServer(localaddr, remoteaddr)"}, {"intent": "Return the number of items in the queue .", "snippet": "queue.qsize()"}, {"intent": "An ABC with one abstract method __round__ that is covariant in its return type.", "snippet": "typing.SupportsRound"}, {"intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", disposition=None)"}, {"intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` . With arguments `dir_fd`.", "snippet": "os.mknod(path, device=0, dir_fd=None)"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established .", "snippet": "asyncio.start_server(client_connected_cb)"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)"}, {"intent": "A concrete implementation of importlib.abc.ExecutionLoader for extension modules . The `fullname` argument specifies the name of the module the loader is to support . The `path` argument is the path to the extension module \u2019 s file .", "snippet": "importlib.machinery.ExtensionFileLoader(fullname, path)"}, {"intent": "The version of the Unicode database used in this module.", "snippet": "unicodedata.unidata_version"}, {"intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "snippet": "itertools.zip_longest(*iterables)"}, {"intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "snippet": "mapping_proxy_type.get(key)"}, {"intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`, `query_opt`.", "snippet": "style.map(style, **kw, query_opt=None)"}, {"intent": "Close the transport .", "snippet": "BaseTransport.close()"}, {"intent": "Uuencode file `in_file` into file `out_file` .", "snippet": "uu.encode(in_file, out_file)"}, {"intent": "Extract a `member` from the archive to the current working directory , using its full name . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extract(member, numeric_owner=False)"}, {"intent": "Create a new server instance . With arguments `addr`.", "snippet": "xmlrpc.server.DocXMLRPCServer(addr)"}, {"intent": "Flushes the builder buffers , and returns the toplevel document element .", "snippet": "tree_builder.close()"}, {"intent": "Print a table of contents for the archive to sys.stdout .", "snippet": "ZipFile.printdir()"}, {"intent": "If `selop` is not specified , returns selected `items` .", "snippet": "widget.selection()"}, {"intent": "Return the scheduling policy for the process with PID `pid` .", "snippet": "os.sched_getscheduler(pid)"}, {"intent": "Indicates the format that the module uses.", "snippet": "marshal.version"}, {"intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "snippet": "lock.acquire(waitflag=1, timeout=-1)"}, {"intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `path`, `loop`.", "snippet": "asyncio.open_unix_connection(path=None, loop=None)"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . It \u2019 s common to use Unix sockets for LMTP , so our connect ( ) method must support that as well as a regular `host` : `port` server . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.LMTP(port=LMTP_PORT, local_hostname=None)"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)"}, {"intent": "Return the decoded contents of the pointed-to file as a string : With arguments `errors`.", "snippet": "Path.read_text(errors=None)"}, {"intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "snippet": "heapq.nsmallest(n, iterable, key=None)"}, {"intent": "Module : email.mime.text `_text` is the string for the payload . `_subtype` is the minor type and defaults to plain .", "snippet": "email.mime.text.MIMEText(_text, _subtype='plain')"}, {"intent": "Illegal seek", "snippet": "errno.ESPIPE"}, {"intent": "Create a WSGIServer instance . `server_address` should be a ( host , port ) tuple , and `RequestHandlerClass` should be the subclass of http.server.BaseHTTPRequestHandler that will be used to process requests .", "snippet": "wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)"}, {"intent": "The same as imap ( ) except that the ordering of the results from the returned iterator should be considered arbitrary . With arguments `func`, `iterable`.", "snippet": "pool.imap_unordered(func, iterable)"}, {"intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)"}, {"intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "snippet": "codecs.BOM_LE"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `failfast` , `catchbreak` and `buffer` parameters have the same effect as the same-name command-line options .", "snippet": "unittest.main(catchbreak=None)"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "snippet": "message.get_params(failobj=None, header='content-type')"}, {"intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object . Optional `headersonly` is a flag specifying whether to stop parsing after reading the headers or not .", "snippet": "bytes_parser.parse(fp, headersonly=False)"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "snippet": "message.get_param(param, failobj=None, header='content-type', unquote=True)"}, {"intent": "Prevents a TLSv1 connection.", "snippet": "ssl.OP_NO_TLSv1"}, {"intent": "List mailbox names in `directory` matching `pattern` .", "snippet": "IMAP4.list()"}, {"intent": "Property returning a new ChainMap containing all of the maps in the current instance except the first one.", "snippet": "chain_map.parents"}, {"intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default .", "snippet": "xmlrpc.client.loads(data)"}, {"intent": "Returns true if the element has an attribute named by `namespaceURI` and `localName` .", "snippet": "Element.hasAttributeNS(namespaceURI, localName)"}, {"intent": "Return True if the symbol is assigned to in its block .", "snippet": "symbol.is_assigned()"}, {"intent": "`a` = iand ( a , `b` ) is equivalent to a & = b .", "snippet": "operator.__iand__(a, b)"}, {"intent": "Return the entire message flattened as a bytes object . The `policy` argument may be used to override the default policy obtained from the message instance .", "snippet": "email_message.as_bytes(policy=None)"}, {"intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "snippet": "parser.parsestr(text, headersonly=False)"}, {"intent": "Write a `prompt` and read a line .", "snippet": "InteractiveConsole.raw_input()"}, {"intent": "Between MINYEAR and MAXYEAR inclusive.", "snippet": "datetime.year"}, {"intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `kwargs`.", "snippet": "scheduler.enter(delay, priority, action, kwargs={})"}, {"intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "snippet": "HTTPConnection.putrequest(method, url, skip_host=False)"}, {"intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers . If the optional second argument `mu` is given , it should be the mean of data .", "snippet": "statistics.pvariance(data, mu=None)"}, {"intent": "Remove the module named `module_name` from sys.modules and delete any byte-compiled files of the module .", "snippet": "test.support.forget(module_name)"}, {"intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "snippet": "turtle.fd(distance)"}, {"intent": "Leave raw mode .", "snippet": "curses.noraw()"}, {"intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "snippet": "os.rename(src, dst, dst_dir_fd=None)"}, {"intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed . With arguments `tb`.", "snippet": "dis.distb(tb=None)"}, {"intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "snippet": "buffered_io_base.read1(size)"}, {"intent": "Write a file into the archive . `zinfo_or_arcname` is either the file name it will be given in the archive , or a ZipInfo instance . The contents is `data` , which may be either a str or a bytes instance ; if it is a str , it is encoded as UTF-8 first . Similarly , `compresslevel` will override the constructor if given .", "snippet": "ZipFile.writestr(zinfo_or_arcname, data, compresslevel=None)"}, {"intent": "Assert that running the interpreter with args and optional environment variables env_vars succeeds ( rc == 0 ) and return a ( return code , stdout , stderr ) tuple . With arguments `*args`, `**env_vars`.", "snippet": "test.support.script_helper.assert_python_ok(*args, **env_vars)"}, {"intent": "Make an iterator that drops elements from the `iterable` as long as the `predicate` is true ; afterwards , returns every element .", "snippet": "itertools.dropwhile(predicate, iterable)"}, {"intent": "Return the value of `a` at index `b` .", "snippet": "operator.__getitem__(a, b)"}, {"intent": "The node that immediately follows this one with the same parent.", "snippet": "Node.nextSibling"}, {"intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "snippet": "bytes(source)"}, {"intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . If `all_threads` is True , produce tracebacks for every running thread .", "snippet": "faulthandler.enable(all_threads=True)"}, {"intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "snippet": "x in dictview"}, {"intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "snippet": "bytearray.hex()"}, {"intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "snippet": "POP3.uidl(which=None)"}, {"intent": "Like min ( self , `other` ) except that the `context` rounding rule is applied before returning and that NaN values are either signaled or ignored ( depending on the context and whether they are signaling or quiet ) .", "snippet": "decimal.min(other)"}, {"intent": "Create a new option flag with a given `name` , and return the new flag \u2019 s integer value .", "snippet": "doctest.register_optionflag(name)"}, {"intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "snippet": "test_case.assertListEqual(first, second, msg=None)"}, {"intent": "True when verbose output is enabled.", "snippet": "test.support.verbose"}, {"intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object .", "snippet": "pickle.loads(bytes_object)"}, {"intent": "The signal corresponding to the Ctrl+Break keystroke event.", "snippet": "signal.CTRL_BREAK_EVENT"}, {"intent": "Attempt to set up a connection to the listener which is using `address` address , returning a Connection .", "snippet": "multiprocessing.connection.Client(address)"}, {"intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "snippet": "audioop.findfit(fragment, reference)"}, {"intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to handle URLs with the given protocol . With arguments `req`.", "snippet": "BaseHandler.<protocol>_open(req)"}, {"intent": "Convert angle `x` from degrees to radians .", "snippet": "math.radians(x)"}, {"intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)"}, {"intent": "Whether check_hostname falls back to verify the cert\u2019s subject common name in the absence of a subject alternative name extension (default: true).", "snippet": "SSLContext.hostname_checks_common_name"}, {"intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "snippet": "difflib.Differ(linejunk=None, charjunk=None)"}, {"intent": "Write `value` to a plist file . The `fmt` argument specifies the format of the plist file and can be one of the following values : When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "snippet": "plistlib.dump(value, fp, fmt=FMT_XML, skipkeys=False)"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "snippet": "TarFile.gettarinfo(fileobj=None)"}, {"intent": "Returns sampling frequency .", "snippet": "Wave_read.getframerate()"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, capath=None)"}, {"intent": "Concrete class for urlparse ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "snippet": "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)"}, {"intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child .", "snippet": "Popen.communicate(input=None)"}, {"intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "snippet": "os.RTLD_LOCAL"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `todesc`.", "snippet": "html_diff.make_table(fromlines, tolines, todesc='')"}, {"intent": "select.select()-based selector.", "snippet": "selectors.SelectSelector"}, {"intent": "The above constants are only available on Unix.", "snippet": "os.O_DSYNC"}, {"intent": "The flag is set when the code object is a generator function, i.e.", "snippet": "inspect.CO_GENERATOR"}, {"intent": "Is raised by TarInfo.frombuf() if the buffer it gets is invalid.", "snippet": "tarfile.HeaderError"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned . The `flags` argument can be one or several of the AI_* constants , and will influence how results are computed and returned .", "snippet": "socket.getaddrinfo(host, port, family=0, flags=0)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "snippet": "bisect.bisect_right(a, x)"}, {"intent": "Time of most recent content modification expressed in nanoseconds as an integer.", "snippet": "stat_result.st_mtime_ns"}, {"intent": "Return the welcome message sent by the server in reply to the initial connection .", "snippet": "NNTP.getwelcome()"}, {"intent": "Return current file pointer position .", "snippet": "AU_read.tell()"}, {"intent": "Test that `first` is ( or is not ) in `second` .", "snippet": "test_case.assertNotIn(first, second)"}, {"intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT)"}, {"intent": "Always returns None . With arguments `dt`.", "snippet": "timezone.dst(dt)"}, {"intent": "For syntax errors - the compiler error message.", "snippet": "traceback_exception.msg"}, {"intent": "The value to be used for the wsgi.multiprocess environment variable.", "snippet": "base_handler.wsgi_multiprocess"}, {"intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "snippet": "widget.heading(column, **kw)"}, {"intent": "This module contains table contents for the standard sequence tables: AdminExecuteSequence, AdminUISequence, AdvtExecuteSequence, InstallExecuteSequence, and InstallUISequence.", "snippet": "msilib.sequence"}, {"intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "snippet": "HTTPResponse.readinto(b)"}, {"intent": "Returns true if `other` refers to the same node as this node .", "snippet": "Node.isSameNode(other)"}, {"intent": "An alias to collections.abc.Sized", "snippet": "typing.Sized"}, {"intent": "Return a string representing the `path` to which the symbolic link points .", "snippet": "os.readlink(path)"}, {"intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "snippet": "message.get_boundary(failobj=None)"}, {"intent": "Timeout duration, measured in seconds, or None if no timeout is desired.", "snippet": "base_server.timeout"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`, `incrementaldecoder`.", "snippet": "codecs.CodecInfo(encode, decode, streamreader=None, incrementaldecoder=None)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "snippet": "os.utime(path, ns, follow_symlinks=True)"}, {"intent": "Test that a `warning` is triggered when `callable` is called with any positional or keyword arguments that are also passed to assertWarns ( ) . With arguments `*args`, `**kwds`.", "snippet": "test_case.assertWarns(warning, callable, *args, **kwds)"}, {"intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument .", "snippet": "ipaddress.ip_network(address)"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "snippet": "Node.toprettyxml(newl=\"\\n\")"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)"}, {"intent": "Equivalent to get ( False ) .", "snippet": "SimpleQueue.get_nowait()"}, {"intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "snippet": "warnings.showwarning(message, category, filename, lineno, file=None, line=None)"}, {"intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "snippet": "decimal.localcontext()"}, {"intent": "Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems).", "snippet": "os.EX_NOPERM"}, {"intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "snippet": "decimal.logical_or(other, context=None)"}, {"intent": "Read at least one byte of cooked data unless EOF is hit .", "snippet": "Telnet.read_some()"}, {"intent": "Return a copy of the referent .", "snippet": "base_proxy._getvalue()"}, {"intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "snippet": "os.getenv(key, default=None)"}, {"intent": "QName wrapper . `text_or_uri` is a string containing the QName value , in the form { uri } local , or , if the `tag` argument is given , the URI part of a QName .", "snippet": "xml.etree.ElementTree.QName(text_or_uri)"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "snippet": "doctest.run_docstring_examples(f, globs, verbose=False, name=\"NoName\")"}, {"intent": "Pull the pen up \u2013 no drawing when moving .", "snippet": "turtle.penup()"}, {"intent": "Possible values for the mode parameter to the spawn* family of functions.", "snippet": "os.P_NOWAITO"}, {"intent": "Return a copy of the sequence with specified leading and trailing bytes removed .", "snippet": "bytearray.strip()"}, {"intent": "Return the match for `key` in map `mapname` , or raise an error ( nis.error ) if there is none . The `domain` argument allows overriding the NIS domain used for the lookup .", "snippet": "nis.match(key, mapname, domain=default_domain)"}, {"intent": "Attempt to find the loader to handle `fullname` within path .", "snippet": "file_finder.find_loader(fullname)"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`.", "snippet": "unittest.FunctionTestCase(testFunc, setUp=None)"}, {"intent": "Set the access and modified `times` of the file specified by `path` .", "snippet": "os.utime(path, times=None)"}, {"intent": "Similar to border ( ) , but both ls and rs are `vertch` and both ts and bs are `horch` .", "snippet": "window.box(vertch, horch)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "snippet": "email.utils.formatdate(usegmt=False)"}, {"intent": "Call the system call setpgrp ( ) or setpgrp ( 0 , 0 ) depending on which version is implemented ( if any ) .", "snippet": "os.setpgrp()"}, {"intent": "A subclass of AddressHeader that adds one additional attribute:", "snippet": "email.headerregistry.SingleAddressHeader"}, {"intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "snippet": "os.getenvb(key)"}, {"intent": "Return the length of the file , which can be larger than the size of the memory-mapped area .", "snippet": "mmap.size()"}, {"intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "snippet": "wsgiref.util.application_uri(environ)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "snippet": "csv.DictReader(f, *args, **kwds, restval=None)"}, {"intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "snippet": "re.MULTILINE"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "snippet": "gettext.install(domain, localedir=None, names=None)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "snippet": "difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)"}, {"intent": "Return the result of shifting the digits of the first operand by an amount specified by the second operand . With arguments `other`.", "snippet": "decimal.shift(other)"}, {"intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `timeout`.", "snippet": "ftplib.FTP_TLS(timeout=None)"}, {"intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "Queue.get(timeout=None)"}, {"intent": "This method can be called to signal that the set of tests being run should be aborted by setting the shouldStop attribute to True .", "snippet": "test_result.stop()"}, {"intent": "enum.IntEnum collection of CERT_* constants.", "snippet": "ssl.VerifyMode"}, {"intent": "Values of the encoding field from the AU header which are supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_MULAW_8"}, {"intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created .", "snippet": "bytes_generator.flatten(msg)"}, {"intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "snippet": "email.message_from_string(s, policy=policy.compat32)"}, {"intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "snippet": "datetime.fromordinal(ordinal)"}, {"intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "snippet": "sysconfig.parse_config_h(fp, vars)"}, {"intent": "Similar to parse ( ) , but parses from a buffer `string` received as a parameter . With arguments `handler`, `error_handler`.", "snippet": "xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())"}, {"intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `defaults`.", "snippet": "configparser.RawConfigParser(':'), ';'), defaults=None)"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), osinfo=('')"}, {"intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "snippet": "dict(**kwarg)"}, {"intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "snippet": "Codec.encode(input)"}, {"intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`, `encoding`.", "snippet": "bytearray(source, encoding)"}, {"intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "snippet": "turtle.distance(x, y=None)"}, {"intent": "Return or set the pencolor . With arguments `*args`.", "snippet": "turtle.pencolor(*args)"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, encoding=None)"}, {"intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "snippet": "re.VERBOSE"}, {"intent": "A subclass of Mailbox for mailboxes in Babyl format . With arguments `path`.", "snippet": "mailbox.Babyl(path)"}, {"intent": "The Tk class is instantiated without arguments . With arguments `screenName`.", "snippet": "tkinter.Tk(screenName=None)"}, {"intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "snippet": "os.W_OK"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb, chain=True)"}, {"intent": "Specifies that the STARTUPINFO.wShowWindow attribute contains additional information.", "snippet": "subprocess.STARTF_USESHOWWINDOW"}, {"intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data .", "snippet": "zlib.decompress(data)"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "snippet": "asyncio.wait(aws, loop=None, return_when=ALL_COMPLETED)"}, {"intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "snippet": "re.split(pattern, string, maxsplit=0, flags=0)"}, {"intent": "Set the sample width ( in bytes . ) With arguments `n`.", "snippet": "AU_write.setsampwidth(n)"}, {"intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "snippet": "bytearray.isalnum()"}, {"intent": "Returns None as bytecode files have no source when this loader is used . With arguments `fullname`.", "snippet": "sourceless_file_loader.get_source(fullname)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, preset=None)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getint(section, option, fallback, raw=False)"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `allow_none` and `encoding` parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, allow_none=False)"}, {"intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "snippet": "tkinter.tix.Tk(baseName=None)"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, width=80)"}, {"intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "snippet": "@unittest.skipUnless(condition, reason)"}, {"intent": "Exception raised for errors that are related to the database\u2019s operation and not necessarily under the control of the programmer, e.g.", "snippet": "sqlite3.OperationalError"}, {"intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "snippet": "str.zfill(width)"}, {"intent": "Join a `thread` within `timeout` .", "snippet": "test.support.join_thread(thread, timeout=30.0)"}, {"intent": "Construct an IPv6 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "snippet": "ipaddress.IPv6Network(address, strict=True)"}, {"intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "snippet": "mimetypes.init(files=None)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "snippet": "random.choices(population, cum_weights=None)"}, {"intent": "Pause the receiving end of the transport .", "snippet": "ReadTransport.pause_reading()"}, {"intent": "Enables CAN FD support in a CAN_RAW socket.", "snippet": "socket.CAN_RAW_FD_FRAMES"}, {"intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided .", "snippet": "code.interact(banner=None, readfunc=None)"}, {"intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . Optional `_encoder` is a callable ( i.e . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', _encoder=email.encoders.encode_base64, policy=compat32)"}, {"intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "snippet": "bytearray()"}, {"intent": "Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by `path` .", "snippet": "os.scandir(path='.')"}, {"intent": "Yield finder objects for the given module name .", "snippet": "pkgutil.iter_importers()"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "snippet": "TarFile.gettarinfo(name=None, fileobj=None)"}, {"intent": "Sets the locale for `category` to the default setting .", "snippet": "locale.resetlocale(category=LC_ALL)"}, {"intent": "Get the object wrapped by `func` . `stop` is an optional callback accepting an object in the wrapper chain as its sole argument that allows the unwrapping to be terminated early if the callback returns a true value .", "snippet": "inspect.unwrap(func, stop=None)"}, {"intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module .", "snippet": "coverage_results.write_results(show_missing=True, summary=False)"}, {"intent": "Create a shared threading.Event object and return a proxy for it .", "snippet": "sync_manager.Event()"}, {"intent": "A bitmask or\u2019ing together all the reporting flags above.", "snippet": "doctest.REPORTING_FLAGS"}, {"intent": "Like rfind ( ) but raises ValueError when the subsequence `sub` is not found . With arguments `start`, `end`.", "snippet": "bytes.rindex(sub, start, end)"}, {"intent": "Return a new set with elements in either the set or other but not both.", "snippet": "set ^ other"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "snippet": "BaseCookie.output(attrs=None)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `loader_state`.", "snippet": "importlib.machinery.ModuleSpec(name, loader, loader_state=None)"}, {"intent": "Deprecated and no longer used.", "snippet": "email.errors.BoundaryError"}, {"intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "snippet": "window.getstr(n)"}, {"intent": "Clear out the internal cache .", "snippet": "file_finder.invalidate_caches()"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . `limit` determines the buffer size limit used by the returned StreamReader instance .", "snippet": "asyncio.start_server(client_connected_cb, limit=None)"}, {"intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) . The optional `flag` argument supports only the semantics of ' c ' and ' n ' values .", "snippet": "dbm.dumb.open(filename, flag)"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value . The maximum line length can be specified explicitly via `maxlinelen` .", "snippet": "email.header.Header(s=None, maxlinelen=None)"}, {"intent": "Query or modify the options for the specified `item` . With arguments `**kw`.", "snippet": "widget.item(item, **kw)"}, {"intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "snippet": "quopri.decode(input, output)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(suffix='')"}, {"intent": "This is a subclass of POP3 that connects to the server over an SSL encrypted socket . `keyfile` and `certfile` are a legacy alternative to context - they can point to PEM-formatted private key and certificate chain files , respectively , for the SSL connection . With arguments `host`.", "snippet": "poplib.POP3_SSL(host, certfile=None)"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "snippet": "message.get_param(param, failobj=None, unquote=True)"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . With arguments `closefd`.", "snippet": "io.FileIO(name, mode='r', closefd=True)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object .", "snippet": "lzma.compress(data)"}, {"intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "snippet": "pool.starmap(func, iterable)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "snippet": "urllib.request.urlopen(url, data=None, capath=None)"}, {"intent": "Like max ( self , `other` ) except that the `context` rounding rule is applied before returning and that NaN values are either signaled or ignored ( depending on the context and whether they are signaling or quiet ) .", "snippet": "decimal.max(other, context=None)"}, {"intent": "Three locking mechanisms are used\u2014dot locking and , if available , the flock ( ) and lockf ( ) system calls .", "snippet": "mbox.unlock()"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')"}, {"intent": "The TestLoader class is used to create test suites from classes and modules.", "snippet": "unittest.TestLoader"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `month`, `day`.", "snippet": "date.replace(year=self.year, month=self.month, day=self.day)"}, {"intent": "High-resolution per-process timer from the CPU.", "snippet": "time.CLOCK_PROCESS_CPUTIME_ID"}, {"intent": "Seal will disable the automatic creation of mocks when accessing an attribute of the `mock` being sealed or any of its attributes that are already mocks recursively .", "snippet": "unittest.mock.seal(mock)"}, {"intent": "Remove a registered file descriptor from the epoll object . With arguments `fd`.", "snippet": "epoll.unregister(fd)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "snippet": "SSLContext.wrap_socket(sock, server_side=False, do_handshake_on_connect=True)"}, {"intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extractall(members=None, pwd=None)"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "snippet": "turtle.shapetransform(t11=None, t21=None)"}, {"intent": "Set the number of channels . With arguments `n`.", "snippet": "AU_write.setnchannels(n)"}, {"intent": "Read and return at most `size` characters from the stream as a single str .", "snippet": "text_io_base.read(size=-1)"}, {"intent": "If `flag` is True , curses will try and use hardware line editing facilities .", "snippet": "window.idlok(flag)"}, {"intent": "Return True if pathname `path` is a mount point : a point in a file system where a different file system has been mounted .", "snippet": "os.path.ismount(path)"}, {"intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`, `context`.", "snippet": "decimal.next_toward(other, context=None)"}, {"intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "snippet": "Wave_read.getparams()"}, {"intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "snippet": "object.__setstate__(state)"}, {"intent": "The CSS class for the whole month\u2019s table (used by formatmonth()).", "snippet": "html_calendar.cssclass_month"}, {"intent": "Creates a new context . The `clamp` field is either 0 ( the default ) or 1 .", "snippet": "decimal.Context(clamp=None)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")"}, {"intent": "Out of streams resources", "snippet": "errno.ENOSR"}, {"intent": "The exception raised when Expat reports an error.", "snippet": "xml.parsers.expat.ExpatError"}, {"intent": "Wait until the event is set .", "snippet": "event.wait()"}, {"intent": "Construct a ZipInfo instance for a file on the filesystem , in preparation for adding it to a zip file . `filename` should be the path to a file or directory on the filesystem .", "snippet": "ZipInfo.from_file(filename)"}, {"intent": "The module was found as a built-in module.", "snippet": "imp.C_BUILTIN"}, {"intent": "Reload a previously imported `module` .", "snippet": "importlib.reload(module)"}, {"intent": "Same as article ( ) , but sends a BODY command .", "snippet": "NNTP.body()"}, {"intent": "A context managers that temporarily replaces the named stream with io.StringIO object .", "snippet": "test.support.captured_stderr()"}, {"intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `wShowWindow`.", "snippet": "subprocess.STARTUPINFO(wShowWindow=0)"}, {"intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "snippet": "loop.set_debug(enabled: bool)"}, {"intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "snippet": "sqlite3.Row"}, {"intent": "List of socket.socket objects the server is listening on, or None if the server is closed.", "snippet": "server.sockets"}, {"intent": "Handle authentication with the remote host .", "snippet": "urllib.request.HTTPDigestAuthHandler()"}, {"intent": "This module contains definitions for the UIText and ActionText tables, for the standard installer actions.", "snippet": "msilib.text"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)"}, {"intent": "Return True if the path points to a character device ( or a symbolic link pointing to a character device ) , False if it points to another kind of file .", "snippet": "Path.is_char_device()"}, {"intent": "Return the turtle \u2019 s x coordinate .", "snippet": "turtle.xcor()"}, {"intent": "Return the value of the named header field . With arguments `name`.", "snippet": "message.get(name)"}, {"intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "snippet": "Queue.put(item, block=True, timeout=None)"}, {"intent": "The total number of bits in the address representation for this version: 32 for IPv4, 128 for IPv6.", "snippet": "i_pv4_address.max_prefixlen"}, {"intent": "Return the highest index in the sequence where the subsequence `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "snippet": "bytes.rfind(sub, start, end)"}, {"intent": "Create a shared threading.BoundedSemaphore object and return a proxy for it . With arguments `value`.", "snippet": "sync_manager.BoundedSemaphore(value)"}, {"intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "snippet": "email.encoders.encode_quopri(msg)"}, {"intent": "These functions are described in Files and Directories . With arguments `path`.", "snippet": "os.chdir(path)"}, {"intent": "Prepare the request by connecting to a proxy server . The `host` and `type` will replace those of the instance , and the instance \u2019 s selector will be the original URL given in the constructor .", "snippet": "Request.set_proxy(host, type)"}, {"intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "snippet": "decimal.to_integral_exact()"}, {"intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . With arguments `bufsize`.", "snippet": "xml.dom.minidom.parse(filename_or_file, bufsize=None)"}, {"intent": "An abbreviation for \u201c derive window \u201d , derwin ( ) is the same as calling subwin ( ) , except that `begin_y` and `begin_x` are relative to the origin of the window , rather than relative to the entire screen .", "snippet": "window.derwin(begin_y, begin_x)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "snippet": "email_message.del_param(param, requote=True)"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)"}, {"intent": "Call the set_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "snippet": "email_message.set_content(*args, **kw)"}, {"intent": "A read-only property.", "snippet": "Token.old_value"}, {"intent": "Wait until the result is available or until `timeout` seconds pass .", "snippet": "async_result.wait()"}, {"intent": "Exception raised when an error code signifying a permanent error (response codes in the range 500\u2013599) is received.", "snippet": "ftplib.error_perm"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "snippet": "smtpd.SMTPChannel(server, conn, addr, map=None, decode_data=False)"}, {"intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "snippet": "curses.qiflush()"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "snippet": "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "snippet": "gettext.find(domain, localedir=None, all=False)"}, {"intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "snippet": "datetime.isoweekday()"}, {"intent": "Returns the code object for name created from path . With arguments `fullname`.", "snippet": "sourceless_file_loader.get_code(fullname)"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)"}, {"intent": "Handles an error which has occurred during emit ( ) .", "snippet": "socket_handler.handleError()"}, {"intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size . The optional argument `fd` ( default STDOUT_FILENO , or standard output ) specifies which file descriptor should be queried .", "snippet": "os.get_terminal_size(fd=STDOUT_FILENO)"}, {"intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "snippet": "dis.show_code(x)"}, {"intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "snippet": "calendar.itermonthdays2(year, month)"}, {"intent": "Return the decoded contents of the pointed-to file as a string : With arguments `encoding`.", "snippet": "Path.read_text(encoding=None)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . `name` is the pathname of the archive .", "snippet": "tarfile.TarFile(name=None)"}, {"intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs . The rounding mode is determined by the rounding parameter if given , else by the given `context` .", "snippet": "decimal.to_integral_exact(context=None)"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `ensure_ascii`.", "snippet": "json.dumps(obj, **kw, ensure_ascii=True)"}, {"intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "snippet": "difflib.SequenceMatcher()"}, {"intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . `rest` means the same thing as in the transfercmd ( ) method .", "snippet": "FTP.retrbinary(cmd, callback, rest=None)"}, {"intent": "Class that simulates a `list` .", "snippet": "collections.UserList()"}, {"intent": "Close the sequence .", "snippet": "fileinput.close()"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "snippet": "http.client.HTTPResponse(sock)"}, {"intent": "( Not supported by all operating systems . )", "snippet": "select.poll()"}, {"intent": "Reset the internal flag to false .", "snippet": "event.clear()"}, {"intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`, `errors`.", "snippet": "Path.write_text(data, encoding=None, errors=None)"}, {"intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "snippet": "dict.pop(key)"}, {"intent": "This class is parallel to BytesParser , but handles string input . With arguments `policy`.", "snippet": "email.parser.Parser(policy=policy.compat32)"}, {"intent": "This method is called to process decimal and hexadecimal numeric character references of the form & # NNN ; and & # xNNN ; . With arguments `name`.", "snippet": "HTMLParser.handle_charref(name)"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, indent=1, width=80)"}, {"intent": "Check for the existence of the compiler executables whose names are listed in `cmd_names` or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing .", "snippet": "test.support.missing_compiler_executable()"}, {"intent": "Returns True if `x` is a signaling NaN ; otherwise returns False .", "snippet": "context.is_snan(x)"}, {"intent": "The `name` is returned unchanged . If the input `value` has a name attribute and it matches name ignoring case , the value is returned unchanged .", "snippet": "email_policy.header_store_parse(name, value)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)"}, {"intent": "This is the main callback interface in SAX, and the one most important to applications.", "snippet": "xml.sax.handler.ContentHandler"}, {"intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `use_builtin_types` parameter is passed to the loads ( ) function and controls which types are processed when date/times values or binary data are received ; it defaults to false .", "snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, use_builtin_types=False)"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `optimize`.", "snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, optimize=-1)"}, {"intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "snippet": "Telnet.open(host, port=0)"}, {"intent": "Concrete class for urlparse ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "snippet": "urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)"}, {"intent": "Return a value for the context variable for the current context .", "snippet": "context_var.get()"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb, file=None, chain=True)"}, {"intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`, `bind_and_activate`.", "snippet": "socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)"}, {"intent": "Read up to `n` bytes from the memory buffer .", "snippet": "memory_bio.read(n=-1)"}, {"intent": "The HTTP headers used for error responses.", "snippet": "base_handler.error_headers"}, {"intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "snippet": "shelve.BsdDbShelf(dict, protocol=None)"}, {"intent": "Fork a child process .", "snippet": "os.fork()"}, {"intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "snippet": "multiprocessing.Process(kwargs={})"}, {"intent": "POSIX.1-1988 (ustar) format.", "snippet": "tarfile.USTAR_FORMAT"}, {"intent": "Returns true if automatic collection is enabled .", "snippet": "gc.isenabled()"}, {"intent": "Touch each location in the window that has been touched in any of its ancestor windows .", "snippet": "window.syncdown()"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "snippet": "turtle.onclick(fun, btn=1)"}, {"intent": "The \u201creturn\u201d annotation for the callable.", "snippet": "signature.return_annotation"}, {"intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`, `stdin`, `stdout`, `stderr`.", "snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"}, {"intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "snippet": "turtle.onkeypress(fun, key=None)"}, {"intent": "If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.", "snippet": "xmlparser.specified_attributes"}, {"intent": "Close the selector .", "snippet": "base_selector.close()"}, {"intent": "The example\u2019s actual output.", "snippet": "DocTestFailure.got"}, {"intent": "Raised when a Unicode-related error occurs during encoding.", "snippet": "UnicodeEncodeError"}, {"intent": "Return a string indicating the HTTP request method .", "snippet": "Request.get_method()"}, {"intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "snippet": "ArgumentParser.add_argument_group(description=None)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "snippet": "xml.sax.saxutils.XMLGenerator(out=None, short_empty_elements=False)"}, {"intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "snippet": "base_manager.start(initializer, initargs)"}, {"intent": "Return True if it is a symbolic link .", "snippet": "TarInfo.issym()"}, {"intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "snippet": "codecs.strict_errors(exception)"}, {"intent": "Raised when an operation would block on an object (e.g.", "snippet": "BlockingIOError"}, {"intent": "Send data to the socket . Returns the number of `bytes` sent . The optional `flags` argument has the same meaning as for recv ( ) above .", "snippet": "socket.send(bytes, flags)"}, {"intent": "Operation would block", "snippet": "errno.EWOULDBLOCK"}, {"intent": "Returns a string suitable for an RFC 2822-compliant Message-ID header . Optional `idstring` if given , is a string used to strengthen the uniqueness of the message id . Optional `domain` if given provides the portion of the msgid after the \u2018 @ \u2019 .", "snippet": "email.utils.make_msgid(idstring=None, domain=None)"}, {"intent": "No such process", "snippet": "errno.ESRCH"}, {"intent": "Modify or inquire widget state . If `statespec` is specified , sets the widget state according to it and return a new statespec indicating which flags were changed .", "snippet": "widget.state(statespec=None)"}, {"intent": "Return True if the Task is cancelled .", "snippet": "task.cancelled()"}, {"intent": "Create a new server instance . With arguments `addr`, `logRequests`.", "snippet": "xmlrpc.server.DocXMLRPCServer(addr, logRequests=True)"}, {"intent": "A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions . With arguments `resource_name`, `errnos`.", "snippet": "test.support.transient_internet(resource_name, errnos=())"}, {"intent": "Values of the encoding field from the AU header which are supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_LINEAR_16"}, {"intent": "A dictionary that maps HTML entity names to the Unicode code points.", "snippet": "html.entities.name2codepoint"}, {"intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . With arguments `**kwargs`.", "snippet": "patch.dict(in_dict, **kwargs)"}, {"intent": "Number of memory blocks (int).", "snippet": "statistic.count"}, {"intent": "enum.IntFlag collection of VERIFY_* constants.", "snippet": "ssl.VerifyFlags"}, {"intent": "An attempt to resume the parser was made when the parser had not been suspended.", "snippet": "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"}, {"intent": "This call decodes uuencoded file `in_file` placing the result on file `out_file` . Setting `quiet` to a true value silences this warning .", "snippet": "uu.decode(in_file, quiet=False)"}, {"intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report . If `timeout` is given , it specifies the length of time in milliseconds which the system will wait for events before returning .", "snippet": "poll.poll(timeout)"}, {"intent": "Same as Element.iterfind ( ) , starting at the root of the tree . With arguments `match`.", "snippet": "element_tree.iterfind(match)"}, {"intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "snippet": "email.generator.DecodedGenerator(outfp)"}, {"intent": "Remove and return an item from the queue .", "snippet": "simple_queue.get()"}, {"intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "snippet": "xmlrpc.client.Fault"}, {"intent": "Exception raised when a response code in the range 400\u2013499 is received.", "snippet": "nntplib.NNTPTemporaryError"}, {"intent": "No defined value type.", "snippet": "winreg.REG_NONE"}, {"intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "snippet": "os.link(src, dst, dst_dir_fd=None)"}, {"intent": "Locks the specified bytes.", "snippet": "msvcrt.LK_LOCK"}, {"intent": "The flag is set when the code object is an asynchronous generator function.", "snippet": "inspect.CO_ASYNC_GENERATOR"}, {"intent": "This class is used to compile information about which tests have succeeded and which have failed.", "snippet": "unittest.TestResult"}, {"intent": "Encapsulate an XML error or warning . When instantiated , `msg` should be a human-readable description of the error .", "snippet": "xml.sax.SAXException(msg)"}, {"intent": "Return the mantissa and exponent of `x` as the pair ( m , e ) .", "snippet": "math.frexp(x)"}, {"intent": "Add a header to the message with field `name` name and value `val` .", "snippet": "email_message.__setitem__(name, val)"}, {"intent": "Return an iterable of the weak references to the values .", "snippet": "WeakValueDictionary.valuerefs()"}, {"intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `delimiters`.", "snippet": "configparser.RawConfigParser(':'), ';'), delimiters=('=')"}, {"intent": "Read bytes into a pre-allocated , writable bytes-like object `b` and return the number of bytes read .", "snippet": "buffered_io_base.readinto(b)"}, {"intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "snippet": "email.message_from_string(s, _class=None)"}, {"intent": "A subclass of Path and PureWindowsPath , this class represents concrete Windows filesystem paths : With arguments `*pathsegments`.", "snippet": "pathlib.WindowsPath(*pathsegments)"}, {"intent": "Return the encoding used to return translated messages in lgettext ( ) and lngettext ( ) .", "snippet": "null_translations.output_charset()"}, {"intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "snippet": "poll.poll()"}, {"intent": "ABCs for read-only and mutable sequences.", "snippet": "collections.abc.Sequence"}, {"intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "snippet": "html_diff.__init__(wrapcolumn=None, linejunk=None)"}, {"intent": "Return the system \u2019 s ctime which , on some systems ( like Unix ) is the time of the last metadata change , and , on others ( like Windows ) , is the creation time for `path` .", "snippet": "os.path.getctime(path)"}, {"intent": "Boolean value that is normally False, but is set to True if an enable() command is successfully issued for the UTF8=ACCEPT capability.", "snippet": "IMAP4.utf8_enabled"}, {"intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "snippet": "SimpleXMLRPCServer.register_instance(instance)"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "snippet": "gettext.install(domain, localedir=None)"}, {"intent": "Round towards -Infinity.", "snippet": "decimal.ROUND_FLOOR"}, {"intent": "Returns the element attributes as a sequence of ( name , value ) pairs .", "snippet": "element.items()"}, {"intent": "Exactly like BytesParser , except that headersonly defaults to True . With arguments `policy`.", "snippet": "email.parser.BytesHeaderParser(policy=policy.compat32)"}, {"intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)"}, {"intent": "Returns number of audio frames .", "snippet": "AU_read.getnframes()"}, {"intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "snippet": "timeit.Timer(timer=<timer function>)"}, {"intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "snippet": "email_message.walk()"}, {"intent": "The canonical name of this HMAC, always lowercase, e.g.", "snippet": "HMAC.name"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "snippet": "gettext.install(domain, codeset=None, names=None)"}, {"intent": "Return the message \u2019 s sub-content type .", "snippet": "email_message.get_content_subtype()"}, {"intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "snippet": "base64.b32decode(s)"}, {"intent": "The above constants are only available on Windows.", "snippet": "os.O_BINARY"}, {"intent": "A generator can be annotated by the generic type Generator [ YieldType , SendType , ReturnType ] . With arguments `IteratorT_co`, `GenericT_co`.", "snippet": "typing.Generator(IteratorT_co, GenericT_co)"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "snippet": "message.get_param(param, header='content-type', unquote=True)"}, {"intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "snippet": "ssl.create_default_context(purpose=Purpose.SERVER_AUTH, capath=None)"}, {"intent": "Applies this handler \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "snippet": "queue_listener.filter(record)"}, {"intent": "Read-only proxy of a `mapping` .", "snippet": "types.MappingProxyType(mapping)"}, {"intent": "A Future represents an eventual result of an asynchronous operation .", "snippet": "asyncio.Future()"}, {"intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "snippet": "turtle.addshape(name, shape=None)"}, {"intent": "Return the Turtle object itself .", "snippet": "turtle.getpen()"}, {"intent": "Return a new partialmethod descriptor which behaves like partial except that it is designed to be used as a method definition rather than being directly callable . `func` must be a descriptor or a callable ( objects which are both , like normal functions , are handled as descriptors ) . With arguments `*args`, `**keywords`.", "snippet": "functools.partialmethod(func, *args, **keywords)"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "snippet": "asyncio.wait(aws)"}, {"intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)"}, {"intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "snippet": "turtle.mode()"}, {"intent": "Create a file at this given path . If `mode` is given , it is combined with the process \u2019 umask value to determine the file mode and access flags . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "snippet": "Path.touch(mode=0o666, exist_ok=True)"}, {"intent": "Returns a string suitable for an RFC 2822-compliant Message-ID header . Optional `idstring` if given , is a string used to strengthen the uniqueness of the message id .", "snippet": "email.utils.make_msgid(idstring=None)"}, {"intent": "Return a list of Symbol instances for names in the table .", "snippet": "symbol_table.get_symbols()"}, {"intent": "A read-only description of the dialect in use by the writer.", "snippet": "csvwriter.dialect"}, {"intent": "Extract all `members` from the archive to the current working directory .", "snippet": "ZipFile.extractall()"}, {"intent": "Gets the options maintained by the Tix scheme mechanism . With arguments `name`.", "snippet": "tixCommand.tix_option_get(name)"}, {"intent": "The address on which the server is listening.", "snippet": "base_server.server_address"}, {"intent": "A subclass of SSLError raised by a non-blocking SSL socket when trying to read or write data, but more data needs to be sent on the underlying TCP transport before the request can be fulfilled.", "snippet": "ssl.SSLWantWriteError"}, {"intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "snippet": "element.findall(match)"}, {"intent": "The module was found as a package directory.", "snippet": "imp.PKG_DIRECTORY"}, {"intent": "Represents the C 16-bit unsigned int datatype.", "snippet": "ctypes.c_uint16"}, {"intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file . `fallback` , when set to True , makes asyncio manually read and send the file when the platform does not support the sendfile syscall ( e.g .", "snippet": "loop.sock_sendfile(sock, file, offset=0, fallback=True)"}, {"intent": "Creates and returns a tree iterator for the root element . `tag` is the tag to look for ( default is to return all elements ) .", "snippet": "element_tree.iter(tag=None)"}, {"intent": "The address from which the last accepted connection came.", "snippet": "listener.last_accepted"}, {"intent": "Read a raw token .", "snippet": "shlex.read_token()"}, {"intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "snippet": "shake.hexdigest(length)"}, {"intent": "Reset the decoder to the initial state .", "snippet": "incremental_decoder.reset()"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `port`.", "snippet": "asyncio.start_server(client_connected_cb, port=None)"}, {"intent": "Returns a value equal to Emax - prec + 1 .", "snippet": "context.Etop()"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_errno`.", "snippet": "ctypes.OleDLL(name, use_errno=False)"}, {"intent": "Return the natural ( base e ) logarithm of the operand . With arguments `context`.", "snippet": "decimal.ln(context=None)"}, {"intent": "Return an object capturing the current internal state of the generator .", "snippet": "random.getstate()"}, {"intent": "The version number of the run-time SQLite library, as a tuple of integers.", "snippet": "sqlite3.sqlite_version_info"}, {"intent": "Base class for other signals and a subclass of ArithmeticError.", "snippet": "decimal.DecimalException"}, {"intent": "Rewind the file pointer to the beginning of the audio stream .", "snippet": "Wave_read.rewind()"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . one that overrides the default ( ) method to serialize additional types ) , specify it with the `cls` kwarg ; otherwise JSONEncoder is used . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, cls=None)"}, {"intent": "Concrete implementation of InspectLoader.is_package ( ) . With arguments `fullname`.", "snippet": "source_loader.is_package(fullname)"}, {"intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "snippet": "text_calendar.prmonth(theyear, themonth, w=0)"}, {"intent": "Bind a unix socket , raising unittest.SkipTest if PermissionError is raised . With arguments `sock`, `addr`.", "snippet": "test.support.bind_unix_socket(sock, addr)"}, {"intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "snippet": "asyncio.wait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)"}, {"intent": "The number of threads required to pass the barrier.", "snippet": "barrier.parties"}, {"intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) .", "snippet": "base64.a85decode(b, foldspaces=False)"}, {"intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "snippet": "heapq.merge(*iterables, key=None)"}, {"intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`, `strict`.", "snippet": "mime_types.guess_type(url, strict=True)"}, {"intent": "Creates and returns a new xmlparser object . `encoding` , if specified , must be a string naming the encoding used by the XML data . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "snippet": "xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "snippet": "math.isclose(a, b, rel_tol=1e-09)"}, {"intent": "Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart .", "snippet": "bytes.upper()"}, {"intent": "The subnets that join to make the current network definition , depending on the argument values . `prefixlen_diff` is the amount our prefix length should be increased by . `new_prefix` is the desired new prefix of the subnets ; it must be larger than our prefix .", "snippet": "i_pv4_network.subnets(prefixlen_diff=1, new_prefix=None)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`.", "snippet": "doctest.Example(source, want, exc_msg=None)"}, {"intent": "ABCs for mapping, items, keys, and values views.", "snippet": "collections.abc.ValuesView"}, {"intent": "Tests that two sets are equal . Fails if either of `first` or `second` does not have a set.difference ( ) method . With arguments `msg`.", "snippet": "test_case.assertSetEqual(first, second, msg=None)"}, {"intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "snippet": "traceback.format_exception(etype, value, tb)"}, {"intent": "Return the name of the file currently being read .", "snippet": "fileinput.filename()"}, {"intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "snippet": "socket.listen(backlog)"}, {"intent": "Returns an asyncgen_hooks object , which is similar to a namedtuple of the form ( firstiter , finalizer ) , where firstiter and finalizer are expected to be either None or functions which take an asynchronous generator iterator as an argument , and are used to schedule finalization of an asynchronous generator by an event loop .", "snippet": "sys.get_asyncgen_hooks()"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)"}, {"intent": "Exception raised when an error code signifying a temporary error (response codes in the range 400\u2013499) is received.", "snippet": "ftplib.error_temp"}, {"intent": "Return True if the path points to a block device ( or a symbolic link pointing to a block device ) , False if it points to another kind of file .", "snippet": "Path.is_block_device()"}, {"intent": "Construct a PrettyPrinter instance . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "snippet": "pprint.PrettyPrinter(stream=None)"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `errors`.", "snippet": "urllib.parse.quote_plus(string, safe='', errors=None)"}, {"intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "snippet": "lock.acquire(timeout=-1)"}, {"intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "snippet": "pwd.getpwuid(uid)"}, {"intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "snippet": "html_diff.__init__(tabsize=8, wrapcolumn=None)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)"}, {"intent": "Return the value of the given header . If the header is not present , return the `default` value . With arguments `header_name`.", "snippet": "Request.get_header(header_name, default=None)"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . The `exec_body` argument is a callback that is used to populate the freshly created class namespace . With arguments `kwds`.", "snippet": "types.new_class(name, kwds=None, exec_body=None)"}, {"intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "snippet": "Record.ClearData()"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "snippet": "os.sendfile(out, in, offset, count, headers, flags=0)"}, {"intent": "Write the file named `filename` to the archive , giving it the archive name `arcname` ( by default , this will be the same as filename , but without a drive letter and with leading path separators removed ) .", "snippet": "ZipFile.write(filename)"}, {"intent": "Use this check to guard CPython \u2019 s implementation-specific tests or to run them only on the implementations guarded by the arguments : With arguments `**guards`.", "snippet": "test.support.check_impl_detail(**guards)"}, {"intent": "Return the time of last access of `path` .", "snippet": "os.path.getatime(path)"}, {"intent": "Return the value of the named header field . `name` does not include the colon field separator .", "snippet": "email_message.__getitem__(name)"}, {"intent": "Create a new instance to handle XML-RPC requests in a CGI environment . The `use_builtin_types` parameter is passed to the loads ( ) function and controls which types are processed when date/times values or binary data are received ; it defaults to false .", "snippet": "xmlrpc.server.CGIXMLRPCRequestHandler(use_builtin_types=False)"}, {"intent": "A netrc instance or subclass instance encapsulates data from a netrc `file` .", "snippet": "netrc.netrc()"}, {"intent": "Read-only file system", "snippet": "errno.EROFS"}, {"intent": "Return a string representing the time , controlled by an explicit `format` string .", "snippet": "time.strftime(format)"}, {"intent": "Portable popen ( ) interface . With arguments `cmd`, `mode`.", "snippet": "platform.popen(cmd, mode='r')"}, {"intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid . With arguments `follow_symlinks`.", "snippet": "os.access(path, mode, effective_ids=False, follow_symlinks=True)"}, {"intent": "Write the `bytes` in bytes into memory at the current position of the file pointer and return the number of bytes written ( never less than len ( bytes ) , since if the write fails , a ValueError will be raised ) .", "snippet": "mmap.write(bytes)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getboolean(section, option, fallback, vars=None)"}, {"intent": "For syntax errors - the line number where the error occurred.", "snippet": "traceback_exception.lineno"}, {"intent": "Exception raised when a reply is received from the server that does not fit the response specifications of the File Transfer Protocol, i.e.", "snippet": "ftplib.error_proto"}, {"intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "snippet": "decimal.logical_or(other)"}, {"intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "snippet": "ossaudiodev.open(device, mode)"}, {"intent": "Create a FIFO ( a named pipe ) named `path` with numeric `mode` mode . With arguments `dir_fd`.", "snippet": "os.mkfifo(path, dir_fd=None)"}, {"intent": "Create a directory named `path` with numeric `mode` mode .", "snippet": "os.mkdir(path, mode=0o777)"}, {"intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)"}, {"intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "snippet": "os.WIFCONTINUED(status)"}, {"intent": "Logs an accepted ( successful ) request . `code` should specify the numeric HTTP code associated with the response .", "snippet": "base_http_request_handler.log_request(code='-')"}, {"intent": "Reset the time conversion rules used by the library routines .", "snippet": "time.tzset()"}, {"intent": "This method allows you to compare two Header instances for equality . With arguments `other`.", "snippet": "header.__eq__(other)"}, {"intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped . The optional `logoption` keyword argument ( default is 0 ) is a bit field \u2013 see below for possible values to combine .", "snippet": "syslog.openlog(ident, logoption)"}, {"intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "snippet": "turtle.goto(x)"}, {"intent": "Any value error related to the address . With arguments `ValueError`.", "snippet": "ipaddress.AddressValueError(ValueError)"}, {"intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "snippet": "turtle.onrelease(fun, btn=1, add=None)"}, {"intent": "Return True if `obj` is true , and False otherwise .", "snippet": "operator.truth(obj)"}, {"intent": "The file may not be renamed or deleted.", "snippet": "stat.UF_NOUNLINK"}, {"intent": "Acquire a lock , `blocking` or non-blocking .", "snippet": "r_lock.acquire()"}, {"intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', _encoder=email.encoders.encode_base64)"}, {"intent": "Write audio frames , without correcting nframes . With arguments `data`.", "snippet": "Wave_write.writeframesraw(data)"}, {"intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "snippet": "message.preamble"}, {"intent": "Return the table \u2019 s name .", "snippet": "symbol_table.get_name()"}, {"intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "snippet": "cmd.Cmd(completekey='tab', stdout=None)"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)"}, {"intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "snippet": "os.WNOWAIT"}, {"intent": "Constructor for a LIFO queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "snippet": "queue.LifoQueue(maxsize=0)"}, {"intent": "This class is the low-level building block of the module . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "snippet": "xml.etree.ElementTree.XMLParser(target=None, encoding=None)"}, {"intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "snippet": "ZipFile.extractall(path=None, members=None, pwd=None)"}, {"intent": "Clear the window .", "snippet": "window.erase()"}, {"intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "snippet": "patch.multiple(target, **kwargs, spec_set=None)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "snippet": "pickletools.dis(pickle, out=None, memo=None)"}, {"intent": "Dictionary mapping filename extensions to non-standard, but commonly found MIME types.", "snippet": "mimetypes.common_types"}, {"intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "snippet": "text_calendar.formatmonth(theyear, themonth, w=0)"}, {"intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "snippet": "SSLContext.load_verify_locations(cadata=None)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "snippet": "doctest.DocTestFinder(recurse=True)"}, {"intent": "File objects used by the interpreter for standard input, output and errors:", "snippet": "sys.stdin"}, {"intent": "The part of the tagName preceding the colon if there is one, else the empty string.", "snippet": "Node.prefix"}, {"intent": "This is a NamedNodeMap giving the definitions of notations.", "snippet": "DocumentType.notations"}, {"intent": "Block device required", "snippet": "errno.ENOTBLK"}, {"intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "snippet": "joinable_queue.recv_bytes_into(buffer)"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `symlinks`.", "snippet": "venv.EnvBuilder(system_site_packages=False, symlinks=False)"}, {"intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "snippet": "shutil.move(src, dst, copy_function=copy2)"}, {"intent": "Exit code that means that a protocol exchange was illegal, invalid, or not understood.", "snippet": "os.EX_PROTOCOL"}, {"intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "snippet": "Codec.decode(input, errors)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None, delta=None)"}, {"intent": "A subclass of ConnectionError, raised when a connection is reset by the peer.", "snippet": "ConnectionResetError"}, {"intent": "If true, load cookies lazily from disk.", "snippet": "FileCookieJar.delayload"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "snippet": "TarFile.gettarinfo(name=None)"}, {"intent": "The file path of the null device.", "snippet": "os.devnull"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "snippet": "lzma.LZMADecompressor(filters=None)"}, {"intent": "Read all lines available on the input stream and return them as a list of lines . `sizehint` , if given , is passed as the size argument to the stream \u2019 s read ( ) method . Line-endings are implemented using the codec \u2019 s decode ( ) method and are included in the list entries if `keepends` is true .", "snippet": "stream_reader.readlines(sizehint, keepends)"}, {"intent": "The public identifier for the external subset of the document type definition.", "snippet": "DocumentType.publicId"}, {"intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function . The `module` argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected .", "snippet": "warnings.catch_warnings(module=None)"}, {"intent": "Arg list too long", "snippet": "errno.E2BIG"}, {"intent": "Name of the file in which the function is defined.", "snippet": "Function.file"}, {"intent": "Equivalent to KEY_READ.", "snippet": "winreg.KEY_EXECUTE"}, {"intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `fallback` , when set to True , makes asyncio manually read and send the file when the platform does not support the sendfile syscall ( e.g .", "snippet": "loop.sock_sendfile(sock, file, fallback=True)"}, {"intent": "Exit code that means a specified host did not exist.", "snippet": "os.EX_NOHOST"}, {"intent": "Return a list of the extended filesystem attributes on `path` .", "snippet": "os.listxattr(path=None)"}, {"intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "snippet": "mime_types.guess_type(url)"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored .", "snippet": "bz2.BZ2File(filename, mode='r', buffering=None)"}, {"intent": "An integer representing the set of SSL options enabled on this context.", "snippet": "SSLContext.options"}, {"intent": "Logs an accepted ( successful ) request . `code` should specify the numeric HTTP code associated with the response . If a `size` of the response is available , then it should be passed as the size parameter .", "snippet": "base_http_request_handler.log_request(code='-', size='-')"}, {"intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement .", "snippet": "pyclbr.readmodule_ex(module)"}, {"intent": "Construct an IPv6 network definition . `address` can be one of the following :", "snippet": "ipaddress.IPv6Network(address)"}, {"intent": "Create a TarInfo object . With arguments `name`.", "snippet": "tarfile.TarInfo(name=\"\")"}, {"intent": "Return a copy of sys.modules .", "snippet": "test.support.modules_setup()"}, {"intent": "A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named dbm.error as the first item \u2014 the latter is used when dbm.error is raised.", "snippet": "dbm.error"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified .", "snippet": "date.replace()"}, {"intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "snippet": "telnetlib.Telnet(host=None)"}, {"intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_int` , if specified , will be called with the string of every JSON int to be decoded . With arguments `**kw`.", "snippet": "json.load(fp, **kw, parse_int=None)"}, {"intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "snippet": "bytes_parser.parsebytes(bytes, headersonly=False)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "gzip.open(filename, encoding=None)"}, {"intent": "These type aliases correspond to the return types from re.compile() and re.match().", "snippet": "typing.Pattern"}, {"intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "snippet": "sysconfig.get_paths(scheme, vars)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "snippet": "difflib.ndiff(a, b, charjunk=IS_CHARACTER_JUNK)"}, {"intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "snippet": "email.encoders.encode_noop(msg)"}, {"intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `header_enc` and `body_enc` is either Charset.QP for quoted-printable , Charset.BASE64 for base64 encoding , Charset.SHORTEST for the shortest of quoted-printable or base64 encoding , or None for no encoding .", "snippet": "email.charset.add_charset(charset, header_enc=None, body_enc=None)"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')"}, {"intent": "Raised when a generator or coroutine is closed; see generator.close() and coroutine.close().", "snippet": "GeneratorExit"}, {"intent": "Identical to the to_integral_value ( ) method . With arguments `rounding`.", "snippet": "decimal.to_integral(rounding=None)"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "snippet": "turtle.onscreenclick(fun, add=None)"}, {"intent": "This method creates a ctypes instance , copying the buffer from the `source` object buffer which must be readable .", "snippet": "_c_data.from_buffer_copy(source)"}, {"intent": "A dictionary acting as a cache for finder objects.", "snippet": "sys.path_importer_cache"}, {"intent": "Return system configuration information relevant to an open file . As of Python 3.3 , this is equivalent to os.pathconf ( `fd` , name ) . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) .", "snippet": "os.fpathconf(fd, name)"}, {"intent": "Returns True if this network is a subnet of `other` .", "snippet": "i_pv4_network.subnet_of(other)"}, {"intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "snippet": "os.getenvb(key, default=None)"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `ssl`.", "snippet": "loop.create_unix_server(protocol_factory, ssl=None)"}, {"intent": "If there is no certificate for the peer on the other end of the connection , return None .", "snippet": "SSLSocket.getpeercert()"}, {"intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_exc(limit=None, file=None)"}, {"intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "snippet": "test_case.assertNotIsInstance(obj, cls)"}, {"intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "snippet": "http.cookies.BaseCookie(input)"}, {"intent": "Get the abbreviated name of the n-th month.", "snippet": "ABMON_1 ... ABMON_12"}, {"intent": "Set the compression `type` and description . With arguments `name`.", "snippet": "AU_write.setcomptype(type, name)"}, {"intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "snippet": "widget.tag_bind(tagname, sequence=None, callback=None)"}, {"intent": "Incremental encoder and decoder classes or factory functions.", "snippet": "codec_info.incrementaldecoder"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "snippet": "platform.libc_ver(executable=sys.executable)"}, {"intent": "Unpacks and returns a variable length list of homogeneous items . With arguments `unpack_item`.", "snippet": "Unpacker.unpack_array(unpack_item)"}, {"intent": "The reason for this error.", "snippet": "non_callable_magic_mock.reason"}, {"intent": "Rotate the turtleshape to point in the direction specified by `angle` , regardless of its current tilt-angle .", "snippet": "turtle.settiltangle(angle)"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `month`.", "snippet": "date.replace(year=self.year, month=self.month)"}, {"intent": "Run the event loop until stop ( ) is called .", "snippet": "loop.run_forever()"}, {"intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`, `shortopts`.", "snippet": "getopt.gnu_getopt(args, shortopts)"}, {"intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "snippet": "email_message.set_default_type(ctype)"}, {"intent": "Like rfind ( ) but raises ValueError when the substring `sub` is not found . With arguments `start`, `end`.", "snippet": "str.rindex(sub, start, end)"}, {"intent": "The subpath within the ZIP file where modules are searched.", "snippet": "zipimporter.prefix"}, {"intent": "Return a new DocumentType object that encapsulates the given `qualifiedName` , `publicId` , and `systemId` strings , representing the information contained in an XML document type declaration .", "snippet": "DOMImplementation.createDocumentType(qualifiedName, publicId, systemId)"}, {"intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "snippet": "HTTPConnection.set_tunnel(host, port=None, headers=None)"}, {"intent": "Execute the `statement` ( given as a string or a code object ) under debugger control . The optional `globals` and `locals` arguments specify the environment in which the code is executed ; by default the dictionary of the module __main__ is used .", "snippet": "pdb.run(statement, globals=None)"}, {"intent": "The version number encoded as a single integer.", "snippet": "sys.hexversion"}, {"intent": "Instances of this class have __call__() methods identical in signature to the built-in function compile(), but with the difference that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force.", "snippet": "codeop.Compile"}, {"intent": "Return the base ten logarithm of the operand . With arguments `context`.", "snippet": "decimal.log10(context=None)"}, {"intent": "For top-level classes, None.", "snippet": "Class.parent"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "snippet": "difflib.unified_diff(a, b, n=3)"}, {"intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "snippet": "style.theme_create(themename, settings=None)"}, {"intent": "Register a new child handler . Arrange for `callback` ( `pid` , returncode , `*args` ) to be called when a process with PID equal to pid terminates .", "snippet": "windows_proactor_event_loop_policy.add_child_handler(pid, callback, *args)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.eq(a, b)"}, {"intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)"}, {"intent": "Write `value` to a plist file . With arguments `fp`.", "snippet": "plistlib.dump(value, fp)"}, {"intent": "Module : email.mime.text `_text` is the string for the payload . `_charset` is the character set of the text and is passed as an argument to the MIMENonMultipart constructor ; it defaults to us-ascii if the string contains only ascii code points , and utf-8 otherwise .", "snippet": "email.mime.text.MIMEText(_text, _charset=None)"}, {"intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "snippet": "base64.b85encode(b, pad=False)"}, {"intent": "Return a list of all the values for the field named `name` .", "snippet": "email_message.get_all(name)"}, {"intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . `level` is used internally . With arguments `msg`.", "snippet": "email.iterators._structure(msg, fp=None, level=0)"}, {"intent": "Tries to create a socket ; on failure , uses an exponential back-off algorithm .", "snippet": "socket_handler.createSocket()"}, {"intent": "A bytes object representing the current version of the module.", "snippet": "curses.version"}, {"intent": "Open a gdbm database and return a gdbm object . The `filename` argument is the name of the database file .", "snippet": "dbm.gnu.open(filename)"}, {"intent": "Return the mapped value for `code` according to tableB.2 ( Mapping for case-folding used with NFKC ) .", "snippet": "stringprep.map_table_b2(code)"}, {"intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "snippet": "deque.extend(iterable)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, minval=None)"}, {"intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream . If the `buffer_size` is not given , it defaults to DEFAULT_BUFFER_SIZE .", "snippet": "io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)"}, {"intent": "Sequence of bytecodes that have an absolute jump target.", "snippet": "dis.hasjabs"}, {"intent": "Limits on the number of entries represented for the named object type.", "snippet": "Repr.maxset"}, {"intent": "Close the socket .", "snippet": "dispatcher.close()"}, {"intent": "Calling this with a true value for `flag` ( the default ) will cause Expat to call the ExternalEntityRefHandler with None for all arguments to allow an alternate DTD to be loaded .", "snippet": "xmlparser.UseForeignDTD()"}, {"intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) . With arguments `fp`, `environ`.", "snippet": "cgi.parse(fp=None, environ=os.environ)"}, {"intent": "Return the time in seconds since the epoch as a floating point number .", "snippet": "time.time()"}, {"intent": "An abstract class that provides methods to execute calls asynchronously.", "snippet": "concurrent.futures.Executor"}, {"intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "snippet": "ssl.create_default_context(cadata=None)"}, {"intent": "Exception raised when a browser control error occurs.", "snippet": "webbrowser.Error"}, {"intent": "Create a pipe .", "snippet": "os.pipe()"}, {"intent": "Load MIME type information from the Windows registry .", "snippet": "mime_types.read_windows_registry()"}, {"intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`.", "snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source)"}, {"intent": "Run awaitable objects in the `aws` set concurrently . Raises asyncio.TimeoutError if the `timeout` occurs before all Futures are done .", "snippet": "asyncio.as_completed(aws, timeout=None)"}, {"intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "snippet": "OptionParser.print_usage(file=None)"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "snippet": "__import__(name, locals=None, level=0)"}, {"intent": "A subclass of OSError, this exception is raised for address-related errors by getaddrinfo() and getnameinfo().", "snippet": "socket.gaierror"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`.", "snippet": "tkinter.Tcl(screenName=None)"}, {"intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`, `bind_and_activate`.", "snippet": "socketserver.UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=True)"}, {"intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "snippet": "window.insch(ch)"}, {"intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output .", "snippet": "formatter.DumbWriter(file=None)"}, {"intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")"}, {"intent": "`policy` is an object implementing the CookiePolicy interface .", "snippet": "http.cookiejar.CookieJar()"}, {"intent": "The server refused our HELO message.", "snippet": "smtplib.SMTPHeloError"}, {"intent": "Module : email.mime.multipart Optional `boundary` is the multipart boundary string . With arguments `**_params`.", "snippet": "email.mime.multipart.MIMEMultipart(**_params, boundary=None)"}, {"intent": "Return `a` + `b` for a and b sequences .", "snippet": "operator.concat(a, b)"}, {"intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_exc(file=None)"}, {"intent": "Return True if all tests run so far have passed , otherwise returns False .", "snippet": "test_result.wasSuccessful()"}, {"intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "snippet": "element.iterfind(match, namespaces=None)"}, {"intent": "Return the lowest index in the data where the subsequence `sub` is found , such that sub is contained in the slice s [ `start` : `end` ] .", "snippet": "bytes.find(sub)"}, {"intent": "Return the approximate size of the queue .", "snippet": "SimpleQueue.qsize()"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "snippet": "@dataclasses.dataclass(repr=True)"}, {"intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "snippet": "message.get_params(header='content-type', unquote=True)"}, {"intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `zdict` parameter specifies a predefined compression dictionary .", "snippet": "zlib.decompressobj(zdict)"}, {"intent": "Retry the request with authentication information , if available . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)"}, {"intent": "Close the archive file .", "snippet": "ZipFile.close()"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, limit=None)"}, {"intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . With arguments `tb`.", "snippet": "dis.distb(tb=None, file=None)"}, {"intent": "Return the item of the underlying mapping with key key.", "snippet": "proxy[key]"}, {"intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "snippet": "os.open(path, flags)"}, {"intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked .", "snippet": "shutil.unpack_archive(filename, extract_dir)"}, {"intent": "Return the entire message flattened as a string .", "snippet": "email_message.as_string()"}, {"intent": "Append the last `nelements` items of history to a file . The default `filename` is ~/.history .", "snippet": "readline.append_history_file(nelements, filename)"}, {"intent": "This is either None (if the mock hasn\u2019t been called), or the arguments that the mock was last called with.", "snippet": "mock.call_args"}, {"intent": "The above constants are extensions and not present if they are not defined by the C library.", "snippet": "os.O_NOFOLLOW"}, {"intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return . The `firstline` flag indicates that it would be sufficient to only return the first line , if there are decoding errors on later lines .", "snippet": "stream_reader.read(size, chars, firstline)"}, {"intent": "Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters , false otherwise .", "snippet": "bytearray.islower()"}, {"intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "snippet": "test_result.addExpectedFailure(test, err)"}, {"intent": "The above constants are only available on Windows.", "snippet": "os.O_SHORT_LIVED"}, {"intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "snippet": "tkinter.tix.Tk(className='Tix')"}, {"intent": "Mapping class that references values weakly .", "snippet": "weakref.WeakValueDictionary()"}, {"intent": "Print the stack or traceback for this Task . The `limit` argument is passed to get_stack ( ) directly .", "snippet": "task.print_stack(limit=None)"}, {"intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "snippet": "fileinput.input(files=None, inplace=False)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect(a, x, lo=0)"}, {"intent": "Force bytes held in the buffer into the raw stream .", "snippet": "buffered_writer.flush()"}, {"intent": "Rename this file or directory to the given `target` .", "snippet": "Path.rename(target)"}, {"intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "snippet": "element.findtext(match, namespaces=None)"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs, spec=None)"}, {"intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "snippet": "threading.Semaphore(value=1)"}, {"intent": "List of supported TLS channel binding types.", "snippet": "ssl.CHANNEL_BINDING_TYPES"}, {"intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "snippet": "xml.etree.ElementTree.XMLPullParser(events=None)"}, {"intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "snippet": "FTP.connect(host='', source_address=None)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getboolean(section, option, fallback, raw=False)"}, {"intent": "The expr ( ) function parses the parameter `source` as if it were an input to compile ( source , 'file.py ' , 'eval ' ) .", "snippet": "parser.expr(source)"}, {"intent": "Allow use of default values for colors on terminals supporting this feature .", "snippet": "curses.use_default_colors()"}, {"intent": "Return True if this entry is a directory or a symbolic link pointing to a directory ; return False if the entry is or points to any other kind of file , or if it doesn \u2019 t exist anymore . If `follow_symlinks` is False , return True only if this entry is a directory ( without following symlinks ) ; return False if the entry is any other kind of file or if it doesn \u2019 t exist anymore .", "snippet": "dir_entry.is_dir(follow_symlinks=True)"}, {"intent": "Statistic difference on memory allocations between an old and a new Snapshot instance.", "snippet": "tracemalloc.StatisticDiff"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `doraise` is true , a PyCompileError is raised when an error is encountered while compiling file .", "snippet": "py_compile.compile(file, doraise=False)"}, {"intent": "This method for the Stats class prints out a report as described in the profile.run ( ) definition . With arguments `*restrictions`.", "snippet": "stats.print_stats(*restrictions)"}, {"intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "snippet": "test_suite.run(result)"}, {"intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "snippet": "os.spawnv(mode, path, args)"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params, policy=compat32)"}, {"intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes .", "snippet": "lzma_decompressor.decompress(data)"}, {"intent": "Enter newline mode .", "snippet": "curses.nl()"}, {"intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "snippet": "platform.architecture(linkage='')"}, {"intent": "Identical to the to_integral_value ( ) method .", "snippet": "decimal.to_integral()"}, {"intent": "Create a shared threading.Condition object and return a proxy for it .", "snippet": "sync_manager.Condition()"}, {"intent": "This class provides methods to read , parse and answer questions about the robots.txt file at `url` .", "snippet": "urllib.robotparser.RobotFileParser(url='')"}, {"intent": "Return a copy of the first operand with the sign set to be the same as the sign of the second operand . With arguments `other`.", "snippet": "decimal.copy_sign(other)"}, {"intent": "The numeric constant for an uncompressed archive member.", "snippet": "zipfile.ZIP_STORED"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "snippet": "ctypes.CDLL(name, handle=None)"}, {"intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "snippet": "element.findall(match, namespaces=None)"}, {"intent": "See the documentation for the functions explained above . With arguments `statement`.", "snippet": "pdb.run(statement)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getfloat(section, option, fallback)"}, {"intent": "\u201ctyped\u201d actions are additionally listed here.", "snippet": "Option.TYPED_ACTIONS"}, {"intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "snippet": "ContentHandler.startPrefixMapping(prefix, uri)"}, {"intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "snippet": "itertools.islice(iterable, start, stop, step)"}, {"intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "snippet": "Pattern.finditer(string, pos, endpos)"}, {"intent": "An integer, the default protocol version used for pickling.", "snippet": "pickle.DEFAULT_PROTOCOL"}, {"intent": "Return the colormode or set it to 1.0 or 255 . With arguments `cmode`.", "snippet": "turtle.colormode(cmode=None)"}, {"intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries .", "snippet": "bytearray.splitlines()"}, {"intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "snippet": "logging.StreamHandler(stream=None)"}, {"intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "snippet": "mbox_message.add_flag(flag)"}, {"intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "snippet": "socket.sendfile(file, offset=0, count=None)"}, {"intent": "Return a shallow copy of the underlying mapping .", "snippet": "mapping_proxy_type.copy()"}, {"intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "snippet": "str.maketrans(x)"}, {"intent": "The total number of to be consumed bytes.", "snippet": "abstract_event_loop.consumed"}, {"intent": "Read up to `size` bytes from the object and return them .", "snippet": "raw_io_base.read()"}, {"intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "snippet": "compat32.fold_binary(name, value)"}, {"intent": "Write a list ( or any iterable ) of bytes to the stream . With arguments `data`.", "snippet": "stream_writer.writelines(data)"}, {"intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "snippet": "len(dictview)"}, {"intent": "When specified, all sequences of whitespace (blanks and newlines) are treated as equal.", "snippet": "doctest.NORMALIZE_WHITESPACE"}, {"intent": "These are the possible values for idtype in waitid().", "snippet": "os.P_PGID"}, {"intent": "Identifier removed", "snippet": "errno.EIDRM"}, {"intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "snippet": "html_diff.__init__(tabsize=8, charjunk=IS_CHARACTER_JUNK)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `checker`, `verbose`, `optionflags`.", "snippet": "doctest.DebugRunner(checker=None, verbose=None, optionflags=0)"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "snippet": "turtle.onscreenclick(fun, btn=1)"}, {"intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "snippet": "BaseTransport.get_extra_info(name, default=None)"}, {"intent": "Returns an unused port that should be suitable for binding . This is achieved by creating a temporary socket with the same `family` and type as the sock parameter ( default is AF_INET , SOCK_STREAM ) , and binding it to the specified host address ( defaults to 0.0.0.0 ) with the port set to 0 , eliciting an unused ephemeral port from the OS .", "snippet": "test.support.find_unused_port(family=socket.AF_INET)"}, {"intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "snippet": "multiprocessing.Process(args=())"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `indent`.", "snippet": "doctest.Example(source, want, exc_msg=None, indent=0)"}, {"intent": "Decorator for skipping tests if bz2 doesn\u2019t exist.", "snippet": "@test.support.requires_bz2"}, {"intent": "Return the current process-wide policy .", "snippet": "asyncio.get_event_loop_policy()"}, {"intent": "Return an iterator over all of the immediate sub-parts of the message , which will be empty for a non-multipart .", "snippet": "email_message.iter_parts()"}, {"intent": "Return the smallest number representable in the given `context` ( or in the current thread \u2019 s context if no context is given ) that is larger than the given operand .", "snippet": "decimal.next_plus()"}, {"intent": "Returns the current value of the combobox .", "snippet": "widget.get()"}, {"intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "snippet": "SSLSocket.read()"}, {"intent": "Copy source location ( lineno and col_offset ) from `old_node` to `new_node` if possible , and return new_node .", "snippet": "ast.copy_location(new_node, old_node)"}, {"intent": "Informs the logging system to perform an orderly shutdown by flushing and closing all handlers .", "snippet": "logging.shutdown()"}, {"intent": "Concrete implementation of Loader.exec_module ( ) . With arguments `module`.", "snippet": "source_loader.exec_module(module)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "snippet": "bytearray.split(sep=None, maxsplit=-1)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . With arguments `thread_name_prefix`.", "snippet": "concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='')"}, {"intent": "Return the file descriptor number of the control fd .", "snippet": "epoll.fileno()"}, {"intent": "Return the outcome of the test `b` in `a` .", "snippet": "operator.__contains__(a, b)"}, {"intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "snippet": "auto.with_traceback(tb)"}, {"intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "snippet": "bytes.endswith(suffix, start)"}, {"intent": "A subclass of HTTPException, raised if a port is given and is either non-numeric or empty.", "snippet": "http.client.InvalidURL"}, {"intent": "A bounded semaphore object . With arguments `loop`.", "snippet": "asyncio.BoundedSemaphore(loop=None)"}, {"intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement . As with readmodule , module names the module to be read and `path` is prepended to sys.path .", "snippet": "pyclbr.readmodule_ex(module, path=None)"}, {"intent": "If set to true, sys.stdout and sys.stderr will be buffered in between startTest() and stopTest() being called.", "snippet": "test_result.buffer"}, {"intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `screenName`.", "snippet": "tkinter.tix.Tk(screenName=None)"}, {"intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "snippet": "Pattern.fullmatch(string, pos, endpos)"}, {"intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "snippet": "unpickler.find_class(module, name)"}, {"intent": "Look up the codec for the given `encoding` and return its encoder function .", "snippet": "codecs.getencoder(encoding)"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "snippet": "http.client.HTTPResponse(sock, method=None, url=None)"}, {"intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "snippet": "Path.lchmod(mode)"}, {"intent": "Constructor arguments should be passed as keyword arguments only . However , if RFC 2965 handling is turned off or `rfc2109_as_netscape` is True , RFC 2109 cookies are \u2018 downgraded \u2019 by the CookieJar instance to Netscape cookies , by setting the version attribute of the Cookie instance to 0 .", "snippet": "http.cookiejar.DefaultCookiePolicy(rfc2109_as_netscape=None)"}, {"intent": "Same as Element.findtext ( ) , starting at the root of the tree . With arguments `match`, `default`, `namespaces`.", "snippet": "element_tree.findtext(match, default=None, namespaces=None)"}, {"intent": "Resets an element .", "snippet": "element.clear()"}, {"intent": "enum.IntEnum collection of SSL and TLS versions for SSLContext.maximum_version and SSLContext.minimum_version.", "snippet": "ssl.TLSVersion"}, {"intent": "Called once before any tests are executed .", "snippet": "test_result.startTestRun()"}, {"intent": "Return True if this entry is a directory or a symbolic link pointing to a directory ; return False if the entry is or points to any other kind of file , or if it doesn \u2019 t exist anymore .", "snippet": "dir_entry.is_dir()"}, {"intent": "Class that simulates a dictionary . If `initialdata` is provided , data is initialized with its contents ; note that a reference to initialdata will not be kept , allowing it be used for other purposes .", "snippet": "collections.UserDict(initialdata)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below .", "snippet": "@dataclasses.dataclass()"}, {"intent": "Between MINYEAR and MAXYEAR inclusive.", "snippet": "date.year"}, {"intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "snippet": "ZipFile.extract(member, path=None)"}, {"intent": "Return a new path with the `suffix` changed .", "snippet": "PurePath.with_suffix(suffix)"}, {"intent": "This dictionary maps the HTTP 1.1 status codes to the W3C names.", "snippet": "http.client.responses"}, {"intent": "The name of the function.", "snippet": "Function.name"}, {"intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "snippet": "shelve.BsdDbShelf(dict, keyencoding='utf-8')"}, {"intent": "Block device.", "snippet": "stat.S_IFBLK"}, {"intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields . If this is wanted , `include_attributes` can be set to true .", "snippet": "ast.dump(node, annotate_fields=True, include_attributes=False)"}, {"intent": "Raised when a buffer related operation cannot be performed.", "snippet": "BufferError"}, {"intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None)"}, {"intent": "Pull the pen up \u2013 no drawing when moving .", "snippet": "turtle.pu()"}, {"intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at y , x if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "snippet": "window.instr(n)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))"}, {"intent": "The JSON document being parsed.", "snippet": "json_encoder.doc"}, {"intent": "Return a sub-window , whose upper-left corner is at ( `begin_y` , `begin_x` ) , and whose width/height is ncols/nlines .", "snippet": "window.subpad(begin_y, begin_x)"}, {"intent": "Restore the previous margin .", "snippet": "formatter.pop_margin()"}, {"intent": "Open a gdbm database and return a gdbm object . The `filename` argument is the name of the database file . The optional `flag` argument can be :", "snippet": "dbm.gnu.open(filename, flag)"}, {"intent": "Return a random byte string containing `nbytes` number of bytes .", "snippet": "secrets.token_bytes(nbytes=None)"}, {"intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "snippet": "widget.tag_has(tagname, item=None)"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `all_frames: bool`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False)"}, {"intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "snippet": "str.rstrip(chars)"}, {"intent": "The file may not be renamed or deleted.", "snippet": "stat.SF_NOUNLINK"}, {"intent": "The type of bound methods of some built-in data types and base classes.", "snippet": "types.MethodWrapperType"}, {"intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "snippet": "Telnet.set_option_negotiation_callback(callback)"}, {"intent": "Stop the process used by the manager .", "snippet": "base_manager.shutdown()"}, {"intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "snippet": "widget.tag_bind(tagname, callback=None)"}, {"intent": "Sends and logs a complete error reply to the client . The numeric `code` specifies the HTTP error code , with `message` as an optional , short , human readable description of the error .", "snippet": "base_http_request_handler.send_error(code)"}, {"intent": "This is the type of lock objects.", "snippet": "_thread.LockType"}, {"intent": "A Popen creationflags parameter to specify that a new process will have a high priority.", "snippet": "subprocess.HIGH_PRIORITY_CLASS"}, {"intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true . If `vars` is provided , it must be a dictionary .", "snippet": "config_parser.get(section, option, raw=False, vars=None)"}, {"intent": "Characters that will be considered whitespace and skipped.", "snippet": "shlex.whitespace"}, {"intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"}, {"intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "snippet": "asyncio.wrap_future(future, loop=None)"}, {"intent": "human readable description of operation argument", "snippet": "argrepr"}, {"intent": "Read and return the contents of `resource` within `package` as a str . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "snippet": "importlib.resources.read_text(package, resource, errors='strict')"}, {"intent": "The maximum resident set size that should be made available to the process.", "snippet": "resource.RLIMIT_RSS"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)"}, {"intent": "The DocTest object that was being run when the example failed.", "snippet": "DocTestFailure.test"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "snippet": "os.fwalk(top='.')"}, {"intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "snippet": "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)"}, {"intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "snippet": "bytearray.decode(encoding=\"utf-8\")"}, {"intent": "Create a new socket using the given address `family` , socket `type` and protocol number .", "snippet": "socket.socket(family=AF_INET)"}, {"intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "snippet": "dataclasses.field(default_factory=MISSING)"}, {"intent": "Return a copy ( \u201c clone \u201d ) of the hash object .", "snippet": "hash.copy()"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`.", "snippet": "venv.EnvBuilder(system_site_packages=False)"}, {"intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "snippet": "queue.put(obj, block)"}, {"intent": "Stop the timer , and cancel the execution of the timer \u2019 s action .", "snippet": "timer.cancel()"}, {"intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multiprocess`.", "snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multiprocess=False)"}, {"intent": "See the documentation for the functions explained above . With arguments `expression`.", "snippet": "pdb.runeval(expression)"}, {"intent": "Send `data` to the remote end-point of the socket .", "snippet": "dispatcher.send(data)"}, {"intent": "Valid values are 7bit, 8bit, base64, and quoted-printable.", "snippet": "content_transfer_encoding.cte"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)"}, {"intent": "Not a data message", "snippet": "errno.EBADMSG"}, {"intent": "Returns the panel below the current panel .", "snippet": "Panel.below()"}, {"intent": "Change the owner and group id of the file given by `fd` to the numeric `uid` and `gid` .", "snippet": "os.fchown(fd, uid, gid)"}, {"intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "snippet": "property(fset=None, fdel=None)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "snippet": "text_calendar.pryear(theyear, w=2)"}, {"intent": "(default: 1)", "snippet": "Option.nargs"}, {"intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "snippet": "test_case.assertNotRegex(text, regex, msg=None)"}, {"intent": "Return a list containing the character set names in the message .", "snippet": "email_message.get_charsets()"}, {"intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "snippet": "str.maketrans(x, y, z)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `wraps`.", "snippet": "unittest.mock.Mock(**kwargs, wraps=None)"}, {"intent": "A Popen creationflags parameter to specify that a new process will have an idle (lowest) priority.", "snippet": "subprocess.IDLE_PRIORITY_CLASS"}, {"intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "snippet": "queue.put(obj, block, timeout)"}, {"intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "snippet": "turtle.bk(distance)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "snippet": "random.choices(population, cum_weights=None, k=1)"}, {"intent": "Like rfind ( ) but raises ValueError when the subsequence `sub` is not found .", "snippet": "bytes.rindex(sub)"}, {"intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "snippet": "email.message.EmailMessage(policy=default)"}, {"intent": "Return a sorted sequence of method names found within `testCaseClass` ; this should be a subclass of TestCase .", "snippet": "test_loader.getTestCaseNames(testCaseClass)"}, {"intent": "Module : email.mime.base `_maintype` is the Content-Type major type ( e.g . text or image ) , and `_subtype` is the Content-Type minor type ( e.g . If `policy` is specified , ( defaults to the compat32 policy ) it will be passed to Message . With arguments `**_params`.", "snippet": "email.mime.base.MIMEBase(_maintype, _subtype, **_params, policy=compat32)"}, {"intent": "When this namespace is specified, the name string is a fully-qualified domain name.", "snippet": "uuid.NAMESPACE_DNS"}, {"intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "snippet": "turtle.shapetransform(t21=None)"}, {"intent": "In emergencies this method will discard any data held in the input and/or output buffers and the producer queue .", "snippet": "async_chat.discard_buffers()"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable .", "snippet": "unittest.main(module='__main__')"}, {"intent": "These type aliases correspond to the return types from re.compile() and re.match().", "snippet": "typing.Match"}, {"intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . )", "snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr)"}, {"intent": "A TracebackException of the original __context__.", "snippet": "traceback_exception.__context__"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "snippet": "bytearray.rsplit(sep=None)"}, {"intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . If `bufsize` is given , it is used as the initial size of the output buffer .", "snippet": "zlib.decompress(data, bufsize=DEF_BUF_SIZE)"}, {"intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "snippet": "signal.setitimer(which, seconds)"}, {"intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child . If the process does not terminate after `timeout` seconds , a TimeoutExpired exception will be raised .", "snippet": "Popen.communicate(input=None, timeout=None)"}, {"intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.Unpickler(file, errors=\"strict\")"}, {"intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `zdict` parameter specifies a predefined compression dictionary . The `wbits` parameter controls the size of the history buffer ( or the \u201c window size \u201d ) , and what header and trailer format is expected .", "snippet": "zlib.decompressobj(zdict, wbits=MAX_WBITS)"}, {"intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "snippet": "re.subn(pattern, repl, string, count=0, flags=0)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "snippet": "compile(source, filename, mode, dont_inherit=False)"}, {"intent": "Create a shared Namespace object and return a proxy for it .", "snippet": "sync_manager.Namespace()"}, {"intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `follow_symlinks`.", "snippet": "os.chown(path, uid, gid, follow_symlinks=True)"}, {"intent": "Wait for events .", "snippet": "epoll.poll()"}, {"intent": "Create an application archive from `source` . The optional `filter` argument specifies a callback function that is passed a Path object representing the path to the file being added ( relative to the source directory ) .", "snippet": "zipapp.create_archive(source, filter=None)"}, {"intent": "Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given.", "snippet": "os.EX_USAGE"}, {"intent": "Return a tuple ( fg , bg ) containing the colors for the requested color pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 .", "snippet": "curses.pair_content(pair_number)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "snippet": "platform.libc_ver(lib='', version='')"}, {"intent": "Set the `state` of the decoder to state .", "snippet": "incremental_decoder.setstate(state)"}, {"intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "snippet": "doc_test_parser.parse(string, name='<string>')"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "snippet": "difflib.context_diff(a, b, lineterm='\\n')"}, {"intent": "Return the number of items currently in the history .", "snippet": "readline.get_current_history_length()"}, {"intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addstr(str)"}, {"intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive . If `file` is omitted or None , the output goes to sys.stderr ; otherwise it should be an open file or file-like object to receive the output .", "snippet": "traceback.print_tb(tb, limit=None, file=None)"}, {"intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) .", "snippet": "doc_test_runner.summarize()"}, {"intent": "Set focus on TurtleScreen ( in order to collect key-events ) . With arguments `ydummy`.", "snippet": "turtle.listen(ydummy=None)"}, {"intent": "Reserved for system use.", "snippet": "winreg.KEY_CREATE_LINK"}, {"intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `source_address` parameter may be a tuple of a ( host , port ) to use as the source address the HTTP connection is made from . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "snippet": "http.client.HTTPConnection(host, port=None, source_address=None, blocksize=8192)"}, {"intent": "Create an instance of the FileInput class . With arguments `mode`.", "snippet": "fileinput.input(mode='r')"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype, key='view')"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . It \u2019 s common to use Unix sockets for LMTP , so our connect ( ) method must support that as well as a regular `host` : `port` server . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.LMTP(host='', local_hostname=None)"}, {"intent": "Body-encode the `string` string .", "snippet": "charset.body_encode(string)"}, {"intent": "The flags for certificate verification operations.", "snippet": "SSLContext.verify_flags"}, {"intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "snippet": "traceback_exception.extract(frame_gen, limit=None, capture_locals=False)"}, {"intent": "All changes to MH mailboxes are immediately applied , so this method does nothing .", "snippet": "mh.flush()"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "snippet": "zipfile.PyZipFile(file, mode='r')"}, {"intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "snippet": "calendar.yeardayscalendar(year)"}, {"intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.LMTP(source_address=None)"}, {"intent": "All recipient addresses refused.", "snippet": "smtplib.SMTPRecipientsRefused"}, {"intent": "Format the current directory in HTML .", "snippet": "cgi.print_directory()"}, {"intent": "A shorthand for format_list ( extract_tb ( `tb` , `limit` ) ) .", "snippet": "traceback.format_tb(tb, limit=None)"}, {"intent": "Sets the locale for `category` to the default setting .", "snippet": "locale.resetlocale()"}, {"intent": "Returns a copy of the current Context object .", "snippet": "contextvars.copy_context()"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)"}, {"intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "snippet": "platform.dist('debian', 'redhat', 'mandrake', ...))"}, {"intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "snippet": "dis.distb(file=None)"}, {"intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "snippet": "os.setxattr(path, attribute, value, flags=0)"}, {"intent": "Creates and returns a new xmlparser object . `encoding` , if specified , must be a string naming the encoding used by the XML data .", "snippet": "xml.parsers.expat.ParserCreate(encoding=None)"}, {"intent": "Print the version message for the current program ( self.version ) to `file` ( default stdout ) .", "snippet": "OptionParser.print_version(file=None)"}, {"intent": "Returns a bitmask indicating stereo mixer controls .", "snippet": "oss_mixer_device.stereocontrols()"}, {"intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` . If and only if resizemode is set to \u201c user \u201d , the turtle will be displayed stretched according to its stretchfactors : `stretch_wid` is stretchfactor perpendicular to its orientation , `stretch_len` is stretchfactor in direction of its orientation , outline determines the width of the shapes \u2019 s outline .", "snippet": "turtle.shapesize(stretch_wid=None)"}, {"intent": "Return `a` shifted left by `b` .", "snippet": "operator.lshift(a, b)"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "snippet": "dis.disco(code, lasti=-1)"}, {"intent": "Unset the `flag` ( s ) specified by flag without changing other flags .", "snippet": "mbox_message.remove_flag(flag)"}, {"intent": "Set by set_memlimit() as the memory limit for big memory tests.", "snippet": "test.support.max_memuse"}, {"intent": "Return a new database object by calling MsiOpenDatabase . `path` is the file name of the MSI file ; `persist` can be one of the constants MSIDBOPEN_CREATEDIRECT , MSIDBOPEN_CREATE , MSIDBOPEN_DIRECT , MSIDBOPEN_READONLY , or MSIDBOPEN_TRANSACT , and may include the flag MSIDBOPEN_PATCHFILE .", "snippet": "msilib.OpenDatabase(path, persist)"}, {"intent": "Constructor for an IncrementalDecoder instance .", "snippet": "codecs.IncrementalDecoder()"}, {"intent": "Set the file pointer to the specified position . Only values returned from tell ( ) should be used for `pos` .", "snippet": "AU_read.setpos(pos)"}, {"intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "snippet": "traceback_exception.from_exception(exc, limit=None)"}, {"intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)"}, {"intent": "Start accepting connections until the coroutine is cancelled .", "snippet": "server.serve_forever()"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `origin_req_host` should be the request-host of the origin transaction , as defined by RFC 2965 .", "snippet": "urllib.request.Request(url, origin_req_host=None)"}, {"intent": "Return a shallow copy of the set .", "snippet": "set.copy()"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "snippet": "py_compile.compile(file, cfile=None, optimize=-1)"}, {"intent": "Returns number of audio frames .", "snippet": "Wave_read.getnframes()"}, {"intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value .", "snippet": "xml.sax.saxutils.quoteattr(data)"}, {"intent": "To define an `option` with only a short option string :", "snippet": "OptionParser.add_option(option)"}, {"intent": "Maximum number of frames stored in the traceback of traces: result of the get_traceback_limit() when the snapshot was taken.", "snippet": "snapshot.traceback_limit"}, {"intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "snippet": "ctypes.create_string_buffer(init_or_size, size=None)"}, {"intent": "This non-public class is the base class of all fundamental ctypes data types.", "snippet": "ctypes._SimpleCData"}, {"intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)"}, {"intent": "Set the number of channels . With arguments `n`.", "snippet": "Wave_write.setnchannels(n)"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')"}, {"intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) .", "snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, tofiledate='')"}, {"intent": "Return `a` shifted left by `b` .", "snippet": "operator.__lshift__(a, b)"}, {"intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "snippet": "bytes(source, encoding, errors)"}, {"intent": "On Unix , return the current processor time as a floating point number expressed in seconds .", "snippet": "time.clock()"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "snippet": "__import__(name, globals=None, level=0)"}, {"intent": "Initialize the library .", "snippet": "curses.initscr()"}, {"intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) .", "snippet": "test.support.temp_cwd()"}, {"intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "snippet": "base_selector.select(timeout=None)"}, {"intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "snippet": "bisect.insort(a, x)"}, {"intent": "Create a new server instance . All parameters have the same meaning as for SimpleXMLRPCServer ; `requestHandler` defaults to DocXMLRPCRequestHandler . With arguments `addr`, `allow_none`.", "snippet": "xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, allow_none=False)"}, {"intent": "A Popen creationflags parameter to specify that a new process group will be created.", "snippet": "subprocess.CREATE_NEW_PROCESS_GROUP"}, {"intent": "Returns the current maximum field size allowed by the parser .", "snippet": "csv.field_size_limit()"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "snippet": "os.walk(top, onerror=None, followlinks=False)"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "snippet": "socket.getaddrinfo(host, port, type=0)"}, {"intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "snippet": "os.sendfile(out, in, offset, count, headers, trailers, flags=0)"}, {"intent": "Release the interpreter \u2019 s global import lock .", "snippet": "imp.release_lock()"}, {"intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs . The rounding mode is determined by the rounding parameter if given , else by the given `context` .", "snippet": "decimal.to_integral_exact(rounding=None, context=None)"}, {"intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`, `shortopts`, `longopts`.", "snippet": "getopt.gnu_getopt(args, shortopts, longopts=)"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "snippet": "loop.create_connection(protocol_factory, ssl=None)"}, {"intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(acct='')"}, {"intent": "The value to use for this option\u2019s destination if the option is not seen on the command line.", "snippet": "Option.default"}, {"intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `baseName`.", "snippet": "tkinter.Tk(screenName=None, baseName=None)"}, {"intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "snippet": "test.support.bind_port(sock)"}, {"intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "snippet": "definition.__qualname__"}, {"intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) . With arguments `fp`.", "snippet": "cgi.parse(fp=None)"}, {"intent": "Return a \u201c `data` \u201d wrapper object around the bytes object data .", "snippet": "plistlib.Data(data)"}, {"intent": "Returns the number of samples that could be queued into the hardware buffer to be played without blocking .", "snippet": "oss_audio_device.obuffree()"}, {"intent": "Selects TLS version 1.1 as the channel encryption protocol.", "snippet": "ssl.PROTOCOL_TLSv1_1"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The version of the pickle `protocol` can be specified with the protocol parameter . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "snippet": "shelve.open(filename, protocol=None, writeback=False)"}, {"intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "snippet": "bdb.runeval(expr, locals=None)"}, {"intent": "If you are running an entropy-gathering daemon ( EGD ) somewhere , and `path` is the pathname of a socket connection open to it , this will read 256 bytes of randomness from the socket , and add it to the SSL pseudo-random number generator to increase the security of generated secret keys .", "snippet": "ssl.RAND_egd(path)"}, {"intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)"}, {"intent": "Return the lowest index in the data where the subsequence `sub` is found , such that sub is contained in the slice s [ `start` : `end` ] .", "snippet": "bytes.find(sub, start)"}, {"intent": "Return whether `domain` is not on the whitelist for setting or receiving cookies .", "snippet": "DefaultCookiePolicy.is_not_allowed(domain)"}, {"intent": "Test that `expr` is true ( or false ) . With arguments `msg`.", "snippet": "test_case.assertFalse(expr, msg=None)"}, {"intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "snippet": "IMAP4.append(mailbox, flags, date_time, message)"}, {"intent": "Remove the payload and all of the headers .", "snippet": "email_message.clear()"}, {"intent": "A context manager that disables the garbage collector upon entry and reenables it upon exit .", "snippet": "test.support.disable_gc()"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_last_error`.", "snippet": "ctypes.OleDLL(name, use_last_error=False)"}, {"intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))"}, {"intent": "Return a copy of the object centered in a sequence of length `width` .", "snippet": "bytearray.center(width)"}, {"intent": "A wrapper for a bound socket or Windows named pipe which is \u2018 listening \u2019 for connections . `address` is the address to be used by the bound socket or named pipe of the listener object .", "snippet": "multiprocessing.connection.Listener(address)"}, {"intent": "Remove the specified `section` from the configuration .", "snippet": "config_parser.remove_section(section)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, tofiledate=b'')"}, {"intent": "The option for waitpid() to return immediately if no child process status is available immediately.", "snippet": "os.WNOHANG"}, {"intent": "Return the height of the turtle window .", "snippet": "turtle.window_height()"}, {"intent": "Calls finish_request ( ) to create an instance of the RequestHandlerClass . If desired , this function can create a new process or thread to handle the `request` ; the ForkingMixIn and ThreadingMixIn classes do this . With arguments `client_address`.", "snippet": "base_server.process_request(request, client_address)"}, {"intent": "Exactly like BytesParser , except that headersonly defaults to True . With arguments `_class`.", "snippet": "email.parser.BytesHeaderParser(_class=None)"}, {"intent": "Constructor arguments should be passed as keyword arguments only . With arguments `hide_cookie2`.", "snippet": "http.cookiejar.DefaultCookiePolicy(hide_cookie2=False)"}, {"intent": "Connection timed out", "snippet": "errno.ETIMEDOUT"}, {"intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None, enable_SMTPUTF8=False)"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`, `kwds`.", "snippet": "types.new_class(name, bases=(), kwds=None)"}, {"intent": "Selects TLS version 1.0 as the channel encryption protocol.", "snippet": "ssl.PROTOCOL_TLSv1"}, {"intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified .", "snippet": "SSLContext.load_verify_locations(cafile=None, capath=None)"}, {"intent": "Read a plist file . `pathOrFile` may be either a file name or a ( readable and binary ) file object .", "snippet": "plistlib.readPlist(pathOrFile)"}, {"intent": "Return the bitwise or of `a` and `b` .", "snippet": "operator.or_(a, b)"}, {"intent": "Return the sine of `x` radians .", "snippet": "math.sin(x)"}, {"intent": "Object that is less than anything (except itself).", "snippet": "test.support.SMALLEST"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `strategy` is used to tune the compression algorithm .", "snippet": "zlib.compressobj(zdict, strategy=Z_DEFAULT_STRATEGY)"}, {"intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "snippet": "glob.iglob(pathname, recursive=False)"}, {"intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "snippet": "pdb.Pdb(stdin=None)"}, {"intent": "The encoded value of the cookie \u2014 this is what should be sent.", "snippet": "Morsel.coded_value"}, {"intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "snippet": "Pattern.findall(string)"}, {"intent": "Open an LZMA-compressed file in binary `mode` .", "snippet": "lzma.LZMAFile(mode=\"r\")"}, {"intent": "A generic version of builtins.set . With arguments `set`.", "snippet": "typing.Set(set)"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "snippet": "time.replace(hour=self.hour)"}, {"intent": "Close the file descriptor of the polling object .", "snippet": "devpoll.close()"}, {"intent": "Return the round-robin quantum in seconds for the process with PID `pid` .", "snippet": "os.sched_rr_get_interval(pid)"}, {"intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `return_when` indicates when this function should return .", "snippet": "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)"}, {"intent": "The text value of the attribute.", "snippet": "Attr.value"}, {"intent": "Others have execute permission.", "snippet": "stat.S_IXOTH"}, {"intent": "Equivalent to get ( False ) .", "snippet": "Queue.get_nowait()"}, {"intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "snippet": "incremental_decoder.decode(object, final)"}, {"intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "snippet": "meta_path_finder.find_module(fullname, path)"}, {"intent": "Return the value of `field` as a string where possible .", "snippet": "Record.GetString(field)"}, {"intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "snippet": "connection.execute(sql)"}, {"intent": "Return True if the symbol is referenced in its block , but not assigned to .", "snippet": "symbol.is_free()"}, {"intent": "A string to issue as an intro or banner.", "snippet": "Cmd.intro"}, {"intent": "Return non-zero if the `mode` is from an event port .", "snippet": "stat.S_ISPORT(mode)"}, {"intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "snippet": "str.find(sub)"}, {"intent": "A numeric error code from the expat parser.", "snippet": "parse_error.code"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `description`.", "snippet": "unittest.FunctionTestCase(testFunc, setUp=None, description=None)"}, {"intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "snippet": "traceback.extract_stack(f=None)"}, {"intent": "This method is called from dispatch_return ( ) when stop_here ( ) yields True . With arguments `frame`, `return_value`.", "snippet": "bdb.user_return(frame, return_value)"}, {"intent": "Return the current local date .", "snippet": "date.today()"}, {"intent": "Remove and return an item from the queue .", "snippet": "SimpleQueue.get()"}, {"intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "snippet": "urllib.parse.unquote_plus(string, errors='replace')"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `all_frames: bool`, `domain: int`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False, domain: int=None)"}, {"intent": "ABCs for read-only and mutable sequences.", "snippet": "collections.abc.ByteString"}, {"intent": "Return a dictionary containing the instance-wide defaults .", "snippet": "config_parser.defaults()"}, {"intent": "Set the `inheritable` flag of the socket \u2019 s file descriptor or socket \u2019 s handle .", "snippet": "socket.set_inheritable(inheritable)"}, {"intent": "Wrap `application` and return a new WSGI application object .", "snippet": "wsgiref.validate.validator(application)"}, {"intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")"}, {"intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "snippet": "mapping_proxy_type.get(key, default)"}, {"intent": "Between 1 and the number of days in the given month of the given year.", "snippet": "datetime.day"}, {"intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "snippet": "shutil.copyfile(src, dst)"}, {"intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function . If the `record` argument is False ( the default ) the context manager returns None on entry .", "snippet": "warnings.catch_warnings(record=False)"}, {"intent": "Set the sequence of blocked domains . With arguments `blocked_domains`.", "snippet": "DefaultCookiePolicy.set_blocked_domains(blocked_domains)"}, {"intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`, `loop`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)"}, {"intent": "Decorator for skipping tests if gzip doesn\u2019t exist.", "snippet": "@test.support.requires_gzip"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "snippet": "nntplib.NNTP(host, timeout, port=119)"}, {"intent": "Return the data collected between a SB/SE pair ( suboption begin/end ) .", "snippet": "Telnet.read_sb_data()"}, {"intent": "An abstract base class for classes that implement object.__aenter__() and object.__aexit__().", "snippet": "contextlib.AbstractAsyncContextManager"}, {"intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`, `errors`.", "snippet": "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)"}, {"intent": "Others have read permission.", "snippet": "stat.S_IROTH"}, {"intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `offset` is not None , compares to the offset of the SyntaxError .", "snippet": "test.support.check_syntax_error(testcase, statement, offset=None)"}, {"intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "snippet": "random.randrange(start, stop, step)"}, {"intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "snippet": "faulthandler.unregister(signum)"}, {"intent": "All arguments are optional and default to 0 .", "snippet": "datetime.timedelta()"}, {"intent": "Update the set , keeping only elements found in either set , but not in both . With arguments `other`.", "snippet": "set.symmetric_difference_update(other)"}, {"intent": "A Popen creationflags parameter to specify that a new process will have an normal priority.", "snippet": "subprocess.NORMAL_PRIORITY_CLASS"}, {"intent": "Compares `x` and `y` numerically .", "snippet": "context.compare(x, y)"}, {"intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "snippet": "io.StringIO(initial_value='', newline='\\n')"}, {"intent": "Run command with arguments and return its output . The actual `encoding` of the output data may depend on the command being invoked , so the decoding to `text` will often need to be handled at the application level . With arguments `args`.", "snippet": "subprocess.check_output(args, text=None)"}, {"intent": "The name of the encoding.", "snippet": "codec_info.name"}, {"intent": "The main configuration parser . When `default_section` is given , it specifies the name for the special section holding default values for other sections and `interpolation` purposes ( normally named `` DEFAULT '' ) . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), default_section=configparser.DEFAULTSECT)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "snippet": "tempfile.mkstemp(prefix=None, text=False)"}, {"intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`.", "snippet": "pool.map_async(func, iterable)"}, {"intent": "Query or modify the configuration options of the Tix application context . With arguments `**kw`, `cnf`.", "snippet": "tixCommand.tix_configure(**kw, cnf=None)"}, {"intent": "Create an object to `trace` execution of a single statement or expression . `ignoremods` is a list of modules or packages to ignore .", "snippet": "trace.Trace(ignoremods=())"}, {"intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy .", "snippet": "urllib.request.AbstractDigestAuthHandler()"}, {"intent": "Locale category for the formatting of time.", "snippet": "locale.LC_TIME"}, {"intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'bytes'>`, `maintype`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cid=None)"}, {"intent": "An abstract method for finding a spec for the specified module . With arguments `fullname`.", "snippet": "path_entry_finder.find_spec(fullname)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getfloat(section, option, fallback, raw=False)"}, {"intent": "The line number in the file where the definition starts.", "snippet": "Class.lineno"}, {"intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds . When a given header name does not appear in the registry , the class specified by `default_class` is used as the specialized class . When `use_default_map` is True ( the default ) , the standard mapping of header names to classes is copied in to the registry during initialization .", "snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader, use_default_map=True)"}, {"intent": "The main configuration parser . When `allow_no_value` is True ( default : False ) , options without values are accepted ; the value held for these is None and they are serialized without the trailing delimiter . With arguments `':')`, `';')`.", "snippet": "configparser.ConfigParser(':'), ';'), allow_no_value=False)"}, {"intent": "When this namespace is specified, the name string is a URL.", "snippet": "uuid.NAMESPACE_URL"}, {"intent": "The original URL passed to the constructor.", "snippet": "Request.full_url"}, {"intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "snippet": "smtplib.SMTP(port=0)"}, {"intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "snippet": "urllib.parse.urlencode(query, errors=None)"}, {"intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "snippet": "re.LOCALE"}, {"intent": "Return the hexadecimal representation of the binary `data` .", "snippet": "binascii.b2a_hex(data)"}, {"intent": "Return `obj` negated ( -obj ) .", "snippet": "operator.__neg__(obj)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, restkey=None)"}, {"intent": "Wait till an object in `object_list` is ready . If `timeout` is a float then the call blocks for at most that many seconds .", "snippet": "multiprocessing.connection.wait(object_list, timeout=None)"}, {"intent": "Return true if the `object` is a user-defined or built-in function or method .", "snippet": "inspect.isroutine(object)"}, {"intent": "A subclass of Path and PurePosixPath , this class represents concrete non-Windows filesystem paths : With arguments `*pathsegments`.", "snippet": "pathlib.PosixPath(*pathsegments)"}, {"intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "snippet": "Path.rglob(pattern)"}, {"intent": "Send a STARTTLS command . The `context` argument is optional and should be a ssl.SSLContext object .", "snippet": "NNTP.starttls(context=None)"}, {"intent": "In range(24).", "snippet": "time.hour"}, {"intent": "Create a new socket using the given address `family` , socket `type` and protocol number .", "snippet": "socket.socket(type=SOCK_STREAM)"}, {"intent": "Stop recording the vertices of a polygon .", "snippet": "turtle.end_poly()"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver(ptype='')"}, {"intent": "Return the path to the file named `filename` .", "snippet": "test.support.findfile(filename)"}, {"intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line .", "snippet": "email.generator.BytesGenerator(outfp, mangle_from_=None)"}, {"intent": "Return true if all bytes in the sequence are ASCII decimal digits and the sequence is not empty , false otherwise .", "snippet": "bytes.isdigit()"}, {"intent": "Return successive `r` length permutations of elements in the `iterable` .", "snippet": "itertools.permutations(iterable, r=None)"}, {"intent": "These classes are pre-defined using the mix-in classes.", "snippet": "socketserver.ThreadingUDPServer"}, {"intent": "The original host for the request, without port.", "snippet": "Request.origin_req_host"}, {"intent": "A Set object indicating which functions in the os module permit use of their follow_symlinks parameter.", "snippet": "os.supports_follow_symlinks"}, {"intent": "Send a HELP command .", "snippet": "NNTP.help()"}, {"intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "snippet": "email.headerregistry.Group(addresses=None)"}, {"intent": "User identifier of the file owner.", "snippet": "stat_result.st_uid"}, {"intent": "Bind `fun` to mouse-move events on this turtle .", "snippet": "turtle.ondrag(fun)"}, {"intent": "The document encoding is not supported by Expat.", "snippet": "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . A dictionary can be specified in `map` to avoid using a global socket map .", "snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None)"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor . If given , `arcname` specifies an alternative name for the file in the archive , otherwise , the name is taken from fileobj \u2019 s name attribute , or the name argument .", "snippet": "TarFile.gettarinfo(name=None, arcname=None)"}, {"intent": "Add a `section` named section to the instance .", "snippet": "raw_config_parser.add_section(section)"}, {"intent": "Create a parser instance able to parse invalid markup . If `convert_charrefs` is True ( the default ) , all character references ( except the ones in script/style elements ) are automatically converted to the corresponding Unicode characters .", "snippet": "html.parser.HTMLParser(convert_charrefs=True)"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "snippet": "pprint.pprint(object, stream=None)"}, {"intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "snippet": "smtp_channel.received_data"}, {"intent": "Enter cbreak mode .", "snippet": "curses.cbreak()"}, {"intent": "Return true if there is at least one uppercase alphabetic ASCII character in the sequence and no lowercase ASCII characters , false otherwise .", "snippet": "bytearray.isupper()"}, {"intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "snippet": "urllib.parse.quote(string, safe='/', encoding=None)"}, {"intent": "The same as RawArray ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes array . With arguments `typecode_or_type`, `size_or_initializer`.", "snippet": "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, lock=True)"}, {"intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods .", "snippet": "multiprocessing.JoinableQueue()"}, {"intent": "Return True if the stat tuples `stat1` and `stat2` refer to the same file .", "snippet": "os.path.samestat(stat1, stat2)"}, {"intent": "Set to the top level directory that contains test.support.", "snippet": "test.support.TEST_SUPPORT_DIR"}, {"intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "snippet": "struct.unpack_from(format, buffer)"}, {"intent": "Call os.unlink ( ) on `filename` .", "snippet": "test.support.unlink(filename)"}, {"intent": "A string containing a diagnostic message associated with the fault.", "snippet": "fault.faultString"}, {"intent": "Windows only : Returns a textual description of the error `code` code .", "snippet": "ctypes.FormatError(code)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, separators=None)"}, {"intent": "A string representation of the interface with the network as a host mask.", "snippet": "i_pv4_interface.with_hostmask"}, {"intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) .", "snippet": "types.new_class(name)"}, {"intent": "Return the system identifier for the current event .", "snippet": "Locator.getSystemId()"}, {"intent": "A concrete implementation of Finder.find_module ( ) which is equivalent to self.find_loader ( `fullname` ) [ 0 ] .", "snippet": "path_entry_finder.find_module(fullname)"}, {"intent": "This method is called unconditionally after tearDown ( ) , or after setUp ( ) if setUp ( ) raises an exception .", "snippet": "test_case.doCleanups()"}, {"intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'bytes'>`, `maintype`, `subtype`.", "snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cte=\"base64\", disposition=None)"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver(release='')"}, {"intent": "This function expands XInclude directives . `elem` is the root element . `loader` is an optional resource loader .", "snippet": "xml.etree.ElementInclude.include(elem, loader=None)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "snippet": "bytearray.rsplit(maxsplit=-1)"}, {"intent": "Open for binary reading the `resource` within `package` .", "snippet": "importlib.resources.open_binary(package, resource)"}, {"intent": "The name of the Python codec used to convert Unicode to the output_charset.", "snippet": "charset.output_codec"}, {"intent": "This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA).", "snippet": "unicodedata.ucd_3_2_0"}, {"intent": "Create a MIME-compliant header that can contain strings in different character sets . Subject ) pass in the name of the field in `header_name` .", "snippet": "email.header.Header(header_name=None)"}, {"intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "snippet": "heapq.merge(*iterables, reverse=False)"}, {"intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "snippet": "Request.has_header(header)"}, {"intent": "Raised when a future is cancelled.", "snippet": "concurrent.futures.CancelledError"}, {"intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "snippet": "base64.standard_b64decode(s)"}, {"intent": "ABCs for mapping, items, keys, and values views.", "snippet": "collections.abc.KeysView"}, {"intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.LZMAFile(filters=None)"}, {"intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "snippet": "Request.header_items()"}, {"intent": "Returns True if `x` is a normal number ; otherwise returns False .", "snippet": "context.is_normal(x)"}, {"intent": "Return the value of the given socket option ( see the Unix man page getsockopt ( 2 ) ) . If `buflen` is absent , an integer option is assumed and its integer value is returned by the function . With arguments `level`, `optname`.", "snippet": "socket.getsockopt(level, optname, buflen)"}, {"intent": "The part of the tagName following the colon if there is one, else the entire tagName.", "snippet": "Node.localName"}, {"intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "snippet": "subprocess.check_call(args, stdin=None, shell=False)"}, {"intent": "The name of the library passed in the constructor.", "snippet": "PyDLL._name"}, {"intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) . The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to as_completed ( ) .", "snippet": "concurrent.futures.as_completed(fs, timeout=None)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, deprecated=False)"}, {"intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "snippet": "glob.glob(pathname)"}, {"intent": "The token buffer.", "snippet": "shlex.token"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''))"}, {"intent": "The mathematical constant \u03c4 = 6.283185\u2026, to available precision.", "snippet": "math.tau"}, {"intent": "Terminate the SMTP session and close the connection .", "snippet": "SMTP.quit()"}, {"intent": "Send any pending whitespace buffered from a previous call to add_flowing_data ( ) to the associated writer object .", "snippet": "formatter.flush_softspace()"}, {"intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "snippet": "base_selector.get_key(fileobj)"}, {"intent": "This is a standard context defined by the General Decimal Arithmetic Specification.", "snippet": "decimal.ExtendedContext"}, {"intent": "Additional known values of the encoding field from the AU header, but which are not supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"}, {"intent": "Exception raised when non-blocking put() (or put_nowait()) is called on a Queue object which is full.", "snippet": "queue.Full"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getboolean(section, option, raw=False)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "snippet": "doctest.DocTestSuite(module=None, extraglobs=None)"}, {"intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "snippet": "codecs.BOM_UTF16"}, {"intent": "A non-callable version of Mock . With arguments `**kwargs`, `wraps`.", "snippet": "unittest.mock.NonCallableMock(**kwargs, wraps=None)"}, {"intent": "A `message` with mbox-specific behaviors .", "snippet": "mailbox.mboxMessage()"}, {"intent": "Between 1 and 12 inclusive.", "snippet": "datetime.month"}, {"intent": "Voluntarily relinquish the CPU .", "snippet": "os.sched_yield()"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "snippet": "timeit.repeat(setup='pass')"}, {"intent": "Delete the dialect associated with `name` from the dialect registry .", "snippet": "csv.unregister_dialect(name)"}, {"intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)"}, {"intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "snippet": "collections.deque()"}, {"intent": "A set containing the names of the hash algorithms guaranteed to be supported by this module on all platforms.", "snippet": "hashlib.algorithms_guaranteed"}, {"intent": "Return the bitwise or of `a` and `b` .", "snippet": "operator.__or__(a, b)"}, {"intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`.", "snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs)"}, {"intent": "If there is no certificate for the peer on the other end of the connection , return None . If the `binary_form` parameter is False , and a certificate was received from the peer , this method returns a dict instance .", "snippet": "SSLSocket.getpeercert(binary_form=False)"}, {"intent": "Returns the currently-set application callable .", "snippet": "wsgi_server.get_app()"}, {"intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "snippet": "executor.map(func, *iterables, timeout=None, chunksize=1)"}, {"intent": "Called when the parser presents minor warning information to the application . Raising an `exception` in this method will cause parsing to end .", "snippet": "ErrorHandler.warning(exception)"}, {"intent": "Set the quitting attribute to True .", "snippet": "bdb.set_quit()"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` .", "snippet": "logging.handlers.RotatingFileHandler(filename)"}, {"intent": "Get a string that represents the era used in the current locale.", "snippet": "locale.ERA"}, {"intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, _encoder=email.encoders.encode_base64)"}, {"intent": "An optional method which , when called , should invalidate any internal cache used by the finder .", "snippet": "path_entry_finder.invalidate_caches()"}, {"intent": "Add and return a RadioButtonGroup control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "snippet": "dialog.radiogroup(name, x, y, width, height, attributes, property, text, next_control)"}, {"intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "snippet": "os.rename(src, dst, src_dir_fd=None, dst_dir_fd=None)"}, {"intent": "Return True if the Task is done .", "snippet": "task.done()"}, {"intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "snippet": "os.RTLD_GLOBAL"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')"}, {"intent": "Sequence containing all the keywords defined for the interpreter.", "snippet": "keyword.kwlist"}, {"intent": "Whether the path points to an existing file or directory :", "snippet": "Path.exists()"}, {"intent": "Return the file descriptor number of the control fd .", "snippet": "kqueue.fileno()"}, {"intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped . The optional `logoption` keyword argument ( default is 0 ) is a bit field \u2013 see below for possible values to combine . The optional `facility` keyword argument ( default is LOG_USER ) sets the default facility for messages which do not have a facility explicitly encoded .", "snippet": "syslog.openlog(ident, logoption, facility)"}, {"intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "snippet": "raw_config_parser.set(section, option, value)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements .", "snippet": "xml.etree.ElementTree.tostringlist(element)"}, {"intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`, `cumulative: bool`.", "snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)"}, {"intent": "Unpacks and returns a fixed length opaque data stream , similarly to unpack_fstring ( ) . With arguments `n`.", "snippet": "Unpacker.unpack_fopaque(n)"}, {"intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `extra`.", "snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)"}, {"intent": "Parameters to the sendfile() function, if the implementation supports them.", "snippet": "os.SF_SYNC"}, {"intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) . In this case , the `check` and `preset` arguments should not be used .", "snippet": "lzma.LZMAFile(filename=None, check=-1)"}, {"intent": "All following arguments are optional and can be accessed as instance attributes as well . It can be omitted if `fileobj` is given .", "snippet": "tarfile.TarFile(fileobj=None)"}, {"intent": "Values of the encoding field from the AU header which are supported by this module.", "snippet": "sunau.AUDIO_FILE_ENCODING_LINEAR_24"}, {"intent": "This function is analogous to getgeneratorlocals ( ) , but works for `coroutine` objects created by async def functions .", "snippet": "inspect.getcoroutinelocals(coroutine)"}, {"intent": "Error raised when an unpicklable object is encountered by Pickler.", "snippet": "pickle.PicklingError"}, {"intent": "If tzinfo is None , returns None , else returns self.tzinfo.dst ( None ) , and raises an exception if the latter doesn \u2019 t return None , or a timedelta object with magnitude less than one day .", "snippet": "time.dst()"}, {"intent": "Read and return up to `size` bytes with only one call on the raw stream .", "snippet": "buffered_reader.read1()"}, {"intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "snippet": "test_case.assertLogs(logger=None)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "snippet": "TarFile.extractall(path=\".\", members=None, numeric_owner=False)"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "snippet": "asyncio.open_connection(limit=None)"}, {"intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "snippet": "uuid.uuid5(namespace, name)"}, {"intent": "Return the signal which caused the process to exit . With arguments `status`.", "snippet": "os.WTERMSIG(status)"}, {"intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] . With arguments `chunksize`.", "snippet": "pool.starmap(func, iterable, chunksize)"}, {"intent": "The string used to separate (or, rather, terminate) lines on the current platform.", "snippet": "os.linesep"}, {"intent": "Stop autoincrement mode : cancels any recurring timer event initiated by Progressbar.start ( ) for this progress bar .", "snippet": "widget.stop()"}, {"intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "snippet": "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')"}, {"intent": "Write a file into the archive . `zinfo_or_arcname` is either the file name it will be given in the archive , or a ZipInfo instance . The contents is `data` , which may be either a str or a bytes instance ; if it is a str , it is encoded as UTF-8 first .", "snippet": "ZipFile.writestr(zinfo_or_arcname, data)"}, {"intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string . If `ssl_version` is specified , uses that version of the SSL protocol to attempt to connect to the server .", "snippet": "ssl.get_server_certificate(addr, ssl_version=PROTOCOL_TLS)"}, {"intent": "Windows only : The returned function prototype creates functions that use the stdcall calling convention , except on Windows CE where WINFUNCTYPE ( ) is the same as CFUNCTYPE ( ) . `use_errno` and `use_last_error` have the same meaning as above . With arguments `restype`, `*argtypes`.", "snippet": "ctypes.WINFUNCTYPE(restype, *argtypes, use_last_error=False)"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)"}, {"intent": "An abstract base class for a loader.", "snippet": "importlib.abc.Loader"}, {"intent": "Returns the general category assigned to the character `chr` as string .", "snippet": "unicodedata.category(chr)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')"}, {"intent": "Filter action.", "snippet": "kevent.flags"}, {"intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix .", "snippet": "logging.handlers.TimedRotatingFileHandler(filename)"}, {"intent": "Return `value` as a plist-formatted bytes object .", "snippet": "plistlib.dumps(value)"}, {"intent": "Return the binary contents of the pointed-to file as a bytes object :", "snippet": "Path.read_bytes()"}, {"intent": "The name of the header (the portion of the field before the \u2018:\u2019).", "snippet": "base_header.name"}, {"intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "snippet": "wsgiref.util.FileWrapper(filelike, blksize=8192)"}, {"intent": "Put `item` into the queue .", "snippet": "SimpleQueue.put(item)"}, {"intent": "A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions . With arguments `resource_name`.", "snippet": "test.support.transient_internet(resource_name)"}, {"intent": "Return `a` + `b` , for a and b numbers .", "snippet": "operator.add(a, b)"}, {"intent": "Accept a connection .", "snippet": "dispatcher.accept()"}, {"intent": "Like find ( ) , but raise ValueError when the subsequence is not found . With arguments `sub`, `start`.", "snippet": "bytes.index(sub, start)"}, {"intent": "Accept a connection .", "snippet": "socket.accept()"}, {"intent": "Same as print_usage ( ) but returns the usage string instead of printing it .", "snippet": "OptionParser.get_usage()"}, {"intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "snippet": "subprocess.check_call(args, stderr=None)"}, {"intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "snippet": "mailbox.__iter__()"}, {"intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "snippet": "dataclasses.astuple(instance)"}, {"intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "snippet": "email_message.get_all(name, failobj=None)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, timeout, password=None)"}, {"intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)"}, {"intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` . With arguments `                     line_buffering`.", "snippet": "text_io_wrapper.reconfigure(encoding, errors, newline,                      line_buffering, write_through)"}, {"intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order . With arguments `msg`.", "snippet": "test_case.assertCountEqual(first, second, msg=None)"}, {"intent": "No CSI structure available", "snippet": "errno.ENOCSI"}, {"intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "snippet": "mock.assert_called_once_with(*args, **kwargs)"}, {"intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` , unless local mailman configurations knows about an address , in which case it will be handled via mailman . With arguments `localaddr`.", "snippet": "smtpd.MailmanProxy(localaddr, remoteaddr)"}, {"intent": "This method does nothing . With arguments `record`.", "snippet": "null_handler.handle(record)"}, {"intent": "Return a copy of the object right justified in a sequence of length `width` .", "snippet": "bytes.rjust(width)"}, {"intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "snippet": "header.append(s, charset=None)"}, {"intent": "Close the stream .", "snippet": "stream_writer.close()"}, {"intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`, `filename`.", "snippet": "code.InteractiveConsole(locals=None, filename=\"<console>\")"}, {"intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "snippet": "urllib.request.build_opener(handler)"}, {"intent": "Resets all of the traps to 0 .", "snippet": "context.clear_traps()"}, {"intent": "Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.", "snippet": "PendingDeprecationWarning"}, {"intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "snippet": "str.count(sub)"}, {"intent": "Prevents re-use of the same ECDH key for distinct SSL sessions.", "snippet": "ssl.OP_SINGLE_ECDH_USE"}, {"intent": "A subclass of BaseManager which can be used for the synchronization of processes.", "snippet": "multiprocessing.managers.SyncManager"}, {"intent": "Return the number of summary properties , through MsiSummaryInfoGetPropertyCount ( ) .", "snippet": "SummaryInformation.GetPropertyCount()"}, {"intent": "Return the event loop the Future object is bound to .", "snippet": "future.get_loop()"}, {"intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)"}, {"intent": "In range(60).", "snippet": "datetime.second"}, {"intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "snippet": "pool.map_async(func, iterable, chunksize)"}, {"intent": "Set by set_memlimit() as the memory limit for big memory tests.", "snippet": "test.support.real_max_memuse"}, {"intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "snippet": "Pattern.subn(repl, string)"}, {"intent": "Raised when the implementation does not support the requested type of object or operation.", "snippet": "xml.dom.NotSupportedErr"}, {"intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "snippet": "email.headerregistry.Address(addr_spec=None)"}, {"intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "snippet": "writer.send_flowing_data(data)"}, {"intent": "Create an AIFF file .", "snippet": "aifc.aiff()"}, {"intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "snippet": "os.spawnlpe(mode, file, env)"}, {"intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "snippet": "difflib.Differ(charjunk=None)"}, {"intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "snippet": "subprocess.call(args, stderr=None)"}, {"intent": "These are the possible values for si_code in the result returned by waitid().", "snippet": "os.CLD_DUMPED"}, {"intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "snippet": "importlib.util.find_spec(name, package=None)"}, {"intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "snippet": "ctypes.Structure(*args, **kw)"}, {"intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "snippet": "bytes.count(sub, start)"}, {"intent": "Remove this file or symbolic link .", "snippet": "Path.unlink()"}, {"intent": "Streams pipe error", "snippet": "errno.ESTRPIPE"}, {"intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)"}, {"intent": "Create a new socket using the given address `family` , socket `type` and protocol number .", "snippet": "socket.socket()"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "snippet": "gettext.translation(domain, localedir=None, languages=None)"}, {"intent": "The object passed as the tzinfo argument to the time constructor, or None if none was passed.", "snippet": "time.tzinfo"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "snippet": "timeit.repeat(globals=None)"}, {"intent": "The column corresponding to pos (may be None).", "snippet": "system_random.colno"}, {"intent": "Files and subdirectories in b, filtered by hide and ignore.", "snippet": "dircmp.right_list"}, {"intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers . If the optional second argument `xbar` is given , it should be the mean of data .", "snippet": "statistics.variance(data, xbar=None)"}, {"intent": "Like rfind ( ) but raises ValueError when the subsequence `sub` is not found .", "snippet": "bytearray.rindex(sub)"}, {"intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group . With arguments `file`.", "snippet": "NNTP.over(message_spec, file=None)"}, {"intent": "A generator can be annotated by the generic type Generator [ YieldType , SendType , ReturnType ] . With arguments `IteratorT_co`, `GenericT_co`, `T_contra`.", "snippet": "typing.Generator(IteratorT_co, GenericT_co, T_contra)"}, {"intent": "This is the base of all AST node classes.", "snippet": "ast.AST"}, {"intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value . With arguments `entities`.", "snippet": "xml.sax.saxutils.quoteattr(data, entities={})"}, {"intent": "Determine if the formatted representation of the `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "snippet": "PrettyPrinter.isreadable(object)"}, {"intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "snippet": "codecs.CodecInfo(encode, decode, streamreader=None)"}, {"intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "snippet": "auto.filename2"}, {"intent": "Decrements interval timer both when the process executes and when the system is executing on behalf of the process.", "snippet": "signal.ITIMER_PROF"}, {"intent": "Class that simulates a dictionary .", "snippet": "collections.UserDict()"}, {"intent": "Return a Document that represents the `string` .", "snippet": "xml.dom.minidom.parseString(string)"}, {"intent": "Equivalent to tputs ( `str` , 1 , putchar ) ; emit the value of a specified terminfo capability for the current terminal .", "snippet": "curses.putp(str)"}, {"intent": "Create a new SSL context .", "snippet": "ssl.SSLContext()"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "snippet": "gettext.translation(domain, localedir=None, class_=None)"}, {"intent": "Context manager for temporarily redirecting sys.stdout to another file or file-like object . With arguments `new_target`.", "snippet": "contextlib.redirect_stdout(new_target)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "snippet": "smtplib.SMTP_SSL(timeout, source_address=None)"}, {"intent": "If the `value` has a `name` attribute , it is returned to unmodified .", "snippet": "email_policy.header_fetch_parse(name, value)"}, {"intent": "Sequence of all compare operation names.", "snippet": "dis.cmp_op"}, {"intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`, `type`.", "snippet": "dispatcher.create_socket(family=socket.AF_INET, type=socket.SOCK_STREAM)"}, {"intent": "assert the mock has been called with the specified arguments . With arguments `*args`, `**kwargs`.", "snippet": "mock.assert_any_call(*args, **kwargs)"}, {"intent": "Whether the OpenSSL library has built-in support for the SSL 3.0 protocol.", "snippet": "ssl.HAS_SSLv3"}, {"intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided .", "snippet": "code.interact(readfunc=None)"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `baseName`.", "snippet": "tkinter.Tcl(screenName=None, baseName=None)"}, {"intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "snippet": "TarFile.add(name, recursive=True, filter=None)"}, {"intent": "Parses the contents of the string `data` , calling the appropriate handler functions to process the parsed data . `isfinal` must be true on the final call to this method ; it allows the parsing of a single file in fragments , not the submission of multiple files .", "snippet": "xmlparser.Parse(data, isfinal)"}, {"intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . Optional _mangle_from_ and `maxheaderlen` are as with the Generator base class . With arguments `outfp`, `mangle_from_`.", "snippet": "email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None)"}, {"intent": "Constants for Linux host/guest communication.", "snippet": "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"}, {"intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in . With arguments `*args`.", "snippet": "loop.call_soon(callback, *args, context=None)"}, {"intent": "Set or disable undobuffer . If `size` is an integer an empty undobuffer of given size is installed .", "snippet": "turtle.setundobuffer(size)"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid : If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data . The `dict_type` is the type used for dictionaries that are read from the plist file .", "snippet": "plistlib.load(fp, fmt=None, use_builtin_types=True, dict_type=dict)"}, {"intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "snippet": "xml.sax.saxutils.XMLGenerator(out=None)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "snippet": "subprocess.Popen(args, shell=False)"}, {"intent": "Raised on dbm.dumb-specific errors, such as I/O errors.", "snippet": "dbm.dumb.error"}, {"intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . If the `src` file is specified , it is interpreted relative to the current directory .", "snippet": "directory.add_file(file, src=None)"}, {"intent": "Device or resource busy", "snippet": "errno.EBUSY"}, {"intent": "An array that represents the abbreviated days of the week in the current locale.", "snippet": "calendar.day_abbr"}, {"intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `encoding`.", "snippet": "io.open(file, encoding=None)"}, {"intent": "The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "snippet": "types.BuiltinMethodType"}, {"intent": "Close the stream , and make the instance unusable .", "snippet": "AU_read.close()"}, {"intent": "Open FTP URLs.", "snippet": "urllib.request.FTPHandler"}, {"intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "snippet": "lzma.LZMAFile(filename=None, mode=\"r\")"}, {"intent": "A generic version of `dict` . With arguments `MutableMappingKT`.", "snippet": "typing.Dict(dict, MutableMappingKT)"}, {"intent": "Encodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that encoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeEncodeError ) .", "snippet": "codecs.encode(obj, encoding='utf-8', errors='strict')"}, {"intent": "`policy` is an object implementing the CookiePolicy interface . With arguments `filename`.", "snippet": "http.cookiejar.FileCookieJar(filename, policy=None)"}, {"intent": "Name of the ndbm implementation library used.", "snippet": "dbm.ndbm.library"}, {"intent": "These classes are pre-defined using the mix-in classes.", "snippet": "socketserver.ForkingUDPServer"}, {"intent": "Recursive implementation used by repr ( ) . This uses the type of `obj` to determine which formatting method to call , passing it obj and `level` .", "snippet": "Repr.repr1(obj, level)"}, {"intent": "Returns the machine type , e.g .", "snippet": "platform.machine()"}, {"intent": "Start a subprocess to start the manager .", "snippet": "base_manager.start()"}, {"intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "snippet": "profile.run(command, filename=None, sort=-1)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False)"}, {"intent": "Checks for an ASCII control character ( ordinal values 0 to 31 ) . With arguments `c`.", "snippet": "curses.ascii.isctrl(c)"}, {"intent": "Equivalent to put ( `item` , False ) .", "snippet": "Queue.put_nowait(item)"}, {"intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "snippet": "window.addch(ch)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)"}, {"intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "snippet": "buffered_io_base.read1()"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")"}, {"intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "snippet": "Match.end()"}, {"intent": "Identical to CLOCK_MONOTONIC, except it also includes any time that the system is suspended.", "snippet": "time.CLOCK_BOOTTIME"}, {"intent": "Test that `first` is respectively > , > = , < or < = than `second` depending on the method name .", "snippet": "test_case.assertLessEqual(first, second)"}, {"intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)"}, {"intent": "Return the toplevel SymbolTable for the Python source `code` . `filename` is the name of the file containing the code . `compile_type` is like the mode argument to compile ( ) .", "snippet": "symtable.symtable(code, filename, compile_type)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs, errors='replace')"}, {"intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "snippet": "OpenerDirector.open(url, data=None)"}, {"intent": "Send a STARTTLS command .", "snippet": "NNTP.starttls()"}, {"intent": "Return the lowercased value ( without parameters ) of the message \u2019 s Content-Disposition header if it has one , or None .", "snippet": "message.get_content_disposition()"}, {"intent": "File objects used by the interpreter for standard input, output and errors:", "snippet": "sys.stdout"}, {"intent": "Handle authentication with the proxy . `password_mgr` , if given , should be something that is compatible with HTTPPasswordMgr ; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported .", "snippet": "urllib.request.ProxyBasicAuthHandler(password_mgr=None)"}, {"intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "snippet": "pdb.runcall(function, *args, **kwds)"}, {"intent": "Like rfind ( ) but raises ValueError when the substring `sub` is not found . With arguments `start`.", "snippet": "str.rindex(sub, start)"}, {"intent": "Sets the threshold for this logger to `level` .", "snippet": "queue_listener.setLevel(level)"}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(acct='')"}, {"intent": "Add the TarInfo object `tarinfo` to the archive .", "snippet": "TarFile.addfile(tarinfo)"}, {"intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "snippet": "threading.Thread(daemon=None)"}, {"intent": "The size of the buffer used when buffer_text is true.", "snippet": "xmlparser.buffer_size"}, {"intent": "Register a `fd` descriptor with the epoll object . With arguments `eventmask`.", "snippet": "epoll.register(fd, eventmask)"}, {"intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `failfast` , `catchbreak` and `buffer` parameters have the same effect as the same-name command-line options .", "snippet": "unittest.main(failfast=None)"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `symlinks`.", "snippet": "venv.EnvBuilder(symlinks=False)"}, {"intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `skipkeys` is true ( `default` : False ) , then dict keys that are not of a basic type ( str , int , float , bool , None ) will be skipped instead of raising a TypeError . With arguments `**kw`.", "snippet": "json.dump(obj, fp, **kw, skipkeys=False)"}, {"intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "snippet": "loop.create_unix_connection(protocol_factory, ssl=None)"}, {"intent": "Add the TarInfo object `tarinfo` to the archive . If `fileobj` is given , it should be a binary file , and tarinfo.size bytes are read from it and added to the archive .", "snippet": "TarFile.addfile(tarinfo, fileobj=None)"}, {"intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "snippet": "bytes.replace(old, new)"}, {"intent": "Low level interface to kevent With arguments `changelist`, `max_events`, `timeout`.", "snippet": "kqueue.control(changelist, max_events, timeout)"}, {"intent": "Contains information about the current hardware profile of the local computer system.", "snippet": "winreg.HKEY_CURRENT_CONFIG"}, {"intent": "Instructs writer objects to never quote fields.", "snippet": "csv.QUOTE_NONE"}, {"intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.LZMAFile(filename=None, format=None)"}, {"intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "snippet": "pickle.dump(obj, file, protocol=None)"}, {"intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "snippet": "test_case.assertIsNot(first, second)"}, {"intent": "Platform dependent:", "snippet": "stat_result.st_ctime_ns"}, {"intent": "Make the turtle visible .", "snippet": "turtle.st()"}, {"intent": "Set focus on TurtleScreen ( in order to collect key-events ) . With arguments `xdummy`, `ydummy`.", "snippet": "turtle.listen(xdummy=None, ydummy=None)"}, {"intent": "Dictionary mapping suffixes to suffixes.", "snippet": "mimetypes.suffix_map"}, {"intent": "Decorator for skipping tests if `resource` is not available .", "snippet": "@test.support.requires_resource(resource)"}, {"intent": "A 64-bit number.", "snippet": "winreg.REG_QWORD"}, {"intent": "A generic version of builtins.frozenset . With arguments `frozenset`, `AbstractSetT_co`.", "snippet": "typing.FrozenSet(frozenset, AbstractSetT_co)"}, {"intent": "Same as gettempprefix ( ) but the return value is in bytes .", "snippet": "tempfile.gettempprefixb()"}, {"intent": "SSL 3.0 to TLS 1.3.", "snippet": "TLSVersion.TLSv1_3"}, {"intent": "Constants used in the mask arguments.", "snippet": "tkinter.WRITABLE"}, {"intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `xml_declaration` controls if an XML declaration should be added to the file .", "snippet": "element_tree.write(file, encoding=\"us-ascii\", xml_declaration=None)"}, {"intent": "The type of objects defined in extension modules with PyGetSetDef, such as FrameType.f_locals or array.array.typecode.", "snippet": "types.GetSetDescriptorType"}, {"intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter .", "snippet": "winreg.DeleteKey(key, sub_key)"}, {"intent": "Return None , or the sequence of allowed domains ( as a tuple ) .", "snippet": "DefaultCookiePolicy.allowed_domains()"}, {"intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object . The `ancbufsize` and `flags` arguments have the same meaning as for recvmsg ( ) .", "snippet": "socket.recvmsg_into(buffers, ancbufsize)"}, {"intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "snippet": "parser.issuite(st)"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`, `day`.", "snippet": "date.replace(month=self.month, day=self.day)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `checker`, `verbose`.", "snippet": "doctest.DebugRunner(checker=None, verbose=None)"}, {"intent": "Return the user \u2019 s current erase character as a one-byte bytes object .", "snippet": "curses.erasechar()"}, {"intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "snippet": "calendar.monthdays2calendar(year, month)"}, {"intent": "Returns the name assigned to the character `chr` as a string .", "snippet": "unicodedata.name(chr)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, restval=None)"}, {"intent": "Encode the given object , `o` , and yield each string representation as available .", "snippet": "json_encoder.iterencode(o)"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(format=FORMAT_XZ, preset=None)"}, {"intent": "Group id of the owner.", "snippet": "stat.ST_GID"}, {"intent": "Contains the command (request type).", "snippet": "base_http_request_handler.command"}, {"intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`.", "snippet": "quopri.encodestring(s)"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`.", "snippet": "date.replace(month=self.month)"}, {"intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "snippet": "loop.create_connection(protocol_factory, host=None)"}, {"intent": "Return a list of names of all currently available turtle shapes .", "snippet": "turtle.getshapes()"}, {"intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")"}, {"intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`, `cls`.", "snippet": "json.loads(s, **kw, encoding=None, cls=None)"}, {"intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)"}, {"intent": "Equivalent to as_bytes ( ) .", "snippet": "email_message.__bytes__()"}, {"intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default .", "snippet": "xmlrpc.client.loads(data, use_builtin_types=False)"}, {"intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor . If given , `arcname` specifies an alternative name for the file in the archive , otherwise , the name is taken from fileobj \u2019 s name attribute , or the name argument .", "snippet": "TarFile.gettarinfo(name=None, arcname=None, fileobj=None)"}, {"intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) . `context` and `numlines` are both optional keyword arguments .", "snippet": "html_diff.make_file(fromlines, tolines, fromdesc='', context=False)"}, {"intent": "Module : email.mime.multipart Optional `boundary` is the multipart boundary string . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "snippet": "email.mime.multipart.MIMEMultipart(**_params, boundary=None, _subparts=None)"}, {"intent": "A deprecated alias of OSError.", "snippet": "select.error"}, {"intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `vars`.", "snippet": "config_parser.items(vars=None)"}, {"intent": "Return True if `path` is an absolute pathname .", "snippet": "os.path.isabs(path)"}, {"intent": "Test that two dictionaries are equal . With arguments `first`, `second`, `msg`.", "snippet": "test_case.assertDictEqual(first, second, msg=None)"}, {"intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `current_offset` is not None , it refers to an instruction offset in the disassembled code . With arguments `x`.", "snippet": "dis.Bytecode(x, current_offset=None)"}, {"intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "snippet": "warnings.formatwarning(message, category, filename, lineno, line=None)"}, {"intent": "Network is unreachable", "snippet": "errno.ENETUNREACH"}, {"intent": "The initial character set specified.", "snippet": "charset.input_charset"}, {"intent": "The character used by the operating system to separate pathname components.", "snippet": "os.sep"}, {"intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "snippet": "ContentHandler.startElementNS(name, qname, attrs)"}, {"intent": "When setting cookies, require a full RFC 2965 domain-match.", "snippet": "DefaultCookiePolicy.DomainRFC2965Match"}, {"intent": "Write `value` to a plist file . The `fmt` argument specifies the format of the plist file and can be one of the following values : When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "snippet": "plistlib.dump(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "snippet": "test_case.assertNotAlmostEqual(first, second, msg=None)"}, {"intent": "Path to the base directory for the user site-packages.", "snippet": "site.USER_BASE"}, {"intent": "Constructor arguments should be passed as keyword arguments only . `allowed_domains` if not None , this is a sequence of the only domains for which we accept and return cookies .", "snippet": "http.cookiejar.DefaultCookiePolicy(allowed_domains=None)"}, {"intent": "Return a new Control object . With arguments `name`, `type`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `control_next`, `help`.", "snippet": "dialog.control(name, type, x, y, width, height, attributes, property, text, control_next, help)"}, {"intent": "Indicates whether the named `section` is present in the configuration .", "snippet": "config_parser.has_section(section)"}, {"intent": "Read and return at most `size` characters from the stream as a single str .", "snippet": "text_io_base.read()"}, {"intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "snippet": "Pattern.findall(string, pos)"}, {"intent": "Returns the computer \u2019 s network name ( may not be fully qualified ! ) .", "snippet": "platform.node()"}, {"intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "snippet": "datetime.fromtimestamp(timestamp)"}, {"intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "snippet": "decimal.to_integral_value(rounding=None, context=None)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "snippet": "doctest.DebugRunner(optionflags=0)"}, {"intent": "The maximum value allowed for the timeout parameter of Lock.acquire().", "snippet": "_thread.TIMEOUT_MAX"}, {"intent": "Name of the ZIP file.", "snippet": "ZipFile.filename"}, {"intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`, `stdout`, `stderr`.", "snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"}, {"intent": "Reads the robots.txt URL and feeds it to the parser .", "snippet": "robot_file_parser.read()"}, {"intent": "Capture an exception for later rendering . With arguments `exc_type`, `exc_value`, `exc_traceback`.", "snippet": "traceback.TracebackException(exc_type, exc_value, exc_traceback)"}, {"intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "snippet": "doctest.DocFileSuite(*paths, setUp=None)"}, {"intent": "Move the window so its upper-left corner is at ( `new_y` , `new_x` ) .", "snippet": "window.mvwin(new_y, new_x)"}, {"intent": "Return a network interface name corresponding to an interface index number . With arguments `if_index`.", "snippet": "socket.if_indextoname(if_index)"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.load(file, encoding=\"ASCII\")"}, {"intent": "Header-encode the `string` string .", "snippet": "charset.header_encode(string)"}, {"intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring .", "snippet": "types.ModuleType(name)"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "snippet": "datetime.datetime(year, month, day, minute=0)"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`.", "snippet": "warnings.simplefilter(action, category=Warning, lineno=0)"}, {"intent": "Retrieve CRLs from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "snippet": "ssl.enum_crls(store_name)"}, {"intent": "Convert doctest tests for a `module` to a unittest.TestSuite .", "snippet": "doctest.DocTestSuite(module=None)"}, {"intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection .", "snippet": "urllib.request.HTTPSHandler(check_hostname=None)"}, {"intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `encoding`.", "snippet": "Path.open(encoding=None)"}, {"intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "snippet": "ArgumentParser.add_argument_group(title=None, description=None)"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`.", "snippet": "ctypes.OleDLL(name)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())"}, {"intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "snippet": "formatter.DumbWriter(file=None, maxcol=72)"}, {"intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "snippet": "decimal.as_integer_ratio()"}, {"intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored . `callback` is an optional single parameter callable that is called on each line after it is sent .", "snippet": "FTP.storlines(cmd, fp, callback=None)"}, {"intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "snippet": "gettext.install(domain, codeset=None)"}, {"intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided .", "snippet": "code.interact(banner=None)"}, {"intent": "Represents the C unsigned int datatype.", "snippet": "ctypes.c_uint"}, {"intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`.", "snippet": "socketserver.UnixDatagramServer(server_address, RequestHandlerClass)"}, {"intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)"}, {"intent": "Test that `first` and `second` are not equal . With arguments `msg`.", "snippet": "test_case.assertNotEqual(first, second, msg=None)"}, {"intent": "Create a BaseManager object . `address` is the address on which the manager process listens for new connections . `authkey` is the authentication key which will be used to check the validity of incoming connections to the server process .", "snippet": "multiprocessing.managers.BaseManager(address, authkey)"}, {"intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "snippet": "config_parser.items(section, raw=False)"}, {"intent": "Logs a message with level ERROR on this logger . With arguments `msg`, `*args`, `**kwargs`.", "snippet": "queue_listener.error(msg, *args, **kwargs)"}, {"intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)"}, {"intent": "Return true if the sequence is ASCII titlecase and the sequence is not empty , false otherwise .", "snippet": "bytes.istitle()"}, {"intent": "This is the same function as sequence2st ( ) . With arguments `sequence`.", "snippet": "parser.tuple2st(sequence)"}, {"intent": "An abstract method for finding a spec for the specified module . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "snippet": "path_entry_finder.find_spec(fullname, target=None)"}, {"intent": "Write the bytes from `buf` to the memory BIO .", "snippet": "memory_bio.write(buf)"}, {"intent": "Removes a named `value` from a registry `key` .", "snippet": "winreg.DeleteValue(key, value)"}, {"intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode . This function can support paths relative to directory descriptors with the `dir_fd` parameter .", "snippet": "os.open(path, flags, mode=0o777, dir_fd=None)"}, {"intent": "Constructor for a priority queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "snippet": "queue.PriorityQueue(maxsize=0)"}, {"intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "snippet": "bytearray.count(sub, start, end)"}, {"intent": "Rounds to an integer . With arguments `x`.", "snippet": "context.to_integral_exact(x)"}, {"intent": "Exception raised when non-blocking get() (or get_nowait()) is called on a Queue object which is empty.", "snippet": "queue.Empty"}, {"intent": "If set, a new dict will be created for the frame\u2019s f_locals when the code object is executed.", "snippet": "inspect.CO_NEWLOCALS"}, {"intent": "Return true if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty , false otherwise .", "snippet": "bytes.isalpha()"}, {"intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key . `reserved` is a reserved integer , and must be zero .", "snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)"}, {"intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)"}, {"intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "snippet": "bytearray.rsplit(sep=None, maxsplit=-1)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, blocked=(), deprecated=False)"}, {"intent": "Return a time corresponding to a `time_string` in one of the formats emitted by time.isoformat ( ) .", "snippet": "time.fromisoformat(time_string)"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(object=b'', encoding='utf-8')"}, {"intent": "Return a string representing the \u201c From \u201d line that marks the start of the message in an mbox mailbox .", "snippet": "mbox_message.get_from()"}, {"intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)"}, {"intent": "The total number (int) of expected bytes.", "snippet": "abstract_event_loop.expected"}, {"intent": "A subclass of Mailbox for mailboxes in MMDF format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "snippet": "mailbox.MMDF(path, factory=None)"}, {"intent": "Parameters to the sendfile() function, if the implementation supports them.", "snippet": "os.SF_MNOWAIT"}, {"intent": "The base class of the other exceptions in this module.", "snippet": "http.client.HTTPException"}, {"intent": "Same as gettempdir ( ) but the return value is in bytes .", "snippet": "tempfile.gettempdirb()"}, {"intent": "Remove ( delete ) the directory `path` . With arguments `dir_fd`.", "snippet": "os.rmdir(path, dir_fd=None)"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "snippet": "loop.create_unix_server(protocol_factory, backlog=100)"}, {"intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . If `compiled` is True , both source files will be compiled and added to the zip package . With arguments `pkg_name`, `depth`.", "snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=False)"}, {"intent": "Retry the request with authentication information , if available . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "snippet": "HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)"}, {"intent": "This is a subclass of POP3 that connects to the server over an SSL encrypted socket . If `port` is not specified , 995 , the standard POP3-over-SSL port is used . With arguments `host`.", "snippet": "poplib.POP3_SSL(host, port=POP3_SSL_PORT)"}, {"intent": "Get the debug mode ( bool ) of the event loop .", "snippet": "loop.get_debug()"}, {"intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "snippet": "OpenerDirector.open(url, timeout)"}, {"intent": "Invalid request descriptor", "snippet": "errno.EBADR"}, {"intent": "These objects contain the original values of stdin, stderr and stdout at the start of the program.", "snippet": "sys.__stderr__"}, {"intent": "Files and subdirectories only in b.", "snippet": "dircmp.right_only"}, {"intent": "Return the time of the specified clock `clk_id` .", "snippet": "time.clock_gettime(clk_id)"}, {"intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, spec_set=None)"}, {"intent": "Decode the base85-encoded bytes-like object or ASCII string `b` and return the decoded bytes .", "snippet": "base64.b85decode(b)"}, {"intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`, `depth`.", "snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1)"}, {"intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "snippet": "process.join()"}, {"intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "snippet": "email_message.__str__()"}, {"intent": "Base class for all tarfile exceptions.", "snippet": "tarfile.TarError"}, {"intent": "This method allows you to compare two Header instances for inequality . With arguments `other`.", "snippet": "header.__ne__(other)"}, {"intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "snippet": "asyncio.run_coroutine_threadsafe(coro, loop)"}, {"intent": "The DocTest object that was being run when the example failed.", "snippet": "UnexpectedException.test"}, {"intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(host='', acct='')"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "snippet": "doctest.testmod(m=None)"}, {"intent": "A basic test runner implementation that outputs results to a `stream` .", "snippet": "unittest.TextTestRunner(stream=None)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "snippet": "HTTPConnection.request(method, url, headers={})"}, {"intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) .", "snippet": "shlex.error_leader()"}, {"intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `start_serving`.", "snippet": "loop.create_unix_server(protocol_factory, start_serving=True)"}, {"intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "snippet": "IMAP4.getannotation(mailbox, entry, attribute)"}, {"intent": "Parameters to the lseek() function.", "snippet": "os.SEEK_CUR"}, {"intent": "Constructor for a FIFO queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "snippet": "queue.Queue(maxsize=0)"}, {"intent": "Cookie value (a string), or None.", "snippet": "Cookie.value"}, {"intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "snippet": "_c_data.from_buffer(source)"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "snippet": "os.fwalk(top='.', follow_symlinks=False)"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "snippet": "tkinter.Tcl(className='Tk')"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `use_errno`.", "snippet": "ctypes.WinDLL(name, use_errno=False)"}, {"intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "snippet": "ctypes.WinError(code=None, descr=None)"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "snippet": "shelve.open(filename, flag='c', protocol=None)"}, {"intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "snippet": "base_http_request_handler.log_request(size='-')"}, {"intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "snippet": "IMAP4.uid(command, arg)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qs(qs, errors='replace')"}, {"intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "snippet": "xml.sax.saxutils.XMLFilterBase(base)"}, {"intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "snippet": "writer.new_alignment(align)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)"}, {"intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "snippet": "collections.namedtuple(typename, field_names, rename=False)"}, {"intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "snippet": "traceback.FrameSummary(filename, lineno, name)"}, {"intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "snippet": "pdb.Pdb(completekey='tab', skip=None)"}, {"intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "snippet": "json.dumps(obj, **kw, default=None)"}, {"intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `globs` gives a dict to be used as the globals when executing examples .", "snippet": "doctest.testfile(filename, globs=None)"}, {"intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "snippet": "bdb.run(cmd, locals=None)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "snippet": "timeit.repeat(number=1000000)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)"}, {"intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "snippet": "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "snippet": "ctypes.OleDLL(name, handle=None)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "snippet": "bisect.bisect(a, x)"}, {"intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "snippet": "pickletools.dis(pickle, out=None, annotate=0)"}, {"intent": "Rename this file or directory to the given `target` .", "snippet": "Path.replace(target)"}, {"intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "snippet": "condition.notify(n=1)"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "snippet": "dis.disco(code)"}, {"intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "snippet": "str.format_map(mapping)"}, {"intent": "Read and return up to `size` bytes .", "snippet": "buffered_io_base.read(size=-1)"}, {"intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "snippet": "element_tree.find(match)"}, {"intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)"}, {"intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)"}, {"intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)"}, {"intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "snippet": "math.log(x, base)"}, {"intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "snippet": "turtle.screensize(canvheight=None, bg=None)"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)"}, {"intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors='replace')"}, {"intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `is_package`.", "snippet": "importlib.machinery.ModuleSpec(name, loader, is_package=None)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "snippet": "profile.Profile(timeunit=0.0)"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pprint(object, width=80)"}, {"intent": "Returns a foreign function at the specified `address` which must be an integer .", "snippet": "prototype(address)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "snippet": "message.set_param(param, value, requote=True)"}, {"intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "snippet": "curses.ascii.isblank(c)"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "snippet": "cgitb.enable(display=1, logdir=None)"}, {"intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "snippet": "bdb.stop_here(frame)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . With arguments `follow_symlinks`.", "snippet": "os.utime(path, times=None, follow_symlinks=True)"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "snippet": "tempfile.NamedTemporaryFile(mode='w+b')"}, {"intent": "Return a formatted dump of the tree in `node` . If this is wanted , `include_attributes` can be set to true .", "snippet": "ast.dump(node, include_attributes=False)"}, {"intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "snippet": "lzma_decompressor.decompress(data, max_length=-1)"}, {"intent": "Test whether every element in other is in the set.", "snippet": "set >= other"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "snippet": "nntplib.NNTP_SSL(host, timeout, password=None)"}, {"intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "snippet": "time.isoformat(timespec='auto')"}, {"intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')"}, {"intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "snippet": "set()"}, {"intent": "Compile several source files . The files named in `args` ( or on the command line , if args is None ) are compiled and the resulting byte-code is cached in the normal manner .", "snippet": "py_compile.main(args=None)"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)"}, {"intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "snippet": "logging.handlers.WatchedFileHandler(filename, mode='a')"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, port=119, usenetrc=False)"}, {"intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "snippet": "email.iterators.typed_subpart_iterator(msg, subtype=None)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "snippet": "nntplib.NNTP_SSL(host, port=563, password=None)"}, {"intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.load(file, fix_imports=True, encoding=\"ASCII\")"}, {"intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "snippet": "textwrap.TextWrapper(**kwargs)"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "snippet": "importlib.__import__(name, level=0)"}, {"intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "snippet": "warnings.showwarning(message, category, filename, lineno, file=None)"}, {"intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "snippet": "email.encoders.encode_7or8bit(msg)"}, {"intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "snippet": "Pattern.finditer(string, pos)"}, {"intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "snippet": "mailbox.Maildir(dirname)"}, {"intent": "Return a list of options available in the specified `section` .", "snippet": "config_parser.options(section)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "snippet": "unittest.mock.Mock(**kwargs, name=None)"}, {"intent": "Returns a panel object , associating it with the given window `win` .", "snippet": "curses.panel.new_panel(win)"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), release='', versioninfo=('', machine='')"}, {"intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "snippet": "str.rsplit(sep=None)"}, {"intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `allowZip64`.", "snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=True)"}, {"intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "snippet": "doctest.DocTestRunner(verbose=None)"}, {"intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "snippet": "CookiePolicy.set_ok(cookie, request)"}, {"intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdOutput`.", "snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`, `verbose`.", "snippet": "xmlrpc.client.ServerProxy(uri, verbose=False)"}, {"intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "snippet": "bytes.rpartition(sep)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "snippet": "calendar.calendar(year, c=6)"}, {"intent": "Get a wide character . With arguments `y`, `x`.", "snippet": "window.get_wch(y, x)"}, {"intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)"}, {"intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)"}, {"intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "snippet": "calendar.yeardayscalendar(year, width=3)"}, {"intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)"}, {"intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "snippet": "turtle.setposition(x, y=None)"}, {"intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "snippet": "http.client.HTTPSConnection(host, timeout)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . `tagname` , if specified and not None , is a string giving a tag name for the mapping .", "snippet": "mmap.mmap(fileno, length, offset, tagname=None)"}, {"intent": "Decodes `obj` using the codec registered for `encoding` .", "snippet": "codecs.decode(obj, encoding='utf-8')"}, {"intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)"}, {"intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "snippet": "socket.sendmsg_afalg(msg, op)"}, {"intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "snippet": "re.error(msg, pattern=None, pos=None)"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "snippet": "directory.start_component(component=None, feature=None)"}, {"intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "snippet": "gettext.find(domain, localedir=None, languages=None, all=False)"}, {"intent": "Set the value of the given socket option ( see the Unix manual page setsockopt ( 2 ) ) . The value can be an integer , `None` or a bytes-like object representing a buffer . With arguments `level`, `optname`, `optlen: int`.", "snippet": "socket.setsockopt(level, optname, None, optlen: int)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "snippet": "compile(source, filename, mode, flags=0, optimize=-1)"}, {"intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)"}, {"intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", short_empty_elements=True)"}, {"intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "snippet": "FTP.login(user='anonymous', passwd='', acct='')"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time . With arguments `builtins`.", "snippet": "profile.Profile(timeunit=0.0, builtins=True)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")"}, {"intent": "Set the quota `root` \u2019 s resource `limits` .", "snippet": "IMAP4.setquota(root, limits)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "snippet": "nntplib.NNTP_SSL(host, port=563, user=None)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, timeout, user=None)"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "snippet": "socket.getaddrinfo(host, port)"}, {"intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "snippet": "tempfile.mkdtemp(suffix=None, dir=None)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "snippet": "gzip.GzipFile(filename=None, mtime=None)"}, {"intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "snippet": "extension_file_loader.create_module(spec)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "snippet": "unittest.mock.Mock(**kwargs, side_effect=None)"}, {"intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "snippet": "policy.header_fetch_parse(name, value)"}, {"intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `encoding`.", "snippet": "Path.open(mode='r', encoding=None)"}, {"intent": "This class represents a MIME-types database . With arguments `strict`.", "snippet": "mimetypes.MimeTypes(strict=True)"}, {"intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "snippet": "sniffer.sniff(sample, delimiters=None)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)"}, {"intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "snippet": "test_case.assertIsInstance(obj, cls, msg=None)"}, {"intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "snippet": "cgitb.html(info, context=5)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "gzip.open(filename, mode='rb', newline=None)"}, {"intent": "Finds text for the first subelement matching `match` .", "snippet": "element.findtext(match)"}, {"intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "snippet": "bisect.insort_left(a, x, hi=len(a))"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')"}, {"intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)"}, {"intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "snippet": "window.border(ls, rs, ts, bs, tl)"}, {"intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "snippet": "generator.clone(fp)"}, {"intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "snippet": "plistlib.loads(data, fmt=None, dict_type=dict)"}, {"intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`.", "snippet": "null_importer.find_module(fullname)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "snippet": "nntplib.NNTP_SSL(host, password=None)"}, {"intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "snippet": "doctest.DebugRunner(verbose=None)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "snippet": "text_calendar.pryear(theyear, l=1, m=3)"}, {"intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "snippet": "Match.end(group)"}, {"intent": "Set the `flags` specified by flags and unset all others .", "snippet": "maildir_message.set_flags(flags)"}, {"intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "snippet": "ZipFile.extractall(path=None, members=None)"}, {"intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)"}, {"intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`, `temporary`.", "snippet": "bdb.set_break(filename, lineno, cond, funcname, temporary=0)"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "snippet": "tkinter.Tcl(screenName=None, className='Tk')"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "snippet": "loop.getaddrinfo(host, port, family=0, proto=0)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "bz2.open(filename, mode='r', encoding=None)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `encoding`.", "snippet": "argparse.FileType(mode='r', encoding=None)"}, {"intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "snippet": "asyncore.loop(timeout, use_poll, map)"}, {"intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "snippet": "tarfile.open(**kwargs)"}, {"intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "snippet": "gzip.GzipFile(fileobj=None)"}, {"intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "snippet": "turtle.setpos(x, y=None)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used .", "snippet": "logging.handlers.RotatingFileHandler(filename, mode='a')"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "snippet": "text_calendar.pryear(theyear, m=3)"}, {"intent": "Raise a NotImplementedError exception . `peer` is the remote host \u2019 s address , `mailfrom` is the envelope originator , `rcpttos` are the envelope recipients and `data` is a string containing the contents of the e-mail ( which should be in RFC 5321 format ) . Implementations of process_message should use the `**kwargs` signature to accept arbitrary keyword arguments , since future feature enhancements may add keys to the kwargs dictionary .", "snippet": "smtp_server.process_message(peer, mailfrom, rcpttos, data, **kwargs)"}, {"intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))"}, {"intent": "Decodes `obj` using the codec registered for `encoding` .", "snippet": "codecs.decode(obj)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)"}, {"intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)"}, {"intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "snippet": "super(type)"}, {"intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "snippet": "test.support.import_module(name, required_on(), deprecated=False)"}, {"intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "snippet": "fractions.Fraction(float)"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(encoding='utf-8')"}, {"intent": "Return a string version of `object` .", "snippet": "str()"}, {"intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "snippet": "os.spawnve(mode, path, args, env)"}, {"intent": "Return the bitwise inverse of the number `obj` .", "snippet": "operator.__invert__(obj)"}, {"intent": "Set the compression `type` and description . With arguments `name`.", "snippet": "Wave_write.setcomptype(type, name)"}, {"intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)"}, {"intent": "The cursor method accepts a single optional parameter `factory` .", "snippet": "connection.cursor(factory=Cursor)"}, {"intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "snippet": "DatagramProtocol.datagram_received(data, addr)"}, {"intent": "Represent a single frame in the traceback or stack that is being formatted or printed . It may optionally have a stringified version of the frames `locals` included in it . With arguments `filename`, `lineno`, `name`.", "snippet": "traceback.FrameSummary(filename, lineno, name, locals=None)"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "snippet": "socket.getaddrinfo(host, port, family=0, type=0)"}, {"intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "snippet": "loop.getaddrinfo(host, port, family=0, flags=0)"}, {"intent": "Return the absolute value of `obj` .", "snippet": "operator.__abs__(obj)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "snippet": "@dataclasses.dataclass(init=True, repr=True)"}, {"intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "snippet": "chunk.Chunk(file, bigendian=True)"}, {"intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `dir`.", "snippet": "tempfile.TemporaryDirectory(suffix=None, dir=None)"}, {"intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "snippet": "pdb.Pdb(completekey='tab', stdin=None)"}, {"intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "snippet": "calendar.itermonthdays4(year, month)"}, {"intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "snippet": "os.walk(top, topdown=True, followlinks=False)"}, {"intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "snippet": "bisect.insort_right(a, x, lo=0)"}, {"intent": "Return True if `obj` is a coroutine object .", "snippet": "asyncio.iscoroutine(obj)"}, {"intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "snippet": "datetime.datetime(year, month, day, tzinfo=None)"}, {"intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "snippet": "counter.subtract(iterable-or-mapping)"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "snippet": "lzma.open(filename, mode=\"rb\")"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `newline`.", "snippet": "tempfile.NamedTemporaryFile(newline=None)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "snippet": "datetime.replace(tzinfo=self.tzinfo)"}, {"intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "snippet": "email.generator.DecodedGenerator(outfp, fmt=None)"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "snippet": "random.choices(population, weights=None, k=1)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)"}, {"intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function . The optional `protocol` and `writeback` parameters have the same interpretation as for the Shelf class .", "snippet": "shelve.DbfilenameShelf(filename, flag='c', protocol=None)"}, {"intent": "Change the mode of the file descriptor `fd` to raw . If `when` is omitted , it defaults to termios.TCSAFLUSH , and is passed to termios.tcsetattr ( ) .", "snippet": "tty.setraw(fd, when=termios.TCSAFLUSH)"}, {"intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "snippet": "calendar.yeardays2calendar(year, width=3)"}, {"intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})"}, {"intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "snippet": "os.execlpe(file, arg0, arg1, env)"}, {"intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "snippet": "message.get_param(param, failobj=None)"}, {"intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "snippet": "CGIXMLRPCRequestHandler.register_instance(instance)"}, {"intent": "`handler` should be an instance of BaseHandler .", "snippet": "OpenerDirector.add_handler(handler)"}, {"intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "snippet": "OpenerDirector.open(url, timeout, data=None)"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), release='', machine='')"}, {"intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)"}, {"intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "snippet": "IMAP4.search(charset, criterion)"}, {"intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "snippet": "imp.source_from_cache(path)"}, {"intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.Babyl(path, create=True)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)"}, {"intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)"}, {"intent": "Decodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that decoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeDecodeError ) .", "snippet": "codecs.decode(obj, encoding='utf-8', errors='strict')"}, {"intent": "Set the `flags` specified by flags and unset all others .", "snippet": "mmdf_message.set_flags(flags)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)"}, {"intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "snippet": "TarFile.add(name, arcname=None, filter=None)"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "snippet": "loop.getaddrinfo(host, port, type=0, proto=0)"}, {"intent": "A generic version of `collections.OrderedDict` . With arguments `MutableMappingKT`, `VT`.", "snippet": "typing.OrderedDict(collections.OrderedDict, MutableMappingKT, VT)"}, {"intent": "Display a vertical line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "snippet": "window.vline(y, x, ch, n)"}, {"intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "snippet": "base_rotating_handler.rotate(source, dest)"}, {"intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "snippet": "subprocess.Popen(args, stderr=None)"}, {"intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)"}, {"intent": "Change the `mode` of `path` to the numeric mode .", "snippet": "os.lchmod(path, mode)"}, {"intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "snippet": "mmap.flush(offset)"}, {"intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "snippet": "io.open(file, mode='r')"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(object=b'', errors='strict')"}, {"intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "snippet": "OSError(arg)"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `onerror`.", "snippet": "os.fwalk(top='.', onerror=None)"}, {"intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "snippet": "__import__(name, locals=None, fromlist=())"}, {"intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "snippet": "shlex.shlex(infile=None)"}, {"intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "snippet": "platform.libc_ver(lib='', chunksize=16384)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "snippet": "message.del_param(param, requote=True)"}, {"intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)"}, {"intent": "assert the mock has been called with the specified `calls` . If `any_order` is false ( the default ) then the calls must be sequential .", "snippet": "mock.assert_has_calls(calls, any_order=False)"}, {"intent": "A generic version of `collections.ChainMap` . With arguments `MutableMappingKT`, `VT`.", "snippet": "typing.ChainMap(collections.ChainMap, MutableMappingKT, VT)"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "snippet": "tkinter.Tcl(baseName=None)"}, {"intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "snippet": "window.addnstr(y, x, str, n, attr)"}, {"intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)"}, {"intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)"}, {"intent": "A shorthand for format_list ( extract_tb ( `tb` , `limit` ) ) .", "snippet": "traceback.format_tb(tb)"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)"}, {"intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "snippet": "tkinter.Tk(baseName=None, className='Tk')"}, {"intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "snippet": "Telnet.read_until(expected, timeout=None)"}, {"intent": "Return a string version of `object` .", "snippet": "str(object=b'')"}, {"intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "snippet": "warnings.filterwarnings(action, message='', lineno=0)"}, {"intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "snippet": "bytearray.translate(table, delete=b'')"}, {"intent": "Return an MH instance representing the `folder` whose name is folder .", "snippet": "mh.get_folder(folder)"}, {"intent": "Write the `value` on the open `file` . The `version` argument indicates the data format that dump should use ( see below ) .", "snippet": "marshal.dump(value, file, version)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, timeout, port=119, usenetrc=False)"}, {"intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')"}, {"intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "snippet": "sys.__breakpointhook__"}, {"intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "snippet": "traceback.print_stack(f=None, limit=None)"}, {"intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "snippet": "cgitb.enable(logdir=None, context=5)"}, {"intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "snippet": "zipapp.create_archive(source, target=None, main=None)"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "snippet": "importlib.__import__(name, globals=None, level=0)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')"}, {"intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed . With arguments `args`.", "snippet": "base_proxy._callmethod(methodname, args)"}, {"intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, timeout, port=119, password=None)"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)"}, {"intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "snippet": "@dataclasses.dataclass(init=True, eq=True)"}, {"intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object . If `file` is supplied , though , then groups will be empty .", "snippet": "NNTP.newgroups(date, file=None)"}, {"intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "snippet": "codecs.open(filename, mode='r', buffering=1)"}, {"intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ThreadPoolExecutor(initializer=None)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.__le__(a, b)"}, {"intent": "Compile the file with path `fullname` . With arguments `force`.", "snippet": "compileall.compile_file(fullname, force=False)"}, {"intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "snippet": "TarFile.extractall(members=None)"}, {"intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "snippet": "xml.dom.getDOMImplementation(name=None, features=())"}, {"intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "snippet": "fileinput.input(files=None, backup='')"}, {"intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "snippet": "traceback.format_exc(limit=None, chain=True)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.__ne__(a, b)"}, {"intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "snippet": "turtle.screensize(canvwidth=None, bg=None)"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(encoding='utf-8', errors='strict')"}, {"intent": "Test that `expr` is ( or is not ) None .", "snippet": "test_case.assertIsNone(expr)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "snippet": "text_calendar.pryear(theyear, l=1)"}, {"intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "snippet": "chunk.seek(pos)"}, {"intent": "Return a str version of `object` . With arguments `errors`.", "snippet": "str(object=b'', errors='strict')"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "snippet": "shlex.shlex(infile=None, posix=False)"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "snippet": "time.replace(minute=self.minute)"}, {"intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "snippet": "turtle.tracer(n=None, delay=None)"}, {"intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "snippet": "zipapp.create_archive(source, target=None, interpreter=None)"}, {"intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)"}, {"intent": "QName wrapper . `text_or_uri` is a string containing the QName value , in the form { uri } local , or , if the `tag` argument is given , the URI part of a QName .", "snippet": "xml.etree.ElementTree.QName(text_or_uri, tag=None)"}, {"intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)"}, {"intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "snippet": "importlib.abc.FileLoader(fullname, path)"}, {"intent": "Time `number` executions of the main statement .", "snippet": "timer.timeit(number=1000000)"}, {"intent": "Set the attributes of `num` characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "snippet": "window.chgat(num, attr)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)"}, {"intent": "Return a Signature ( or its subclass ) object for a given callable `obj` . With arguments `follow_wrapped`.", "snippet": "signature.from_callable(obj, follow_wrapped=True)"}, {"intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "snippet": "concurrent.futures.ProcessPoolExecutor(initializer=None)"}, {"intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `method`.", "snippet": "http.client.HTTPResponse(sock, debuglevel=0, method=None)"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")"}, {"intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "snippet": "parser.isexpr(st)"}, {"intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "queue.get(block)"}, {"intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "snippet": "profile.Profile(timer=None, timeunit=0.0)"}, {"intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "snippet": "time.replace(second=self.second)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `loader_state`.", "snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)"}, {"intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "snippet": "turtle.turtlesize(outline=None)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')"}, {"intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)"}, {"intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "snippet": "text_calendar.pryear(theyear, w=2, c=6)"}, {"intent": "Constructor for an IncrementalDecoder instance . The IncrementalDecoder may implement different error handling schemes by providing the `errors` keyword argument .", "snippet": "codecs.IncrementalDecoder(errors='strict')"}, {"intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "snippet": "timezone.utcoffset(dt)"}, {"intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "snippet": "nntplib.NNTP(host, user=None)"}, {"intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "snippet": "gnu_translations.lngettext(singular, plural, n)"}, {"intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)"}, {"intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)"}, {"intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "snippet": "ast.parse(source, mode='exec')"}, {"intent": "Declares `object` to be a valid constructor .", "snippet": "copyreg.constructor(object)"}, {"intent": "Set the current process \u2019 s real , effective , and saved user ids . With arguments `ruid`, `euid`, `suid`.", "snippet": "os.setresuid(ruid, euid, suid)"}, {"intent": "Return True if `resource` is enabled and available .", "snippet": "test.support.is_resource_enabled(resource)"}, {"intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' . With arguments `encoding`.", "snippet": "socket.makefile(mode='r', encoding=None)"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pprint(object, indent=1)"}, {"intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "snippet": "imp.cache_from_source(path)"}, {"intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.__ge__(a, b)"}, {"intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)"}, {"intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "snippet": "pdb.Pdb(completekey='tab')"}, {"intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "snippet": "multiprocessing.JoinableQueue(maxsize)"}, {"intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)"}, {"intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "snippet": "FTP.ntransfercmd(cmd, rest=None)"}, {"intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "snippet": "bytes_generator.write(s)"}, {"intent": "Sets the threshold for this handler to `level` .", "snippet": "queue_listener.setLevel(level)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "snippet": "urllib.request.Request(url, data=None)"}, {"intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "snippet": "calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)"}, {"intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "snippet": "socket.gethostbyname_ex(hostname)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "snippet": "os.utime(path, times=None, dir_fd=None)"}, {"intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "snippet": "readline.set_pre_input_hook(function)"}, {"intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "SimpleQueue.get(block=True)"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `locals`.", "snippet": "importlib.__import__(name, globals=None, locals=None)"}, {"intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "snippet": "bytearray.lstrip(chars)"}, {"intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)"}, {"intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "snippet": "Pattern.match(string, pos)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "snippet": "base64.a85decode(b, foldspaces=False, adobe=False)"}, {"intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)"}, {"intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "snippet": "test_case.assertNotIsInstance(obj, cls, msg=None)"}, {"intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "snippet": "codecs.StreamReader(stream)"}, {"intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "snippet": "pty.spawn(argv, master_read)"}, {"intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `canvheight`, `bg`.", "snippet": "turtle.screensize(canvwidth=None, canvheight=None, bg=None)"}, {"intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)"}, {"intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`, `id`.", "snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='', id='')"}, {"intent": "Return a context object which has the same attributes as the multiprocessing module . If `method` is None then the default context is returned .", "snippet": "multiprocessing.get_context(method=None)"}, {"intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "snippet": "os.set_handle_inheritable(handle, inheritable)"}, {"intent": "Set or remove the completer `function` .", "snippet": "readline.set_completer(function)"}, {"intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "snippet": "tarfile.open(**kwargs, name=None, mode='r')"}, {"intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "snippet": "traceback.format_exception(etype, value, tb, chain=True)"}, {"intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "snippet": "SubprocessTransport.get_pipe_transport(fd)"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "snippet": "dis.disassemble(code, lasti=-1, file=None)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)"}, {"intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "snippet": "binascii.b2a_qp(data, header=False)"}, {"intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "snippet": "json.JSONEncoder(default=None)"}, {"intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "snippet": "policy.fold(name, value)"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "snippet": "connection.backup(target, progress=None, sleep=0.250)"}, {"intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)"}, {"intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)"}, {"intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "snippet": "turtle.ondrag(fun, btn=1, add=None)"}, {"intent": "Establish a network connection and return a pair of ( reader , writer ) objects . The `loop` argument is optional and can always be determined automatically when this function is awaited from a coroutine .", "snippet": "asyncio.open_connection(loop=None)"}, {"intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "snippet": "sys.__displayhook__"}, {"intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "snippet": "base_http_request_handler.date_time_string(timestamp=None)"}, {"intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset .", "snippet": "mmap.mmap(fileno, length, offset)"}, {"intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "snippet": "logging.FileHandler(filename, mode='a', delay=False)"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "snippet": "os.fwalk(top='.', topdown=True)"}, {"intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "snippet": "timeit.Timer(stmt='pass', timer=<timer function>)"}, {"intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "snippet": "str(object=b'', encoding='utf-8', errors='strict')"}, {"intent": "This non-public class is the common base class of all ctypes data types.", "snippet": "ctypes._CData"}, {"intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)"}, {"intent": "Execute `command` args with messages identified by UID , rather than message number .", "snippet": "IMAP4.uid(command)"}, {"intent": "Return the result when it arrives . If `timeout` is not None and the result does not arrive within timeout seconds then multiprocessing.TimeoutError is raised .", "snippet": "async_result.get(timeout)"}, {"intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "snippet": "tempfile.mkdtemp(prefix=None, dir=None)"}, {"intent": "Turn turtle left by `angle` units .", "snippet": "turtle.lt(angle)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "snippet": "timeit.repeat(stmt='pass')"}, {"intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")"}, {"intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "snippet": "lzma.decompress(data, format=FORMAT_AUTO, filters=None)"}, {"intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "snippet": "shutil.register_archive_format(name, function, extra_args, description)"}, {"intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "snippet": "text_wrapper.fill(text)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "snippet": "smtplib.SMTP_SSL(host='', port=0)"}, {"intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "snippet": "quopri.encode(input, output, quotetabs, header=False)"}, {"intent": "Pop and return the smallest `item` from the `heap` , and also push the new item .", "snippet": "heapq.heapreplace(heap, item)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "snippet": "nntplib.NNTP_SSL(host, port=563)"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "snippet": "warnings.warn(message, category=None, stacklevel=1)"}, {"intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)"}, {"intent": "Return buffered data without advancing the file position . With arguments `n`.", "snippet": "bz2_file.peek(n)"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.load(file, fix_imports=True)"}, {"intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `dir_fd`.", "snippet": "os.chown(path, uid, gid, dir_fd=None)"}, {"intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "snippet": "mmap.rfind(sub)"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)"}, {"intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "snippet": "calendar.LocaleTextCalendar(locale=None)"}, {"intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "snippet": "plistlib.dumps(value, skipkeys=False)"}, {"intent": "This function returns the C string starting at memory `address` address as a bytes object . If `size` is specified , it is used as size , otherwise the string is assumed to be zero-terminated .", "snippet": "ctypes.string_at(address, size=-1)"}, {"intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "snippet": "telnetlib.Telnet(port=0)"}, {"intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context . If parameters `keyfile` , `certfile` , `ca_certs` or `ciphers` are set , then the values are passed to SSLContext.load_cert_chain ( ) , SSLContext.load_verify_locations ( ) , and SSLContext.set_ciphers ( ) .", "snippet": "ssl.wrap_socket(sock, ciphers=None)"}, {"intent": "Create a new directory at this given path . If `parents` is true , any missing parents of this path are created as needed ; they are created with the default permissions without taking mode into account ( mimicking the POSIX mkdir -p command ) .", "snippet": "Path.mkdir(parents=False)"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)"}, {"intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "snippet": "bytes.partition(sep)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "snippet": "os.utime(path, ns, dir_fd=None)"}, {"intent": "Test that `first` is ( or is not ) in `second` . With arguments `msg`.", "snippet": "test_case.assertIn(first, second, msg=None)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "snippet": "email.utils.formatdate(timeval=None, usegmt=False)"}, {"intent": "A subclass of Mailbox for mailboxes in MMDF format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.MMDF(path, create=True)"}, {"intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "snippet": "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)"}, {"intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "snippet": "OSError(errno, strerror, filename, winerror)"}, {"intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "snippet": "len(proxy)"}, {"intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "snippet": "subprocess.call(args, timeout=None)"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "snippet": "text_calendar.pryear(theyear, c=6)"}, {"intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "snippet": "TarInfo.frombuf(buf, encoding, errors)"}, {"intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "snippet": "base64.b16decode(s, casefold=False)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "snippet": "fileinput.FileInput(mode='r')"}, {"intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "snippet": "subprocess.run(args, check=False)"}, {"intent": "Parses the `lines` argument .", "snippet": "robot_file_parser.parse(lines)"}, {"intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)"}, {"intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) . `is_authenticated` sets the initial value of the is_authenticated flag for the given URI or list of URIs .", "snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)"}, {"intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "snippet": "doc_test_finder.find(obj, name, module, globs)"}, {"intent": "Return the Attr node for the attribute named by `attrname` .", "snippet": "Element.getAttributeNode(attrname)"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.unified_diff(a, b, tofile='')"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "snippet": "os.fwalk(top='.', dir_fd=None)"}, {"intent": "Tries to determine the name of the Linux OS distribution name . Returns a tuple ( `distname` , `version` , `id` ) which defaults to the args given as parameters . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), version='')"}, {"intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "snippet": "widget.insert(pos, child, **kw)"}, {"intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "snippet": "Codec.decode(input)"}, {"intent": "Create a shared threading.Condition object and return a proxy for it . If `lock` is supplied then it should be a proxy for a threading.Lock or threading.RLock object .", "snippet": "sync_manager.Condition(lock)"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "snippet": "shlex.shlex(instream=None, infile=None)"}, {"intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "snippet": "pdb.Pdb(stdout=None)"}, {"intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)"}, {"intent": "Create a symbolic link pointing to `src` named `dst` .", "snippet": "os.symlink(src, dst)"}, {"intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "snippet": "ur_lopener.retrieve(url, filename=None, data=None)"}, {"intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "snippet": "os.initgroups(username, gid)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "snippet": "text_calendar.pryear(theyear, w=2, l=1)"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "snippet": "turtle.onscreenclick(fun, btn=1, add=None)"}, {"intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `fromlist`.", "snippet": "importlib.__import__(name, globals=None, fromlist=())"}, {"intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "snippet": "os.setreuid(ruid, euid)"}, {"intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) . If only the warning and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "snippet": "test_case.assertWarns(warning, msg=None)"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')"}, {"intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "snippet": "email.iterators._structure(msg, level=0)"}, {"intent": "A subclass of Mailbox for mailboxes in MMDF format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.MMDF(path, factory=None, create=True)"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid :", "snippet": "plistlib.load(fp, fmt=None)"}, {"intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "snippet": "bytearray.expandtabs(tabsize=8)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, fromfile='', tofile='')"}, {"intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "snippet": "dataclasses.field(init=True)"}, {"intent": "This class implements the actual POP3 protocol . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt ( if not specified , the global default timeout setting will be used ) . If `port` is omitted , the standard POP3 port ( 110 ) is used . With arguments `host`.", "snippet": "poplib.POP3(host, timeout, port=POP3_PORT)"}, {"intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "snippet": "formatter.NullFormatter(writer=None)"}, {"intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "snippet": "lzma.decompress(data, format=FORMAT_AUTO)"}, {"intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "snippet": "tempfile.TemporaryFile(dir=None)"}, {"intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "snippet": "calendar.LocaleHTMLCalendar(locale=None)"}, {"intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "snippet": "email_message.make_alternative(boundary=None)"}, {"intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "snippet": "dis.disco(code, lasti=-1, file=None)"}, {"intent": "Set the debugging `level` .", "snippet": "HTTPConnection.set_debuglevel(level)"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "snippet": "io.FileIO(name, mode='r', opener=None)"}, {"intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "snippet": "policy.fold_binary(name, value)"}, {"intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "snippet": "warnings.warn(message, category=None)"}, {"intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . If provided , `codeset` will change the charset used to encode translated strings in the lgettext ( ) and lngettext ( ) methods .", "snippet": "gettext.translation(domain, localedir=None, codeset=None)"}, {"intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "snippet": "argparse.FileType(bufsize=-1, encoding=None)"}, {"intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection . With arguments `debuglevel`.", "snippet": "urllib.request.HTTPSHandler(debuglevel=0, context=None)"}, {"intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)"}, {"intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "snippet": "curses.ascii.isascii(c)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect(a, x, hi=len(a))"}, {"intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `symlinks`.", "snippet": "venv.create(env_dir, symlinks=False)"}, {"intent": "Change the `mode` of `path` to the numeric mode . With arguments `follow_symlinks`.", "snippet": "os.chmod(path, mode, follow_symlinks=True)"}, {"intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "snippet": "email.message_from_bytes(s, _class=None)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "snippet": "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)"}, {"intent": "Byte-compile all the .py files found along sys.path . With arguments `legacy`.", "snippet": "compileall.compile_path(legacy=False)"}, {"intent": "Look up the codec for the given `encoding` and return its decoder function .", "snippet": "codecs.getdecoder(encoding)"}, {"intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) .", "snippet": "logging.handlers.MemoryHandler(capacity)"}, {"intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "snippet": "Pattern.match(string, pos, endpos)"}, {"intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `sock`.", "snippet": "asyncio.open_unix_connection(sock=None)"}, {"intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation .", "snippet": "logging.Formatter(fmt=None, datefmt=None)"}, {"intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "snippet": "print(*objects, sep=' ', flush=False)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `spec`.", "snippet": "unittest.mock.Mock(**kwargs, spec=None)"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "snippet": "zlib.compressobj(zdict, level=-1, strategy=Z_DEFAULT_STRATEGY)"}, {"intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)"}, {"intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)"}, {"intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "snippet": "traceback.print_exception(etype, value, tb, file=None)"}, {"intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "snippet": "asyncio.start_server(client_connected_cb, backlog=100)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.unified_diff(a, b, fromfile='')"}, {"intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "snippet": "bytearray.endswith(suffix)"}, {"intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "snippet": "CookieJar.clear(domain, path, name)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)"}, {"intent": "Create a new decompressor object.", "snippet": "bz2.BZ2Decompressor"}, {"intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "snippet": "window.addch(y, x, ch, attr)"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "snippet": "base64.a85encode(b, foldspaces=False, pad=False)"}, {"intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "snippet": "xmlparser.ExternalEntityParserCreate(context)"}, {"intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped .", "snippet": "syslog.openlog(ident)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "snippet": "os.utime(path, ns, times=None, dir_fd=None)"}, {"intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "snippet": "bytearray.replace(old, new)"}, {"intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "snippet": "message.get_payload(decode=False)"}, {"intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' .", "snippet": "ZipFile.open(name, mode='r')"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, depth=None)"}, {"intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "snippet": "directory.start_component(component=None, uuid=None)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "snippet": "smtplib.SMTP_SSL(port=0)"}, {"intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "snippet": "doctest.debug(module, name)"}, {"intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "snippet": "io.BufferedRandom(raw)"}, {"intent": "Set the file \u2019 s current position . With arguments `pos`.", "snippet": "mmap.seek(pos)"}, {"intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `encoding` is not None , it is used to open the file with that encoding . With arguments `filename`.", "snippet": "logging.FileHandler(filename, mode='a', encoding=None)"}, {"intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "snippet": "bytes.lstrip(chars)"}, {"intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)"}, {"intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)"}, {"intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "snippet": "asyncio.open_unix_connection(limit=None)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "snippet": "nntplib.NNTP_SSL(host, timeout, user=None)"}, {"intent": "Return True if the `object` argument appears callable , False if not .", "snippet": "callable(object)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)"}, {"intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "snippet": "datetime.replace(microsecond=self.microsecond)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')"}, {"intent": "Return the iterator object itself .", "snippet": "iterator.__iter__()"}, {"intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)"}, {"intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "snippet": "shelve.BsdDbShelf(dict, writeback=False)"}, {"intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "snippet": "mmap.mmap(fileno, length)"}, {"intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "snippet": "lzma.compress(data, check=-1, preset=None)"}, {"intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)"}, {"intent": "Receive data from the socket . With arguments `bufsize`.", "snippet": "socket.recvfrom(bufsize)"}, {"intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "snippet": "header.append(s, charset=None, errors='strict')"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, indent=1, compact=False)"}, {"intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "snippet": "bytearray.partition(sep)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.unified_diff(a, b, fromfile='', tofile='')"}, {"intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "snippet": "socket.socket(fileno=None)"}, {"intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "snippet": "bdb.get_breaks(filename, lineno)"}, {"intent": "If the debugger should stop at this exception , invokes the user_exception ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "snippet": "bdb.dispatch_exception(frame, arg)"}, {"intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "snippet": "control.event(event, argument)"}, {"intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` . `mode` specifies both the permissions to use and the type of node to be created , being combined ( bitwise OR ) with one of stat.S_IFREG , stat.S_IFCHR , stat.S_IFBLK , and stat.S_IFIFO ( those constants are available in stat ) .", "snippet": "os.mknod(path, mode=0o600, device=0)"}, {"intent": "This function is deprecated in this module . With arguments `qs`.", "snippet": "cgi.parse_qsl(qs)"}, {"intent": "A Condition object . The optional `lock` argument must be a Lock object or None .", "snippet": "asyncio.Condition(lock=None)"}, {"intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "snippet": "process.join(timeout)"}, {"intent": "Initialize the terminal . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "snippet": "curses.setupterm(fd=-1)"}, {"intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "snippet": "curses.newwin(nlines, ncols)"}, {"intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "snippet": "text_calendar.pryear(theyear, w=2, m=3)"}, {"intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `lineno`.", "snippet": "shlex.error_leader(lineno=None)"}, {"intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "snippet": "calendar.timegm(tuple)"}, {"intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "snippet": "tkinter.Tk(screenName=None, className='Tk')"}, {"intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `strict`.", "snippet": "configparser.RawConfigParser(':'), ';'), strict=True)"}, {"intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "snippet": "mmap.mmap(fileno, length, offset)"}, {"intent": "Equivalent to as_bytes ( ) .", "snippet": "message.__bytes__()"}, {"intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.MH(path, create=True)"}, {"intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `onerror`.", "snippet": "os.fwalk(onerror=None)"}, {"intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "snippet": "subprocess.run(args, capture_output=False)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The `cadefault` parameter is ignored .", "snippet": "urllib.request.urlopen(url, data=None, cadefault=False)"}, {"intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "snippet": "connection.backup(target, progress=None, name=\"main\")"}, {"intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "snippet": "os.path.relpath(path, start=os.curdir)"}, {"intent": "Return a file-like object that can be used as a temporary storage area . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "snippet": "tempfile.TemporaryFile(newline=None)"}, {"intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "snippet": "decimal.quantize(exp, rounding=None, context=None)"}, {"intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "snippet": "quopri.encodestring(s, quotetabs=False, header=False)"}, {"intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "snippet": "object.__reduce_ex__(protocol)"}, {"intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "snippet": "shlex.shlex(instream=None)"}, {"intent": "A subclass of Mailbox for mailboxes in MH format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.MH(path, factory=None, create=True)"}, {"intent": "\u201c Byteswap \u201d all samples in a `fragment` and returns the modified fragment . With arguments `width`.", "snippet": "audioop.byteswap(fragment, width)"}, {"intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "snippet": "cgi.parse_qs(qs, keep_blank_values=False)"}, {"intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "snippet": "lzma.decompress(data, filters=None)"}, {"intent": "Called when the `test` case test signals a failure . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "snippet": "test_result.addFailure(test, err)"}, {"intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "snippet": "r_lock.acquire(timeout=-1)"}, {"intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "snippet": "lzma.decompress(data, memlimit=None)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "snippet": "timeit.repeat(stmt='pass', setup='pass')"}, {"intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "snippet": "py_compile.compile(file, cfile=None, dfile=None)"}, {"intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "snippet": "ssl.wrap_socket(sock)"}, {"intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "snippet": "parser.compilest(st, filename='<syntax-tree>')"}, {"intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "snippet": "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)"}, {"intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "snippet": "threading.Condition(lock=None)"}, {"intent": "Test that `expr` is ( or is not ) None .", "snippet": "test_case.assertIsNotNone(expr)"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`, `backup`.", "snippet": "fileinput.FileInput(files=None, backup='')"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "gzip.open(filename, mode='rb', errors=None)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)"}, {"intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`, `action`.", "snippet": "multiprocessing.Barrier(parties, action)"}, {"intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`.", "snippet": "plistlib.loads(data, use_builtin_types=True)"}, {"intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)"}, {"intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML . The tree is initialized with the contents of the XML `file` if given .", "snippet": "xml.etree.ElementTree.ElementTree(element=None, file=None)"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)"}, {"intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "snippet": "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values :", "snippet": "fcntl.lockf(fd, cmd)"}, {"intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)"}, {"intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "snippet": "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)"}, {"intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "snippet": "subprocess.check_call(args, timeout=None)"}, {"intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "snippet": "shelve.BsdDbShelf(dict, protocol=None, keyencoding='utf-8')"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.unified_diff(a, b, fromfile='', fromfiledate='')"}, {"intent": "The `year` , `month` and `day` arguments are required . With arguments `microsecond`.", "snippet": "datetime.datetime(year, month, day, microsecond=0)"}, {"intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_last(chain=True)"}, {"intent": "Push `ch` so the next get_wch ( ) will return it .", "snippet": "curses.unget_wch(ch)"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "snippet": "urllib.request.urlopen(url, timeout, data=None, context=None)"}, {"intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pprint(object, stream=None, indent=1)"}, {"intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "snippet": "calendar.calendar(year, w=2, c=6)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "snippet": "nntplib.NNTP_SSL(host, timeout, port=563)"}, {"intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "snippet": "shelve.open(filename, flag='c', writeback=False)"}, {"intent": "Return a TarFile object for the pathname `name` . `bufsize` specifies the blocksize and defaults to 20 * 512 bytes . With arguments `**kwargs`.", "snippet": "tarfile.open(**kwargs, bufsize=10240)"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `empty_lines_in_values`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, empty_lines_in_values=True)"}, {"intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`, `MIMEtype`.", "snippet": "mailcap.findmatch(caps, MIMEtype)"}, {"intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "snippet": "os.utime(path, ns, times=None)"}, {"intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "snippet": "os.replace(src, dst, src_dir_fd=None)"}, {"intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "snippet": "pkgutil.walk_packages(prefix='')"}, {"intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "snippet": "msvcrt.locking(fd, mode, nbytes)"}, {"intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "snippet": "bisect.bisect(a, x, lo=0, hi=len(a))"}, {"intent": "Create a compressor object , which can be used to compress data incrementally . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "snippet": "lzma.LZMACompressor(filters=None)"}, {"intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "snippet": "platform.architecture(executable=sys.executable, linkage='')"}, {"intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type . The optional `constructor` parameter , if provided , is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time .", "snippet": "copyreg.pickle(type, function, constructor=None)"}, {"intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0)"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "snippet": "time.replace(microsecond=self.microsecond)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, whence=0)"}, {"intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)"}, {"intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)"}, {"intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "snippet": "winreg.OpenKey(key, sub_key, reserved=0)"}, {"intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "snippet": "time.replace(tzinfo=self.tzinfo)"}, {"intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "snippet": "pty.spawn(argv, master_read, stdin_read)"}, {"intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "snippet": "Pattern.fullmatch(string, pos)"}, {"intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) . The `version` argument indicates the data format that dumps should use ( see below ) .", "snippet": "marshal.dumps(value, version)"}, {"intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)"}, {"intent": "Read up to `size` bytes from the object and return them .", "snippet": "raw_io_base.read(size=-1)"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "snippet": "email_message.set_param(param, value, header='Content-Type', charset=None)"}, {"intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_last_error`.", "snippet": "ctypes.CDLL(name, use_last_error=False)"}, {"intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "snippet": "turtle.circle(radius, extent=None, steps=None)"}, {"intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')"}, {"intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "snippet": "operator.__eq__(a, b)"}, {"intent": "Create a datagram connection . `protocol_factory` must be a callable returning a protocol implementation . The socket `family` can be either AF_INET , AF_INET6 , or AF_UNIX , depending on host ( or the family argument , if provided ) .", "snippet": "loop.create_datagram_endpoint(protocol_factory, family=0)"}, {"intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "snippet": "test.support.calcvobjsize(fmt)"}, {"intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "snippet": "plistlib.load(fp, use_builtin_types=True)"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, compact=False)"}, {"intent": "Connect to the given `host` and `port` . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt .", "snippet": "FTP.connect(port=0, timeout=None)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, start=0, whence=0)"}, {"intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>)"}, {"intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "snippet": "sync_manager.dict(sequence)"}, {"intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "snippet": "pickle.load(file, fix_imports=True, errors=\"strict\")"}, {"intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "snippet": "traceback_exception.from_exception(exc, capture_locals=False)"}, {"intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "snippet": "stream_writer.get_extra_info(name)"}, {"intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "snippet": "dis.dis(x=None, file=None)"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "snippet": "tempfile.SpooledTemporaryFile(mode='w+b')"}, {"intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`, `useTk`.", "snippet": "tkinter.Tcl(baseName=None, useTk=0)"}, {"intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "snippet": "calendar.month(theyear, themonth, l=0)"}, {"intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "snippet": "locale.getlocale(category=LC_CTYPE)"}, {"intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "snippet": "os.pathconf(path, name)"}, {"intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database . With arguments `strict`.", "snippet": "mimetypes.MimeTypes(filenames=(), strict=True)"}, {"intent": "Similar to the guess_all_extensions ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "snippet": "mime_types.guess_all_extensions(type, strict=True)"}, {"intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "snippet": "timeit.repeat(stmt='pass', timer=<default timer>)"}, {"intent": "Register the `factory` function with the `name` name .", "snippet": "xml.dom.registerDOMImplementation(name, factory)"}, {"intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "snippet": "traceback.print_last(limit=None, chain=True)"}, {"intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context .", "snippet": "doctest.run_docstring_examples(f, globs)"}, {"intent": "Loads an external XML section into this element tree . `source` is a file name or file object . `parser` is an optional parser instance .", "snippet": "element_tree.parse(source, parser=None)"}, {"intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "snippet": "ftplib.FTP(host='', passwd='')"}, {"intent": "Create a turtle . With arguments `canvas`.", "snippet": "turtle.RawPen(canvas)"}, {"intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "snippet": "Cmd.precmd(line)"}, {"intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)"}, {"intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "snippet": "email.utils.formatdate(timeval=None, localtime=False)"}, {"intent": "Put `item` into the queue . The optional args `block` and `timeout` are ignored and only provided for compatibility with Queue.put ( ) .", "snippet": "SimpleQueue.put(item, block=True)"}, {"intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"}, {"intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "snippet": "turtle.onclick(fun, btn=1, add=None)"}, {"intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . If `facility` is not specified , LOG_USER is used . With arguments `SYSLOG_UDP_PORT)`.", "snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', facility=LOG_USER)"}, {"intent": "Writes the `object` \u2019 s contents encoded to the stream .", "snippet": "stream_writer.write(object)"}, {"intent": "List subscribed mailbox names in `directory` matching `pattern` .", "snippet": "IMAP4.lsub(directory='\"\"')"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')"}, {"intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `adobe` controls whether the encoded byte sequence is framed with < ~ and ~ > , which is used by the Adobe implementation .", "snippet": "base64.a85encode(b, foldspaces=False, adobe=False)"}, {"intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)"}, {"intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `day`.", "snippet": "date.replace(year=self.year, day=self.day)"}, {"intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "snippet": "datetime.isoformat(sep='T', timespec='auto')"}, {"intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "snippet": "decimal.quantize(exp, context=None)"}, {"intent": "Create a new Mock object . With arguments `**kwargs`, `spec`, `return_value`.", "snippet": "unittest.mock.Mock(**kwargs, spec=None, return_value=DEFAULT)"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')"}, {"intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "snippet": "Node.toprettyxml(indent=\"\\t\", encoding=None)"}, {"intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "snippet": "platform.win32_ver(release='', version='')"}, {"intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\")"}, {"intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "snippet": "re.split(pattern, string, maxsplit=0)"}, {"intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "snippet": "window.insstr(str, attr)"}, {"intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "snippet": "shlex.shlex(instream=None, posix=False)"}, {"intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "snippet": "mime_types.guess_extension(type, strict=True)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)"}, {"intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', delay=False)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)"}, {"intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)"}, {"intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `mode`.", "snippet": "ctypes.OleDLL(name, mode=DEFAULT_MODE)"}, {"intent": "Run the command described by `args` . With arguments `cwd`.", "snippet": "subprocess.call(args, cwd=None)"}, {"intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "snippet": "lock.acquire(timeout=-1)"}, {"intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`, `bufsize`.", "snippet": "fileinput.FileInput(files=None, bufsize=0)"}, {"intent": "Receive notification of a processing instruction . With arguments `target`, `data`.", "snippet": "ContentHandler.processingInstruction(target, data)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "snippet": "smtplib.SMTP(timeout, host='', port=0)"}, {"intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "snippet": "binascii.a2b_qp(data, header=False)"}, {"intent": "Construct an IPv4 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "snippet": "ipaddress.IPv4Network(address, strict=True)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "bz2.open(filename, newline=None)"}, {"intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "snippet": "platform.mac_ver('', ''), versioninfo=('', machine='')"}, {"intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If optional `charset` is specified , the parameter will be encoded according to RFC 2231 . With arguments `param`.", "snippet": "message.set_param(param, value, header='Content-Type', charset=None)"}, {"intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "snippet": "robot_file_parser.request_rate(useragent)"}, {"intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pformat(object, indent=1, depth=None)"}, {"intent": "Attempt to set up a connection to the listener which is using `address` address , returning a Connection . The type of the connection is determined by `family` argument , but this can generally be omitted since it can usually be inferred from the format of address .", "snippet": "multiprocessing.connection.Client(address, family)"}, {"intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "snippet": "email_policy.header_source_parse(sourcelines)"}, {"intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "snippet": "HTTPConnection.request(method, url, headers={}, encode_chunked=False)"}, {"intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional second argument is a `transport` factory instance ; by default it is an internal SafeTransport instance for https : URLs and an internal HTTP Transport instance otherwise . With arguments `uri`.", "snippet": "xmlrpc.client.ServerProxy(uri, transport=None)"}, {"intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "snippet": "calendar.prmonth(theyear, themonth, w=0)"}, {"intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')"}, {"intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "snippet": "random.choices(population, weights=None, cum_weights=None, k=1)"}, {"intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)"}, {"intent": "Acquire a lock , `blocking` or non-blocking .", "snippet": "r_lock.acquire(blocking=True)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "snippet": "zlib.compressobj(zdict, level=-1)"}, {"intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)"}, {"intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')"}, {"intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_child`.", "snippet": "os.register_at_fork(before=None, after_in_child=None)"}, {"intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "snippet": "zlib.compressobj(zdict, level=-1, method=DEFLATED)"}, {"intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`, `formatreturns`.", "snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)"}, {"intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "snippet": "message.del_param(param, header='content-type')"}, {"intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "snippet": "difflib.SequenceMatcher(isjunk=None, a='')"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "snippet": "dataclasses.make_dataclass(cls_name, fields, bases=())"}, {"intent": "Enter post-mortem debugging of the given `traceback` object .", "snippet": "pdb.post_mortem(traceback=None)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "snippet": "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')"}, {"intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `delimiters`.", "snippet": "configparser.RawConfigParser(':'), ';'), interpolation, delimiters=('=')"}, {"intent": "Return non-zero if the `mode` is from a directory .", "snippet": "stat.S_ISDIR(mode)"}, {"intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "snippet": "nntplib.NNTP_SSL(host, user=None)"}, {"intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "snippet": "widget.tag_has(tagname)"}, {"intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "snippet": "winreg.OpenKeyEx(key, sub_key, reserved=0)"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "snippet": "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)"}, {"intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "snippet": "locale.currency(val, symbol=True, grouping=False)"}, {"intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "bz2.open(filename, errors=None)"}, {"intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "snippet": "Pattern.subn(repl, string, count=0)"}, {"intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "snippet": "socket.getaddrinfo(host, port, type=0, proto=0)"}, {"intent": "Return the file handle for the file descriptor `fd` .", "snippet": "msvcrt.get_osfhandle(fd)"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `tearDown`.", "snippet": "unittest.FunctionTestCase(testFunc, tearDown=None)"}, {"intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` .", "snippet": "Morsel.output(header='Set-Cookie:')"}, {"intent": "Rename the file or directory `src` to `dst` .", "snippet": "os.replace(src, dst)"}, {"intent": "Create a shared queue.Queue object and return a proxy for it . With arguments `maxsize`.", "snippet": "sync_manager.Queue(maxsize)"}, {"intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)"}, {"intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "snippet": "smtplib.SMTP(host='', port=0)"}, {"intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')"}, {"intent": "Represent a single frame in the traceback or stack that is being formatted or printed . If `lookup_line` is False , the source code is not looked up until the FrameSummary has the `line` attribute accessed ( which also happens when casting it to a tuple ) . With arguments `filename`, `lineno`, `name`.", "snippet": "traceback.FrameSummary(filename, lineno, name, lookup_line=True)"}, {"intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `mode`, `handle`.", "snippet": "ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None)"}, {"intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "snippet": "HTTPConnection.putrequest(method, url)"}, {"intent": "Set the current DTDHandler . With arguments `handler`.", "snippet": "XMLReader.setDTDHandler(handler)"}, {"intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "snippet": "smtplib.SMTP_SSL(timeout, port=0)"}, {"intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `compressed` argument determines whether files are compressed .", "snippet": "zipapp.create_archive(source, target=None, compressed=False)"}, {"intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "snippet": "mailbox.Babyl(path, factory=None, create=True)"}, {"intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "snippet": "ctypes.wstring_at(address, size=-1)"}, {"intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "snippet": "sync_manager.Barrier(parties, action)"}, {"intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "snippet": "queue.get(block, timeout)"}, {"intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "snippet": "turtle.numinput(title, prompt, minval=None, maxval=None)"}, {"intent": "Create a symbolic link pointing to `src` named `dst` . Otherwise , the symlink will be created as a directory if `target_is_directory` is True or a file symlink ( the default ) otherwise .", "snippet": "os.symlink(src, dst, target_is_directory=False)"}, {"intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)"}, {"intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`, `buffering`.", "snippet": "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)"}, {"intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')"}, {"intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "snippet": "mailbox.Maildir(dirname, factory=None)"}, {"intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "snippet": "inspect.getmembers(object, predicate)"}, {"intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener . With arguments `closefd`.", "snippet": "io.FileIO(name, closefd=True, opener=None)"}, {"intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `indent`.", "snippet": "doctest.Example(source, want, indent=0)"}, {"intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "snippet": "urllib.request.Request(url, data=None, unverifiable=False)"}, {"intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `upgrade`.", "snippet": "venv.EnvBuilder(system_site_packages=False, upgrade=False)"}, {"intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `flags`.", "snippet": "loop.getaddrinfo(host, port, type=0, flags=0)"}, {"intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "snippet": "config_parser.getint(section, option, raw=False)"}, {"intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "snippet": "connection.executemany(sql)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "snippet": "os.execvpe(file, args, env)"}, {"intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "snippet": "gzip.open(filename, mode='rb', encoding=None)"}, {"intent": "Send the signal `sig` to the process group `pgid` .", "snippet": "os.killpg(pgid, sig)"}, {"intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `_subtype` sets the subtype of the message ; it defaults to rfc822 .", "snippet": "email.mime.message.MIMEMessage(_msg, _subtype='rfc822')"}, {"intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "snippet": "config_parser.get(section, option, raw=False)"}, {"intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "snippet": "Morsel.output(attrs=None, header='Set-Cookie:')"}, {"intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "snippet": "doctest.DocTestFinder(verbose=False, recurse=True)"}, {"intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "snippet": "tempfile.mkstemp(prefix=None, dir=None)"}, {"intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)"}, {"intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "snippet": "doctest.testmod(optionflags=0)"}, {"intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')"}, {"intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy . If a manager instance will be connected to the server using the connect ( ) method , or if the `create_method` argument is False then this can be left as None .", "snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid, create_method)"}, {"intent": "Run the command described by `args` . With arguments `shell`.", "snippet": "subprocess.call(args, shell=False)"}, {"intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "snippet": "lzma.open(filename, mode=\"rb\", format=None)"}, {"intent": "Run doctest.testmod ( ) on the given `module` . If `verbosity` is None , doctest.testmod ( ) is run with verbosity set to verbose . `optionflags` is passed as optionflags to doctest.testmod ( ) .", "snippet": "test.support.run_doctest(module, verbosity=None, optionflags=0)"}, {"intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "snippet": "unittest.mock.mock_open(mock=None, read_data=None)"}, {"intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "snippet": "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)"}, {"intent": "This function accepts a parse tree represented as a `sequence` and builds an internal representation if possible .", "snippet": "parser.sequence2st(sequence)"}, {"intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')"}, {"intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "snippet": "msilib.Feature(db, id, title, desc, display, directory=None)"}, {"intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "snippet": "pprint.pprint(object, compact=False)"}, {"intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function . If the `record` argument is False ( the default ) the context manager returns None on entry . The `module` argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected .", "snippet": "warnings.catch_warnings(record=False, module=None)"}, {"intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "snippet": "re.subn(pattern, repl, string, flags=0)"}, {"intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")"}, {"intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`, `required`.", "snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)"}, {"intent": "Set the garbage collection debugging `flags` .", "snippet": "gc.set_debug(flags)"}, {"intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`, `callback`.", "snippet": "pool.starmap_async(func, iterable, chunksize, callback)"}, {"intent": "Mark the Future as done and set an `exception` .", "snippet": "future.set_exception(exception)"}, {"intent": "Add `headers` and payload to `msg` : If not specified , and `filename` is specified , add the header with the value attachment . With arguments `<'str'>`.", "snippet": "email.contentmanager.set_content(msg, <'str'>, filename=None)"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(object=b'', encoding='utf-8', errors='strict')"}, {"intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `description`.", "snippet": "unittest.FunctionTestCase(testFunc, description=None)"}, {"intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree .", "snippet": "shutil.copytree(src, dst, symlinks=False)"}, {"intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "snippet": "Morsel.output(attrs=None)"}, {"intent": "Windows only : The returned function prototype creates functions that use the stdcall calling convention , except on Windows CE where WINFUNCTYPE ( ) is the same as CFUNCTYPE ( ) . With arguments `restype`, `*argtypes`.", "snippet": "ctypes.WINFUNCTYPE(restype, *argtypes)"}, {"intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "snippet": "fcntl.lockf(fd, cmd, start=0)"}, {"intent": "A subclass of ConnectionError, raised when a connection attempt is refused by the peer.", "snippet": "ConnectionRefusedError"}, {"intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "snippet": "urllib.request.urlopen(url, timeout, data=None)"}, {"intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "snippet": "oss_audio_device.setparameters(format, nchannels, strict=False)"}, {"intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "snippet": "test_case.subTest(**params, msg=None)"}, {"intent": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised . With arguments `exc`, `**kwargs`.", "snippet": "test.support.TransientResource(exc, **kwargs)"}, {"intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "snippet": "os.execvp(file, args)"}, {"intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "snippet": "dataclasses.make_dataclass(cls_name, fields, frozen=False)"}, {"intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "snippet": "str(errors='strict')"}]